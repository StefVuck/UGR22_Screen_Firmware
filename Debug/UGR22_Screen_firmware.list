
UGR22_Screen_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006ed8  08007c90  08007c90  00008c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb68  0800eb68  0001006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb68  0800eb68  0000fb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb70  0800eb70  0001006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800eb70  0800eb70  0000fb70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800eb78  0800eb78  0000fb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800eb80  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000006c  0800ebec  0001006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  0800ebec  00010558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016571  00000000  00000000  0001009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ad  00000000  00000000  0002660d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00029ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e94  00000000  00000000  0002b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025984  00000000  00000000  0002c074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017184  00000000  00000000  000519f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbdd6  00000000  00000000  00068b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134952  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005970  00000000  00000000  00134998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0013a308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c78 	.word	0x08007c78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007c78 	.word	0x08007c78

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 800059e:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <ILI9341_SendCommand+0x54>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a11      	ldr	r2, [pc, #68]	@ (80005e8 <ILI9341_SendCommand+0x58>)
 80005a4:	8811      	ldrh	r1, [r2, #0]
 80005a6:	2200      	movs	r2, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fb9f 	bl	8003cec <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80005ae:	4b0f      	ldr	r3, [pc, #60]	@ (80005ec <ILI9341_SendCommand+0x5c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a0f      	ldr	r2, [pc, #60]	@ (80005f0 <ILI9341_SendCommand+0x60>)
 80005b4:	8811      	ldrh	r1, [r2, #0]
 80005b6:	2200      	movs	r2, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f003 fb97 	bl	8003cec <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 80005be:	f107 010f 	add.w	r1, r7, #15
 80005c2:	2305      	movs	r3, #5
 80005c4:	2201      	movs	r2, #1
 80005c6:	480b      	ldr	r0, [pc, #44]	@ (80005f4 <ILI9341_SendCommand+0x64>)
 80005c8:	f004 ff45 	bl	8005456 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80005cc:	4b07      	ldr	r3, [pc, #28]	@ (80005ec <ILI9341_SendCommand+0x5c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a07      	ldr	r2, [pc, #28]	@ (80005f0 <ILI9341_SendCommand+0x60>)
 80005d2:	8811      	ldrh	r1, [r2, #0]
 80005d4:	2201      	movs	r2, #1
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 fb88 	bl	8003cec <HAL_GPIO_WritePin>
}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200000f4 	.word	0x200000f4
 80005e8:	200000f8 	.word	0x200000f8
 80005ec:	200000ec 	.word	0x200000ec
 80005f0:	200000f0 	.word	0x200000f0
 80005f4:	20000088 	.word	0x20000088

080005f8 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000606:	4b15      	ldr	r3, [pc, #84]	@ (800065c <ILI9341_SendData+0x64>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a15      	ldr	r2, [pc, #84]	@ (8000660 <ILI9341_SendData+0x68>)
 800060c:	8811      	ldrh	r1, [r2, #0]
 800060e:	2201      	movs	r2, #1
 8000610:	4618      	mov	r0, r3
 8000612:	f003 fb6b 	bl	8003cec <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000616:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <ILI9341_SendData+0x6c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a13      	ldr	r2, [pc, #76]	@ (8000668 <ILI9341_SendData+0x70>)
 800061c:	8811      	ldrh	r1, [r2, #0]
 800061e:	2200      	movs	r2, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f003 fb63 	bl	8003cec <HAL_GPIO_WritePin>
	//Write byte using SPI
	while(lcdSPIhandle.State != HAL_SPI_STATE_READY);
 8000626:	bf00      	nop
 8000628:	4b10      	ldr	r3, [pc, #64]	@ (800066c <ILI9341_SendData+0x74>)
 800062a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b01      	cmp	r3, #1
 8000632:	d1f9      	bne.n	8000628 <ILI9341_SendData+0x30>
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 50);
 8000634:	f107 010f 	add.w	r1, r7, #15
 8000638:	2332      	movs	r3, #50	@ 0x32
 800063a:	2201      	movs	r2, #1
 800063c:	480b      	ldr	r0, [pc, #44]	@ (800066c <ILI9341_SendData+0x74>)
 800063e:	f004 ff0a 	bl	8005456 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <ILI9341_SendData+0x6c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a08      	ldr	r2, [pc, #32]	@ (8000668 <ILI9341_SendData+0x70>)
 8000648:	8811      	ldrh	r1, [r2, #0]
 800064a:	2201      	movs	r2, #1
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fb4d 	bl	8003cec <HAL_GPIO_WritePin>
}
 8000652:	bf00      	nop
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	200000f4 	.word	0x200000f4
 8000660:	200000f8 	.word	0x200000f8
 8000664:	200000ec 	.word	0x200000ec
 8000668:	200000f0 	.word	0x200000f0
 800066c:	20000088 	.word	0x20000088

08000670 <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4604      	mov	r4, r0
 8000678:	4608      	mov	r0, r1
 800067a:	4611      	mov	r1, r2
 800067c:	461a      	mov	r2, r3
 800067e:	4623      	mov	r3, r4
 8000680:	80fb      	strh	r3, [r7, #6]
 8000682:	4603      	mov	r3, r0
 8000684:	80bb      	strh	r3, [r7, #4]
 8000686:	460b      	mov	r3, r1
 8000688:	807b      	strh	r3, [r7, #2]
 800068a:	4613      	mov	r3, r2
 800068c:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 800068e:	202a      	movs	r0, #42	@ 0x2a
 8000690:	f7ff ff7e 	bl	8000590 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	0a1b      	lsrs	r3, r3, #8
 8000698:	b29b      	uxth	r3, r3
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ffab 	bl	80005f8 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ffa6 	bl	80005f8 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 80006ac:	887b      	ldrh	r3, [r7, #2]
 80006ae:	0a1b      	lsrs	r3, r3, #8
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff9f 	bl	80005f8 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 80006ba:	887b      	ldrh	r3, [r7, #2]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff9a 	bl	80005f8 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 80006c4:	202b      	movs	r0, #43	@ 0x2b
 80006c6:	f7ff ff63 	bl	8000590 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 80006ca:	88bb      	ldrh	r3, [r7, #4]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ff90 	bl	80005f8 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 80006d8:	88bb      	ldrh	r3, [r7, #4]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff8b 	bl	80005f8 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 80006e2:	883b      	ldrh	r3, [r7, #0]
 80006e4:	0a1b      	lsrs	r3, r3, #8
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff84 	bl	80005f8 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 80006f0:	883b      	ldrh	r3, [r7, #0]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ff7f 	bl	80005f8 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 80006fa:	202c      	movs	r0, #44	@ 0x2c
 80006fc:	f7ff ff48 	bl	8000590 <ILI9341_SendCommand>
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	bd90      	pop	{r4, r7, pc}

08000708 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	4613      	mov	r3, r2
 8000716:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000718:	2264      	movs	r2, #100	@ 0x64
 800071a:	68f9      	ldr	r1, [r7, #12]
 800071c:	4853      	ldr	r0, [pc, #332]	@ (800086c <ILI9341_Init+0x164>)
 800071e:	f006 fc16 	bl	8006f4e <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 8000722:	4a53      	ldr	r2, [pc, #332]	@ (8000870 <ILI9341_Init+0x168>)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8000728:	4a52      	ldr	r2, [pc, #328]	@ (8000874 <ILI9341_Init+0x16c>)
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 800072e:	4a52      	ldr	r2, [pc, #328]	@ (8000878 <ILI9341_Init+0x170>)
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8000734:	4a51      	ldr	r2, [pc, #324]	@ (800087c <ILI9341_Init+0x174>)
 8000736:	8b3b      	ldrh	r3, [r7, #24]
 8000738:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800073a:	4b4d      	ldr	r3, [pc, #308]	@ (8000870 <ILI9341_Init+0x168>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a4d      	ldr	r2, [pc, #308]	@ (8000874 <ILI9341_Init+0x16c>)
 8000740:	8811      	ldrh	r1, [r2, #0]
 8000742:	2201      	movs	r2, #1
 8000744:	4618      	mov	r0, r3
 8000746:	f003 fad1 	bl	8003cec <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 800074a:	4a4d      	ldr	r2, [pc, #308]	@ (8000880 <ILI9341_Init+0x178>)
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 8000750:	4a4c      	ldr	r2, [pc, #304]	@ (8000884 <ILI9341_Init+0x17c>)
 8000752:	8c3b      	ldrh	r3, [r7, #32]
 8000754:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 8000756:	8c3b      	ldrh	r3, [r7, #32]
 8000758:	2201      	movs	r2, #1
 800075a:	4619      	mov	r1, r3
 800075c:	69f8      	ldr	r0, [r7, #28]
 800075e:	f003 fac5 	bl	8003cec <HAL_GPIO_WritePin>
	 
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff ff14 	bl	8000590 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000768:	2064      	movs	r0, #100	@ 0x64
 800076a:	f002 f8b7 	bl	80028dc <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 800076e:	2028      	movs	r0, #40	@ 0x28
 8000770:	f7ff ff0e 	bl	8000590 <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 8000774:	20c0      	movs	r0, #192	@ 0xc0
 8000776:	f7ff ff0b 	bl	8000590 <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 800077a:	2026      	movs	r0, #38	@ 0x26
 800077c:	f7ff ff3c 	bl	80005f8 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 8000780:	20c1      	movs	r0, #193	@ 0xc1
 8000782:	f7ff ff05 	bl	8000590 <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 8000786:	2011      	movs	r0, #17
 8000788:	f7ff ff36 	bl	80005f8 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 800078c:	20c5      	movs	r0, #197	@ 0xc5
 800078e:	f7ff feff 	bl	8000590 <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 8000792:	2035      	movs	r0, #53	@ 0x35
 8000794:	f7ff ff30 	bl	80005f8 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 8000798:	203e      	movs	r0, #62	@ 0x3e
 800079a:	f7ff ff2d 	bl	80005f8 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 800079e:	20c7      	movs	r0, #199	@ 0xc7
 80007a0:	f7ff fef6 	bl	8000590 <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 80007a4:	20be      	movs	r0, #190	@ 0xbe
 80007a6:	f7ff ff27 	bl	80005f8 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 80007aa:	2036      	movs	r0, #54	@ 0x36
 80007ac:	f7ff fef0 	bl	8000590 <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 80007b0:	2048      	movs	r0, #72	@ 0x48
 80007b2:	f7ff ff21 	bl	80005f8 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 80007b6:	203a      	movs	r0, #58	@ 0x3a
 80007b8:	f7ff feea 	bl	8000590 <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 80007bc:	2055      	movs	r0, #85	@ 0x55
 80007be:	f7ff ff1b 	bl	80005f8 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 80007c2:	20b1      	movs	r0, #177	@ 0xb1
 80007c4:	f7ff fee4 	bl	8000590 <ILI9341_SendCommand>
   ILI9341_SendData(0);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff ff15 	bl	80005f8 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 80007ce:	201f      	movs	r0, #31
 80007d0:	f7ff ff12 	bl	80005f8 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 80007d4:	202a      	movs	r0, #42	@ 0x2a
 80007d6:	f7ff fedb 	bl	8000590 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ff0c 	bl	80005f8 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff ff09 	bl	80005f8 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff ff06 	bl	80005f8 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 80007ec:	20ef      	movs	r0, #239	@ 0xef
 80007ee:	f7ff ff03 	bl	80005f8 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 80007f2:	202b      	movs	r0, #43	@ 0x2b
 80007f4:	f7ff fecc 	bl	8000590 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 80007f8:	2000      	movs	r0, #0
 80007fa:	f7ff fefd 	bl	80005f8 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff fefa 	bl	80005f8 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 8000804:	2001      	movs	r0, #1
 8000806:	f7ff fef7 	bl	80005f8 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 800080a:	203f      	movs	r0, #63	@ 0x3f
 800080c:	f7ff fef4 	bl	80005f8 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 8000810:	2034      	movs	r0, #52	@ 0x34
 8000812:	f7ff febd 	bl	8000590 <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 8000816:	20b7      	movs	r0, #183	@ 0xb7
 8000818:	f7ff feba 	bl	8000590 <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 800081c:	2007      	movs	r0, #7
 800081e:	f7ff feeb 	bl	80005f8 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 8000822:	20b6      	movs	r0, #182	@ 0xb6
 8000824:	f7ff feb4 	bl	8000590 <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 8000828:	200a      	movs	r0, #10
 800082a:	f7ff fee5 	bl	80005f8 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 800082e:	2082      	movs	r0, #130	@ 0x82
 8000830:	f7ff fee2 	bl	80005f8 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 8000834:	2027      	movs	r0, #39	@ 0x27
 8000836:	f7ff fedf 	bl	80005f8 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 800083a:	2000      	movs	r0, #0
 800083c:	f7ff fedc 	bl	80005f8 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 8000840:	2011      	movs	r0, #17
 8000842:	f7ff fea5 	bl	8000590 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000846:	2064      	movs	r0, #100	@ 0x64
 8000848:	f002 f848 	bl	80028dc <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 800084c:	2029      	movs	r0, #41	@ 0x29
 800084e:	f7ff fe9f 	bl	8000590 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000852:	2064      	movs	r0, #100	@ 0x64
 8000854:	f002 f842 	bl	80028dc <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 8000858:	202c      	movs	r0, #44	@ 0x2c
 800085a:	f7ff fe99 	bl	8000590 <ILI9341_SendCommand>
   HAL_Delay(5);
 800085e:	2005      	movs	r0, #5
 8000860:	f002 f83c 	bl	80028dc <HAL_Delay>
 }
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000088 	.word	0x20000088
 8000870:	200000ec 	.word	0x200000ec
 8000874:	200000f0 	.word	0x200000f0
 8000878:	200000f4 	.word	0x200000f4
 800087c:	200000f8 	.word	0x200000f8
 8000880:	200000fc 	.word	0x200000fc
 8000884:	20000100 	.word	0x20000100

08000888 <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
 8000892:	460b      	mov	r3, r1
 8000894:	80bb      	strh	r3, [r7, #4]
 8000896:	4613      	mov	r3, r2
 8000898:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 800089a:	88bb      	ldrh	r3, [r7, #4]
 800089c:	88fa      	ldrh	r2, [r7, #6]
 800089e:	88b9      	ldrh	r1, [r7, #4]
 80008a0:	88f8      	ldrh	r0, [r7, #6]
 80008a2:	f7ff fee5 	bl	8000670 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 80008a6:	887b      	ldrh	r3, [r7, #2]
 80008a8:	0a1b      	lsrs	r3, r3, #8
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fea2 	bl	80005f8 <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 80008b4:	887b      	ldrh	r3, [r7, #2]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fe9d 	bl	80005f8 <ILI9341_SendData>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	f5ad 7d26 	sub.w	sp, sp, #664	@ 0x298
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4602      	mov	r2, r0
 80008d2:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80008d6:	f2a3 2392 	subw	r3, r3, #658	@ 0x292
 80008da:	801a      	strh	r2, [r3, #0]
	uint32_t n = ILI9341_PIXEL_COUNT;
 80008dc:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80008e0:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
	uint32_t h = ILI9341_HEIGHT;
 80008e4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008e8:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
	uint8_t buf[ILI9341_HEIGHT * 2];
	uint16_t myColor = 0xFF;
 80008ec:	23ff      	movs	r3, #255	@ 0xff
 80008ee:	f8a7 328a 	strh.w	r3, [r7, #650]	@ 0x28a
	
	if(rotationNum==1 || rotationNum==3)
 80008f2:	4b3f      	ldr	r3, [pc, #252]	@ (80009f0 <ILI9341_Fill+0x128>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d003      	beq.n	8000902 <ILI9341_Fill+0x3a>
 80008fa:	4b3d      	ldr	r3, [pc, #244]	@ (80009f0 <ILI9341_Fill+0x128>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d107      	bne.n	8000912 <ILI9341_Fill+0x4a>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 8000902:	f240 133f 	movw	r3, #319	@ 0x13f
 8000906:	22ef      	movs	r2, #239	@ 0xef
 8000908:	2100      	movs	r1, #0
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff feb0 	bl	8000670 <ILI9341_SetCursorPosition>
 8000910:	e00e      	b.n	8000930 <ILI9341_Fill+0x68>
	}
	else if(rotationNum==2 || rotationNum==4)
 8000912:	4b37      	ldr	r3, [pc, #220]	@ (80009f0 <ILI9341_Fill+0x128>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b02      	cmp	r3, #2
 8000918:	d003      	beq.n	8000922 <ILI9341_Fill+0x5a>
 800091a:	4b35      	ldr	r3, [pc, #212]	@ (80009f0 <ILI9341_Fill+0x128>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b04      	cmp	r3, #4
 8000920:	d106      	bne.n	8000930 <ILI9341_Fill+0x68>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 8000922:	23ef      	movs	r3, #239	@ 0xef
 8000924:	f240 123f 	movw	r2, #319	@ 0x13f
 8000928:	2100      	movs	r1, #0
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff fea0 	bl	8000670 <ILI9341_SetCursorPosition>
	}
	
	for(int i = 0; i < ILI9341_HEIGHT * 2; i+=2){
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8000936:	e023      	b.n	8000980 <ILI9341_Fill+0xb8>
			buf[i] = color>>8;
 8000938:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800093c:	f2a3 2392 	subw	r3, r3, #658	@ 0x292
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	0a1b      	lsrs	r3, r3, #8
 8000944:	b29b      	uxth	r3, r3
 8000946:	b2d9      	uxtb	r1, r3
 8000948:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800094c:	f5a3 7224 	sub.w	r2, r3, #656	@ 0x290
 8000950:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000954:	4413      	add	r3, r2
 8000956:	460a      	mov	r2, r1
 8000958:	701a      	strb	r2, [r3, #0]
			buf[i+1] = color & 0xff;
 800095a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800095e:	3301      	adds	r3, #1
 8000960:	f507 7226 	add.w	r2, r7, #664	@ 0x298
 8000964:	f2a2 2292 	subw	r2, r2, #658	@ 0x292
 8000968:	8812      	ldrh	r2, [r2, #0]
 800096a:	b2d1      	uxtb	r1, r2
 800096c:	f507 7226 	add.w	r2, r7, #664	@ 0x298
 8000970:	f5a2 7224 	sub.w	r2, r2, #656	@ 0x290
 8000974:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < ILI9341_HEIGHT * 2; i+=2){
 8000976:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800097a:	3302      	adds	r3, #2
 800097c:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8000980:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8000984:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000988:	dbd6      	blt.n	8000938 <ILI9341_Fill+0x70>
		}
	
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 800098a:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <ILI9341_Fill+0x12c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a1a      	ldr	r2, [pc, #104]	@ (80009f8 <ILI9341_Fill+0x130>)
 8000990:	8811      	ldrh	r1, [r2, #0]
 8000992:	2201      	movs	r2, #1
 8000994:	4618      	mov	r0, r3
 8000996:	f003 f9a9 	bl	8003cec <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800099a:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <ILI9341_Fill+0x134>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a18      	ldr	r2, [pc, #96]	@ (8000a00 <ILI9341_Fill+0x138>)
 80009a0:	8811      	ldrh	r1, [r2, #0]
 80009a2:	2200      	movs	r2, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f003 f9a1 	bl	8003cec <HAL_GPIO_WritePin>
	//Write byte using SPI

	while (n) {
 80009aa:	e00f      	b.n	80009cc <ILI9341_Fill+0x104>
			n -= h;
 80009ac:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 80009b0:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
//       ILI9341_SendData(color>>8);
//				ILI9341_SendData(color&0xff);


		HAL_SPI_Transmit(&lcdSPIhandle, buf, ILI9341_HEIGHT * 2, 1000);
 80009ba:	f107 0108 	add.w	r1, r7, #8
 80009be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80009c6:	480f      	ldr	r0, [pc, #60]	@ (8000a04 <ILI9341_Fill+0x13c>)
 80009c8:	f004 fd45 	bl	8005456 <HAL_SPI_Transmit>
	while (n) {
 80009cc:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1eb      	bne.n	80009ac <ILI9341_Fill+0xe4>
		//Wait for end of DMA transfer

	}

		//Bring CS HIGH
		HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <ILI9341_Fill+0x134>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a09      	ldr	r2, [pc, #36]	@ (8000a00 <ILI9341_Fill+0x138>)
 80009da:	8811      	ldrh	r1, [r2, #0]
 80009dc:	2201      	movs	r2, #1
 80009de:	4618      	mov	r0, r3
 80009e0:	f003 f984 	bl	8003cec <HAL_GPIO_WritePin>


}
 80009e4:	bf00      	nop
 80009e6:	f507 7726 	add.w	r7, r7, #664	@ 0x298
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000000 	.word	0x20000000
 80009f4:	200000f4 	.word	0x200000f4
 80009f8:	200000f8 	.word	0x200000f8
 80009fc:	200000ec 	.word	0x200000ec
 8000a00:	200000f0 	.word	0x200000f0
 8000a04:	20000088 	.word	0x20000088

08000a08 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) { 
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
 8000a14:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	6839      	ldr	r1, [r7, #0]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	1a8a      	subs	r2, r1, r2
 8000a24:	3201      	adds	r2, #1
 8000a26:	fb02 f303 	mul.w	r3, r2, r3
 8000a2a:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000a32:	d902      	bls.n	8000a3a <ILI9341_Fill_Rect+0x32>
 8000a34:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8000a38:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	b298      	uxth	r0, r3
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	b299      	uxth	r1, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	f7ff fe11 	bl	8000670 <ILI9341_SetCursorPosition>
	while (n) {
 8000a4e:	e00e      	b.n	8000a6e <ILI9341_Fill_Rect+0x66>
			n--;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 8000a56:	8c3b      	ldrh	r3, [r7, #32]
 8000a58:	0a1b      	lsrs	r3, r3, #8
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fdca 	bl	80005f8 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8000a64:	8c3b      	ldrh	r3, [r7, #32]
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fdc5 	bl	80005f8 <ILI9341_SendData>
	while (n) {
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1ed      	bne.n	8000a50 <ILI9341_Fill_Rect+0x48>
	}
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <ILI9341_drawLine>:
  fillCircleHelper(x0, y0, r, 3, 0, color);
}

//9. Line drawing functions
void ILI9341_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000a7e:	b590      	push	{r4, r7, lr}
 8000a80:	b089      	sub	sp, #36	@ 0x24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4604      	mov	r4, r0
 8000a86:	4608      	mov	r0, r1
 8000a88:	4611      	mov	r1, r2
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4623      	mov	r3, r4
 8000a8e:	80fb      	strh	r3, [r7, #6]
 8000a90:	4603      	mov	r3, r0
 8000a92:	80bb      	strh	r3, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	807b      	strh	r3, [r7, #2]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000a9c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000aa0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000aaa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000aae:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab6:	1acb      	subs	r3, r1, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	bfb8      	it	lt
 8000abc:	425b      	neglt	r3, r3
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	bfcc      	ite	gt
 8000ac2:	2301      	movgt	r3, #1
 8000ac4:	2300      	movle	r3, #0
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	837b      	strh	r3, [r7, #26]
  if (steep) {
 8000aca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d00b      	beq.n	8000aea <ILI9341_drawLine+0x6c>
    swap(x0, y0);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	833b      	strh	r3, [r7, #24]
 8000ad6:	88bb      	ldrh	r3, [r7, #4]
 8000ad8:	80fb      	strh	r3, [r7, #6]
 8000ada:	8b3b      	ldrh	r3, [r7, #24]
 8000adc:	80bb      	strh	r3, [r7, #4]
    swap(x1, y1);
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	82fb      	strh	r3, [r7, #22]
 8000ae2:	883b      	ldrh	r3, [r7, #0]
 8000ae4:	807b      	strh	r3, [r7, #2]
 8000ae6:	8afb      	ldrh	r3, [r7, #22]
 8000ae8:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 8000aea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000aee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	dd0b      	ble.n	8000b0e <ILI9341_drawLine+0x90>
    swap(x0, x1);
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	82bb      	strh	r3, [r7, #20]
 8000afa:	887b      	ldrh	r3, [r7, #2]
 8000afc:	80fb      	strh	r3, [r7, #6]
 8000afe:	8abb      	ldrh	r3, [r7, #20]
 8000b00:	807b      	strh	r3, [r7, #2]
    swap(y0, y1);
 8000b02:	88bb      	ldrh	r3, [r7, #4]
 8000b04:	827b      	strh	r3, [r7, #18]
 8000b06:	883b      	ldrh	r3, [r7, #0]
 8000b08:	80bb      	strh	r3, [r7, #4]
 8000b0a:	8a7b      	ldrh	r3, [r7, #18]
 8000b0c:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8000b0e:	887a      	ldrh	r2, [r7, #2]
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8000b18:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	bfb8      	it	lt
 8000b26:	425b      	neglt	r3, r3
 8000b28:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8000b2a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b2e:	0fda      	lsrs	r2, r3, #31
 8000b30:	4413      	add	r3, r2
 8000b32:	105b      	asrs	r3, r3, #1
 8000b34:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 8000b36:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b3a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	da02      	bge.n	8000b48 <ILI9341_drawLine+0xca>
    ystep = 1;
 8000b42:	2301      	movs	r3, #1
 8000b44:	83bb      	strh	r3, [r7, #28]
 8000b46:	e02d      	b.n	8000ba4 <ILI9341_drawLine+0x126>
  } else {
    ystep = -1;
 8000b48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b4c:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++) {
 8000b4e:	e029      	b.n	8000ba4 <ILI9341_drawLine+0x126>
    if (steep) {
 8000b50:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d006      	beq.n	8000b66 <ILI9341_drawLine+0xe8>
      ILI9341_DrawPixel(y0, x0, color);
 8000b58:	88bb      	ldrh	r3, [r7, #4]
 8000b5a:	88f9      	ldrh	r1, [r7, #6]
 8000b5c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fe92 	bl	8000888 <ILI9341_DrawPixel>
 8000b64:	e005      	b.n	8000b72 <ILI9341_drawLine+0xf4>
    } else {
      ILI9341_DrawPixel(x0, y0, color);
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	88b9      	ldrh	r1, [r7, #4]
 8000b6a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fe8b 	bl	8000888 <ILI9341_DrawPixel>
    }
    err -= dy;
 8000b72:	8bfa      	ldrh	r2, [r7, #30]
 8000b74:	89fb      	ldrh	r3, [r7, #14]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 8000b7c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	da09      	bge.n	8000b98 <ILI9341_drawLine+0x11a>
      y0 += ystep;
 8000b84:	88ba      	ldrh	r2, [r7, #4]
 8000b86:	8bbb      	ldrh	r3, [r7, #28]
 8000b88:	4413      	add	r3, r2
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8000b8e:	8bfa      	ldrh	r2, [r7, #30]
 8000b90:	8a3b      	ldrh	r3, [r7, #16]
 8000b92:	4413      	add	r3, r2
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++) {
 8000b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	80fb      	strh	r3, [r7, #6]
 8000ba4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ba8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	ddcf      	ble.n	8000b50 <ILI9341_drawLine+0xd2>
    }
  }
}	
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3724      	adds	r7, #36	@ 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd90      	pop	{r4, r7, pc}
	...

08000bbc <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d832      	bhi.n	8000c34 <ILI9341_setRotation+0x78>
 8000bce:	a201      	add	r2, pc, #4	@ (adr r2, 8000bd4 <ILI9341_setRotation+0x18>)
 8000bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd4:	08000be5 	.word	0x08000be5
 8000bd8:	08000bf9 	.word	0x08000bf9
 8000bdc:	08000c0d 	.word	0x08000c0d
 8000be0:	08000c21 	.word	0x08000c21
	{
		case 1:
			rotationNum = 1;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <ILI9341_setRotation+0x94>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000bea:	2036      	movs	r0, #54	@ 0x36
 8000bec:	f7ff fcd0 	bl	8000590 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000bf0:	2088      	movs	r0, #136	@ 0x88
 8000bf2:	f7ff fd01 	bl	80005f8 <ILI9341_SendData>
			break;
 8000bf6:	e027      	b.n	8000c48 <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <ILI9341_setRotation+0x94>)
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000bfe:	2036      	movs	r0, #54	@ 0x36
 8000c00:	f7ff fcc6 	bl	8000590 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000c04:	2028      	movs	r0, #40	@ 0x28
 8000c06:	f7ff fcf7 	bl	80005f8 <ILI9341_SendData>
			break;
 8000c0a:	e01d      	b.n	8000c48 <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <ILI9341_setRotation+0x94>)
 8000c0e:	2203      	movs	r2, #3
 8000c10:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c12:	2036      	movs	r0, #54	@ 0x36
 8000c14:	f7ff fcbc 	bl	8000590 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8000c18:	2048      	movs	r0, #72	@ 0x48
 8000c1a:	f7ff fced 	bl	80005f8 <ILI9341_SendData>
			break;
 8000c1e:	e013      	b.n	8000c48 <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8000c20:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <ILI9341_setRotation+0x94>)
 8000c22:	2204      	movs	r2, #4
 8000c24:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c26:	2036      	movs	r0, #54	@ 0x36
 8000c28:	f7ff fcb2 	bl	8000590 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000c2c:	20e8      	movs	r0, #232	@ 0xe8
 8000c2e:	f7ff fce3 	bl	80005f8 <ILI9341_SendData>
			break;
 8000c32:	e009      	b.n	8000c48 <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <ILI9341_setRotation+0x94>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000c3a:	2036      	movs	r0, #54	@ 0x36
 8000c3c:	f7ff fca8 	bl	8000590 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000c40:	2088      	movs	r0, #136	@ 0x88
 8000c42:	f7ff fcd9 	bl	80005f8 <ILI9341_SendData>
			break;
 8000c46:	bf00      	nop
	}
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000000 	.word	0x20000000

08000c54 <_ZN5S25FLC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
 * @brief constructor for flash class, assuming software CS control
 * @param spiFlashHandle the HAL flash definition for the SPI interface
 * @param csPORT the GPIO port on which the CS pin is connected
 * @param csPIN the pin number of the CS port
 */
S25FL::S25FL(SPI_HandleTypeDef *spiFlashHandle, GPIO_TypeDef *csPORT, uint16_t csPIN) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	807b      	strh	r3, [r7, #2]
 8000c62:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca0 <_ZN5S25FLC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft+0x4c>)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	711a      	strb	r2, [r3, #4]
	// TODO Auto-generated constructor stub
	_SPIhandle = spiFlashHandle;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	68ba      	ldr	r2, [r7, #8]
 8000c72:	611a      	str	r2, [r3, #16]
	_csPORT = csPORT;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	609a      	str	r2, [r3, #8]
	_csPIN  = csPIN;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	887a      	ldrh	r2, [r7, #2]
 8000c7e:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(_csPORT, _csPIN, GPIO_PIN_SET);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	6898      	ldr	r0, [r3, #8]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	899b      	ldrh	r3, [r3, #12]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f003 f82e 	bl	8003cec <HAL_GPIO_WritePin>
	HWNSS = false;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2200      	movs	r2, #0
 8000c94:	711a      	strb	r2, [r3, #4]
}
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	08007cdc 	.word	0x08007cdc

08000ca4 <_ZN5S25FLC1Ev>:

S25FL::S25FL(){
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	4a06      	ldr	r2, [pc, #24]	@ (8000cc8 <_ZN5S25FLC1Ev+0x24>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	711a      	strb	r2, [r3, #4]

}
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	08007cdc 	.word	0x08007cdc

08000ccc <_ZN5S25FLD1Ev>:

S25FL::~S25FL() {
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <_ZN5S25FLD1Ev+0x1c>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	08007cdc 	.word	0x08007cdc

08000cec <_ZN5S25FLD0Ev>:
S25FL::~S25FL() {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
}
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ffe9 	bl	8000ccc <_ZN5S25FLD1Ev>
 8000cfa:	2118      	movs	r1, #24
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f005 fe8f 	bl	8006a20 <_ZdlPvj>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <_ZN5S25FL5beginEv>:

/**
 * @brief initialises the flash chip and confirms its ID
 * @return fail or success of initialisation
 */
int S25FL::begin() {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	this->reset();
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 f833 	bl	8000d80 <_ZN5S25FL5resetEv>
	HAL_Delay(1);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f001 fdde 	bl	80028dc <HAL_Delay>
	uint8_t txBuf[6] = {FL_READ_ID,0,0,0,0,0};
 8000d20:	4a16      	ldr	r2, [pc, #88]	@ (8000d7c <_ZN5S25FL5beginEv+0x70>)
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d2a:	6018      	str	r0, [r3, #0]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	8019      	strh	r1, [r3, #0]
	uint8_t rxBuf[6];
	this->transfer(txBuf, rxBuf, sizeof(txBuf));
 8000d30:	f107 0208 	add.w	r2, r7, #8
 8000d34:	f107 0110 	add.w	r1, r7, #16
 8000d38:	2306      	movs	r3, #6
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 f82c 	bl	8000d98 <_ZN5S25FL8transferEPhS0_m>
	if(rxBuf[4] == 0x01 && rxBuf[5] == 0x17){             //Manufacturer ID confirmed (128Mbit)
 8000d40:	7b3b      	ldrb	r3, [r7, #12]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d107      	bne.n	8000d56 <_ZN5S25FL5beginEv+0x4a>
 8000d46:	7b7b      	ldrb	r3, [r7, #13]
 8000d48:	2b17      	cmp	r3, #23
 8000d4a:	d104      	bne.n	8000d56 <_ZN5S25FL5beginEv+0x4a>
	_maxAddress = 0x00FFFFFF;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8000d52:	615a      	str	r2, [r3, #20]
 8000d54:	e00c      	b.n	8000d70 <_ZN5S25FL5beginEv+0x64>
	}else if(rxBuf[4] == 0x01 && rxBuf[5] == 0x18){       //Manufacturer ID confirmed (256Mbit)
 8000d56:	7b3b      	ldrb	r3, [r7, #12]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d107      	bne.n	8000d6c <_ZN5S25FL5beginEv+0x60>
 8000d5c:	7b7b      	ldrb	r3, [r7, #13]
 8000d5e:	2b18      	cmp	r3, #24
 8000d60:	d104      	bne.n	8000d6c <_ZN5S25FL5beginEv+0x60>
	_maxAddress = 0x01FFFFFF;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	e001      	b.n	8000d70 <_ZN5S25FL5beginEv+0x64>
	}else{
	  return 1;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e000      	b.n	8000d72 <_ZN5S25FL5beginEv+0x66>
	}
	return 0;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	08007c90 	.word	0x08007c90

08000d80 <_ZN5S25FL5resetEv>:

/**
 * @brief sends a reset command to the flash chip
 */
void S25FL::reset() {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	this->transfer(FS_RESET);
 8000d88:	21ff      	movs	r1, #255	@ 0xff
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f832 	bl	8000df4 <_ZN5S25FL8transferEh>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_ZN5S25FL8transferEPhS0_m>:
 * @note Both buffers must be of the same size
 * @param txBuf transmit buffer
 * @param rxBuf receiver buffer
 * @param len   number of bytes to transfer
 */
void S25FL::transfer(uint8_t *txBuf, uint8_t *rxBuf, uint32_t len) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]
	if(!HWNSS) HAL_GPIO_WritePin(_csPORT, _csPIN, GPIO_PIN_RESET);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	791b      	ldrb	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d107      	bne.n	8000dbe <_ZN5S25FL8transferEPhS0_m+0x26>
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	6898      	ldr	r0, [r3, #8]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	899b      	ldrh	r3, [r3, #12]
 8000db6:	2200      	movs	r2, #0
 8000db8:	4619      	mov	r1, r3
 8000dba:	f002 ff97 	bl	8003cec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(_SPIhandle, txBuf, rxBuf, len, HAL_MAX_DELAY);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6918      	ldr	r0, [r3, #16]
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dca:	9200      	str	r2, [sp, #0]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	68b9      	ldr	r1, [r7, #8]
 8000dd0:	f004 fcaf 	bl	8005732 <HAL_SPI_TransmitReceive>
	if(!HWNSS) HAL_GPIO_WritePin(_csPORT, _csPIN, GPIO_PIN_SET);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	791b      	ldrb	r3, [r3, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d107      	bne.n	8000dec <_ZN5S25FL8transferEPhS0_m+0x54>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	6898      	ldr	r0, [r3, #8]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	899b      	ldrh	r3, [r3, #12]
 8000de4:	2201      	movs	r2, #1
 8000de6:	4619      	mov	r1, r3
 8000de8:	f002 ff80 	bl	8003cec <HAL_GPIO_WritePin>
}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <_ZN5S25FL8transferEh>:
/**
 * @brief transfers/receives a single byte. Useful for simple commands
 * @param buf the byte to send
 * @return the single byte received
 */
uint8_t S25FL::transfer(uint8_t buf) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
	if(!HWNSS) HAL_GPIO_WritePin(_csPORT, _csPIN, GPIO_PIN_RESET);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	791b      	ldrb	r3, [r3, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d107      	bne.n	8000e18 <_ZN5S25FL8transferEh+0x24>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6898      	ldr	r0, [r3, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	899b      	ldrh	r3, [r3, #12]
 8000e10:	2200      	movs	r2, #0
 8000e12:	4619      	mov	r1, r3
 8000e14:	f002 ff6a 	bl	8003cec <HAL_GPIO_WritePin>
	uint8_t rx;
	HAL_SPI_TransmitReceive(_SPIhandle, &buf, &rx, 1, HAL_MAX_DELAY);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6918      	ldr	r0, [r3, #16]
 8000e1c:	f107 020f 	add.w	r2, r7, #15
 8000e20:	1cf9      	adds	r1, r7, #3
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2301      	movs	r3, #1
 8000e2a:	f004 fc82 	bl	8005732 <HAL_SPI_TransmitReceive>
	if(!HWNSS) HAL_GPIO_WritePin(_csPORT, _csPIN, GPIO_PIN_SET);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	791b      	ldrb	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d107      	bne.n	8000e46 <_ZN5S25FL8transferEh+0x52>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6898      	ldr	r0, [r3, #8]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	899b      	ldrh	r3, [r3, #12]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4619      	mov	r1, r3
 8000e42:	f002 ff53 	bl	8003cec <HAL_GPIO_WritePin>
	return rx;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_ZN10UGR_ScreenC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>:
 */

#include "UGRScreen.h"


UGR_Screen::UGR_Screen(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT,
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af04      	add	r7, sp, #16
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	807b      	strh	r3, [r7, #2]
		uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN,
		GPIO_TypeDef *resetPORT, uint16_t resetPIN) {
 8000e5e:	4a19      	ldr	r2, [pc, #100]	@ (8000ec4 <_ZN10UGR_ScreenC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t+0x74>)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	601a      	str	r2, [r3, #0]

//	memcpy(&this->spiHandle, spiLcdHandle, sizeof(*spiLcdHandle));
	this->spiHandle = spiLcdHandle;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
	this->csPORT 	= csPORT;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
	this->csPIN		= csPIN;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	887a      	ldrh	r2, [r7, #2]
 8000e78:	f8a3 2810 	strh.w	r2, [r3, #2064]	@ 0x810
	this->dcPORT	= dcPORT;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
	this->dcPIN		= dcPIN;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	8bba      	ldrh	r2, [r7, #28]
 8000e88:	f8a3 2818 	strh.w	r2, [r3, #2072]	@ 0x818
	this->resetPORT	= resetPORT;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6a3a      	ldr	r2, [r7, #32]
 8000e90:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
	this->resetPIN	= resetPIN;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000e98:	f8a3 2820 	strh.w	r2, [r3, #2080]	@ 0x820

	ILI9341_Init(spiLcdHandle, csPORT, csPIN, dcPORT, dcPIN, resetPORT, resetPIN);
 8000e9c:	887a      	ldrh	r2, [r7, #2]
 8000e9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ea0:	9302      	str	r3, [sp, #8]
 8000ea2:	6a3b      	ldr	r3, [r7, #32]
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	8bbb      	ldrh	r3, [r7, #28]
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	68b8      	ldr	r0, [r7, #8]
 8000eb0:	f7ff fc2a 	bl	8000708 <ILI9341_Init>
	ILI9341_setRotation(4);
 8000eb4:	2004      	movs	r0, #4
 8000eb6:	f7ff fe81 	bl	8000bbc <ILI9341_setRotation>
}
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	08007cec 	.word	0x08007cec

08000ec8 <_ZN10UGR_ScreenD1Ev>:

UGR_Screen::~UGR_Screen() {
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <_ZN10UGR_ScreenD1Ev+0x1c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	08007cec 	.word	0x08007cec

08000ee8 <_ZN10UGR_ScreenD0Ev>:
UGR_Screen::~UGR_Screen() {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
}
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ffe9 	bl	8000ec8 <_ZN10UGR_ScreenD1Ev>
 8000ef6:	f640 0124 	movw	r1, #2084	@ 0x824
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f005 fd90 	bl	8006a20 <_ZdlPvj>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_ZN10UGR_Screen11setDataModeEv>:

const GPIO_TypeDef* UGR_Screen::getDcPort() const {
	return dcPORT;
}

void UGR_Screen::setDataMode() {
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->dcPORT, this->dcPIN, GPIO_PIN_SET);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f8d3 0814 	ldr.w	r0, [r3, #2068]	@ 0x814
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f8b3 3818 	ldrh.w	r3, [r3, #2072]	@ 0x818
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4619      	mov	r1, r3
 8000f22:	f002 fee3 	bl	8003cec <HAL_GPIO_WritePin>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <_ZN15UGR_ScreenFieldC1EiiPc7GFXfontP10UGR_Screen>:
 */

#include "UGRScreenField.h"
#define BACKING_COLOUR COLOR_BLACK

UGR_ScreenField::UGR_ScreenField(int startx, int starty, char *str, GFXfont font, UGR_Screen *screen) {
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	4a18      	ldr	r2, [pc, #96]	@ (8000fa0 <_ZN15UGR_ScreenFieldC1EiiPc7GFXfontP10UGR_Screen+0x70>)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	601a      	str	r2, [r3, #0]
	this->startx = startx;
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	829a      	strh	r2, [r3, #20]
	this->starty = starty;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	82da      	strh	r2, [r3, #22]
	this->font	= font;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	1d1c      	adds	r4, r3, #4
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	this->screen = screen;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f66:	625a      	str	r2, [r3, #36]	@ 0x24
	this->colour = COLOR_CYAN;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000f6e:	831a      	strh	r2, [r3, #24]
	this->currentString = (char*)malloc(33); //TODO allow different sizes
 8000f70:	2021      	movs	r0, #33	@ 0x21
 8000f72:	f005 fd59 	bl	8006a28 <malloc>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	621a      	str	r2, [r3, #32]
	memset(currentString, '\0', 33);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	2221      	movs	r2, #33	@ 0x21
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f005 ff43 	bl	8006e12 <memset>
	this->update(str);
 8000f8c:	6839      	ldr	r1, [r7, #0]
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	f000 f82c 	bl	8000fec <_ZN15UGR_ScreenField6updateEPc>
}
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4618      	mov	r0, r3
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd90      	pop	{r4, r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	08007cfc 	.word	0x08007cfc

08000fa4 <_ZN15UGR_ScreenFieldD1Ev>:

UGR_ScreenField::~UGR_ScreenField() {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	4a06      	ldr	r2, [pc, #24]	@ (8000fc8 <_ZN15UGR_ScreenFieldD1Ev+0x24>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	601a      	str	r2, [r3, #0]
	free(this->currentString);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a1b      	ldr	r3, [r3, #32]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f005 fd3e 	bl	8006a38 <free>
}
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	08007cfc 	.word	0x08007cfc

08000fcc <_ZN15UGR_ScreenFieldD0Ev>:
UGR_ScreenField::~UGR_ScreenField() {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
}
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ffe5 	bl	8000fa4 <_ZN15UGR_ScreenFieldD1Ev>
 8000fda:	2128      	movs	r1, #40	@ 0x28
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f005 fd1f 	bl	8006a20 <_ZdlPvj>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_ZN15UGR_ScreenField6updateEPc>:

void UGR_ScreenField::update(char *str) {
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b093      	sub	sp, #76	@ 0x4c
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	//Write new string
	uint16_t localStartX = this->startx;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	8a9b      	ldrh	r3, [r3, #20]
 8000ffa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	uint16_t localStartY = this->starty;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	8adb      	ldrh	r3, [r3, #22]
 8001000:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	int i;
	int offset;
	GFXglyph * cInfo;

	for (i = 0; i < strlen(str); i++) {
 8001002:	2300      	movs	r3, #0
 8001004:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001006:	e237      	b.n	8001478 <_ZN15UGR_ScreenField6updateEPc+0x48c>

			//get font bitmap pointer
			offset = str[i] - font.first;
 8001008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	899b      	ldrh	r3, [r3, #12]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
			cInfo = &(font.glyph[offset]);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4413      	add	r3, r2
 8001024:	623b      	str	r3, [r7, #32]
			uint8_t *fontChar = &(font.bitmap[cInfo->bitmapOffset]);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	6a3a      	ldr	r2, [r7, #32]
 800102c:	8812      	ldrh	r2, [r2, #0]
 800102e:	4413      	add	r3, r2
 8001030:	61fb      	str	r3, [r7, #28]
			uint16_t fontColour = colour;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	8b1b      	ldrh	r3, [r3, #24]
 8001036:	837b      	strh	r3, [r7, #26]

			//calculate width to nearest byte
			int width = cInfo->width/ 8;
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	789b      	ldrb	r3, [r3, #2]
 800103c:	08db      	lsrs	r3, r3, #3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	637b      	str	r3, [r7, #52]	@ 0x34
			if (cInfo->width - width * 8 > 0) {
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	789b      	ldrb	r3, [r3, #2]
 8001046:	461a      	mov	r2, r3
 8001048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	dd02      	ble.n	8001058 <_ZN15UGR_ScreenField6updateEPc+0x6c>
				width += 1;
 8001052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001054:	3301      	adds	r3, #1
 8001056:	637b      	str	r3, [r7, #52]	@ 0x34
			}
			width = width * 8;
 8001058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	637b      	str	r3, [r7, #52]	@ 0x34


		    uint16_t bo = (cInfo->bitmapOffset);
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	867b      	strh	r3, [r7, #50]	@ 0x32
		    uint8_t w = (cInfo->width), h = (cInfo->height), ad = cInfo->xAdvance;
 8001064:	6a3b      	ldr	r3, [r7, #32]
 8001066:	789b      	ldrb	r3, [r3, #2]
 8001068:	767b      	strb	r3, [r7, #25]
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	78db      	ldrb	r3, [r3, #3]
 800106e:	763b      	strb	r3, [r7, #24]
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	791b      	ldrb	r3, [r3, #4]
 8001074:	75fb      	strb	r3, [r7, #23]
		    int8_t xo = (cInfo->xOffset),
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	795b      	ldrb	r3, [r3, #5]
 800107a:	75bb      	strb	r3, [r7, #22]
		           yo = (cInfo->yOffset);
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	799b      	ldrb	r3, [r3, #6]
 8001080:	757b      	strb	r3, [r7, #21]
		    uint8_t xx, yy, bits = 0, bit = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001088:	2300      	movs	r3, #0
 800108a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		    int16_t xo16 = 0, yo16 = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	827b      	strh	r3, [r7, #18]
 8001092:	2300      	movs	r3, #0
 8001094:	823b      	strh	r3, [r7, #16]

			xo16 = xo;
 8001096:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800109a:	827b      	strh	r3, [r7, #18]
			yo16 = yo;
 800109c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010a0:	823b      	strh	r3, [r7, #16]

			//init DMA buffer
			screen->ILI9341StreamBufIndex = 0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
			while(HAL_SPI_GetState(this->screen->spiHandle) != HAL_SPI_STATE_READY){
 80010aa:	bf00      	nop
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80010b4:	4618      	mov	r0, r3
 80010b6:	f004 fe57 	bl	8005d68 <HAL_SPI_GetState>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b01      	cmp	r3, #1
 80010be:	bf14      	ite	ne
 80010c0:	2301      	movne	r3, #1
 80010c2:	2300      	moveq	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f0      	bne.n	80010ac <_ZN15UGR_ScreenField6updateEPc+0xc0>
				//TODO find better way or checking, also timeout code?
			}
			ILI9341_SetCursorPosition(localStartX, localStartY, localStartX + w -1, localStartY + h - 1);
 80010ca:	7e7b      	ldrb	r3, [r7, #25]
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80010d0:	4413      	add	r3, r2
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	3b01      	subs	r3, #1
 80010d6:	b29c      	uxth	r4, r3
 80010d8:	7e3b      	ldrb	r3, [r7, #24]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80010de:	4413      	add	r3, r2
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3b01      	subs	r3, #1
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 80010e8:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 80010ea:	4622      	mov	r2, r4
 80010ec:	f7ff fac0 	bl	8000670 <ILI9341_SetCursorPosition>
			this->screen->setDataMode();
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff08 	bl	8000f0a <_ZN10UGR_Screen11setDataModeEv>


		    for (yy = 0; yy < h; yy++) {
 80010fa:	2300      	movs	r3, #0
 80010fc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8001100:	e0ab      	b.n	800125a <_ZN15UGR_ScreenField6updateEPc+0x26e>
		      for (xx = 0; xx < w; xx++) {
 8001102:	2300      	movs	r3, #0
 8001104:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001108:	e09c      	b.n	8001244 <_ZN15UGR_ScreenField6updateEPc+0x258>
		        if (!(bit++ & 7)) {
 800110a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	2b00      	cmp	r3, #0
 800111a:	bf0c      	ite	eq
 800111c:	2301      	moveq	r3, #1
 800111e:	2300      	movne	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d008      	beq.n	8001138 <_ZN15UGR_ScreenField6updateEPc+0x14c>
		          bits = (font.bitmap[bo++]);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800112c:	1c59      	adds	r1, r3, #1
 800112e:	8679      	strh	r1, [r7, #50]	@ 0x32
 8001130:	4413      	add	r3, r2
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		        }
		        if (bits & 0x80) {
 8001138:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800113c:	2b00      	cmp	r3, #0
 800113e:	da18      	bge.n	8001172 <_ZN15UGR_ScreenField6updateEPc+0x186>
		        	screen->ILI9341StreamBuf[screen->ILI9341StreamBufIndex++] = fontColour>>8;
 8001140:	8b7b      	ldrh	r3, [r7, #26]
 8001142:	0a1b      	lsrs	r3, r3, #8
 8001144:	b29c      	uxth	r4, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800114e:	6853      	ldr	r3, [r2, #4]
 8001150:	1c58      	adds	r0, r3, #1
 8001152:	6050      	str	r0, [r2, #4]
 8001154:	b2e2      	uxtb	r2, r4
 8001156:	440b      	add	r3, r1
 8001158:	721a      	strb	r2, [r3, #8]
		        	screen->ILI9341StreamBuf[screen->ILI9341StreamBufIndex++] = fontColour;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001162:	6853      	ldr	r3, [r2, #4]
 8001164:	1c58      	adds	r0, r3, #1
 8001166:	6050      	str	r0, [r2, #4]
 8001168:	8b7a      	ldrh	r2, [r7, #26]
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	721a      	strb	r2, [r3, #8]
 8001170:	e013      	b.n	800119a <_ZN15UGR_ScreenField6updateEPc+0x1ae>
		        } else {
		        	screen->ILI9341StreamBuf[screen->ILI9341StreamBufIndex++] = BACKING_COLOUR>>8;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800117a:	6853      	ldr	r3, [r2, #4]
 800117c:	1c58      	adds	r0, r3, #1
 800117e:	6050      	str	r0, [r2, #4]
 8001180:	440b      	add	r3, r1
 8001182:	2200      	movs	r2, #0
 8001184:	721a      	strb	r2, [r3, #8]
		        	screen->ILI9341StreamBuf[screen->ILI9341StreamBufIndex++] = BACKING_COLOUR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800118e:	6853      	ldr	r3, [r2, #4]
 8001190:	1c58      	adds	r0, r3, #1
 8001192:	6050      	str	r0, [r2, #4]
 8001194:	440b      	add	r3, r1
 8001196:	2200      	movs	r2, #0
 8001198:	721a      	strb	r2, [r3, #8]
		        }


		        bits <<= 1;
 800119a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


		        //check buffer fullness
		        if(screen->ILI9341StreamBufIndex == ILI_STREAMBUF_SIZE/2){
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ae:	d11c      	bne.n	80011ea <_ZN15UGR_ScreenField6updateEPc+0x1fe>
		        	//check if DMA in progress, if so, wait for completion
		        	while(HAL_SPI_GetState(this->screen->spiHandle) != HAL_SPI_STATE_READY){
 80011b0:	bf00      	nop
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80011ba:	4618      	mov	r0, r3
 80011bc:	f004 fdd4 	bl	8005d68 <HAL_SPI_GetState>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	bf14      	ite	ne
 80011c6:	2301      	movne	r3, #1
 80011c8:	2300      	moveq	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1f0      	bne.n	80011b2 <_ZN15UGR_ScreenField6updateEPc+0x1c6>
		        		//TODO find better way or checking, also timeout code?
		        	}
		        	//Otherwise, start DMA transfer
		        	HAL_SPI_Transmit_DMA(this->screen->spiHandle, screen->ILI9341StreamBuf, ILI_STREAMBUF_SIZE/2);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d4:	f8d3 0808 	ldr.w	r0, [r3, #2056]	@ 0x808
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011dc:	3308      	adds	r3, #8
 80011de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e2:	4619      	mov	r1, r3
 80011e4:	f004 fcb8 	bl	8005b58 <HAL_SPI_Transmit_DMA>
 80011e8:	e027      	b.n	800123a <_ZN15UGR_ScreenField6updateEPc+0x24e>
		        } else if(screen->ILI9341StreamBufIndex == ILI_STREAMBUF_SIZE){
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011f4:	d121      	bne.n	800123a <_ZN15UGR_ScreenField6updateEPc+0x24e>
		        	//check if DMA in progress, if so, wait for completion
		        	while(HAL_SPI_GetState(this->screen->spiHandle) != HAL_SPI_STATE_READY){
 80011f6:	bf00      	nop
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8001200:	4618      	mov	r0, r3
 8001202:	f004 fdb1 	bl	8005d68 <HAL_SPI_GetState>
 8001206:	4603      	mov	r3, r0
 8001208:	2b01      	cmp	r3, #1
 800120a:	bf14      	ite	ne
 800120c:	2301      	movne	r3, #1
 800120e:	2300      	moveq	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <_ZN15UGR_ScreenField6updateEPc+0x20c>
		        		//TODO find better way or checking, also timeout code?
		        	}
		        	//Otherwise, start DMA transfer
		        	HAL_SPI_Transmit_DMA(this->screen->spiHandle, screen->ILI9341StreamBuf + ILI_STREAMBUF_SIZE/2, ILI_STREAMBUF_SIZE/2);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121a:	f8d3 0808 	ldr.w	r0, [r3, #2056]	@ 0x808
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001222:	3308      	adds	r3, #8
 8001224:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001228:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800122c:	4619      	mov	r1, r3
 800122e:	f004 fc93 	bl	8005b58 <HAL_SPI_Transmit_DMA>
		        	screen->ILI9341StreamBufIndex = 0;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
		      for (xx = 0; xx < w; xx++) {
 800123a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800123e:	3301      	adds	r3, #1
 8001240:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001244:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8001248:	7e7b      	ldrb	r3, [r7, #25]
 800124a:	429a      	cmp	r2, r3
 800124c:	f4ff af5d 	bcc.w	800110a <_ZN15UGR_ScreenField6updateEPc+0x11e>
		    for (yy = 0; yy < h; yy++) {
 8001250:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001254:	3301      	adds	r3, #1
 8001256:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800125a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800125e:	7e3b      	ldrb	r3, [r7, #24]
 8001260:	429a      	cmp	r2, r3
 8001262:	f4ff af4e 	bcc.w	8001102 <_ZN15UGR_ScreenField6updateEPc+0x116>
		        }
		      }
		    }

			//Check if anything is left in the buffer after pixel generation
			if(screen->ILI9341StreamBufIndex > 0){
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d038      	beq.n	80012e2 <_ZN15UGR_ScreenField6updateEPc+0x2f6>
				//check if DMA in progress, if so, wait for completion
				while(HAL_SPI_GetState(this->screen->spiHandle) != HAL_SPI_STATE_READY){
 8001270:	bf00      	nop
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001276:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800127a:	4618      	mov	r0, r3
 800127c:	f004 fd74 	bl	8005d68 <HAL_SPI_GetState>
 8001280:	4603      	mov	r3, r0
 8001282:	2b01      	cmp	r3, #1
 8001284:	bf14      	ite	ne
 8001286:	2301      	movne	r3, #1
 8001288:	2300      	moveq	r3, #0
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1f0      	bne.n	8001272 <_ZN15UGR_ScreenField6updateEPc+0x286>
					//TODO find better way or checking, also timeout code?
				}
				//Otherwise, start DMA transfer
				if(screen->ILI9341StreamBufIndex > ILI_STREAMBUF_SIZE/2){
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800129a:	d913      	bls.n	80012c4 <_ZN15UGR_ScreenField6updateEPc+0x2d8>
					HAL_SPI_Transmit_DMA(this->screen->spiHandle, screen->ILI9341StreamBuf + ILI_STREAMBUF_SIZE/2, screen->ILI9341StreamBufIndex - ILI_STREAMBUF_SIZE/2);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a0:	f8d3 0808 	ldr.w	r0, [r3, #2056]	@ 0x808
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a8:	3308      	adds	r3, #8
 80012aa:	f503 6180 	add.w	r1, r3, #1024	@ 0x400
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	f004 fc4b 	bl	8005b58 <HAL_SPI_Transmit_DMA>
 80012c2:	e00e      	b.n	80012e2 <_ZN15UGR_ScreenField6updateEPc+0x2f6>
				} else {
					HAL_SPI_Transmit_DMA(this->screen->spiHandle, screen->ILI9341StreamBuf, screen->ILI9341StreamBufIndex);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c8:	f8d3 0808 	ldr.w	r0, [r3, #2056]	@ 0x808
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d0:	f103 0108 	add.w	r1, r3, #8
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	f004 fc3b 	bl	8005b58 <HAL_SPI_Transmit_DMA>
				}
			}

			const char* teststr = "10";
 80012e2:	4b93      	ldr	r3, [pc, #588]	@ (8001530 <_ZN15UGR_ScreenField6updateEPc+0x544>)
 80012e4:	60fb      	str	r3, [r7, #12]
			if(strcmp(str, teststr) == 0){
 80012e6:	68f9      	ldr	r1, [r7, #12]
 80012e8:	6838      	ldr	r0, [r7, #0]
 80012ea:	f7fe ff71 	bl	80001d0 <strcmp>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10f      	bne.n	8001314 <_ZN15UGR_ScreenField6updateEPc+0x328>
				while(HAL_SPI_GetState(this->screen->spiHandle) != HAL_SPI_STATE_READY){
 80012f4:	bf00      	nop
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fa:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80012fe:	4618      	mov	r0, r3
 8001300:	f004 fd32 	bl	8005d68 <HAL_SPI_GetState>
 8001304:	4603      	mov	r3, r0
 8001306:	2b01      	cmp	r3, #1
 8001308:	bf14      	ite	ne
 800130a:	2301      	movne	r3, #1
 800130c:	2300      	moveq	r3, #0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f0      	bne.n	80012f6 <_ZN15UGR_ScreenField6updateEPc+0x30a>
									//TODO find better way or checking, also timeout code?
								}
			}

		//compare max dimensions, blanking extra space from prev. string
			if(i < strlen(this->currentString)){
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	4618      	mov	r0, r3
 800131a:	f7fe ff63 	bl	80001e4 <strlen>
 800131e:	4602      	mov	r2, r0
 8001320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001322:	429a      	cmp	r2, r3
 8001324:	f240 80a0 	bls.w	8001468 <_ZN15UGR_ScreenField6updateEPc+0x47c>
				offset = this->currentString[i] - font.first;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1a      	ldr	r2, [r3, #32]
 800132c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	899b      	ldrh	r3, [r3, #12]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
				cInfo = &(font.glyph[offset]);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4413      	add	r3, r2
 8001346:	623b      	str	r3, [r7, #32]
				//if there isnt full overlap on the right, blank it out
				if(cInfo->width > w){
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	789b      	ldrb	r3, [r3, #2]
 800134c:	7e7a      	ldrb	r2, [r7, #25]
 800134e:	429a      	cmp	r2, r3
 8001350:	d242      	bcs.n	80013d8 <_ZN15UGR_ScreenField6updateEPc+0x3ec>
					//TODO dont use slow function for this
					while(HAL_SPI_GetState(this->screen->spiHandle) != HAL_SPI_STATE_READY){
 8001352:	bf00      	nop
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001358:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800135c:	4618      	mov	r0, r3
 800135e:	f004 fd03 	bl	8005d68 <HAL_SPI_GetState>
 8001362:	4603      	mov	r3, r0
 8001364:	2b01      	cmp	r3, #1
 8001366:	bf14      	ite	ne
 8001368:	2301      	movne	r3, #1
 800136a:	2300      	moveq	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <_ZN15UGR_ScreenField6updateEPc+0x368>
						//TODO find better way or checking, also timeout code?
					}
					if(cInfo->height > h){
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	78db      	ldrb	r3, [r3, #3]
 8001376:	7e3a      	ldrb	r2, [r7, #24]
 8001378:	429a      	cmp	r2, r3
 800137a:	d217      	bcs.n	80013ac <_ZN15UGR_ScreenField6updateEPc+0x3c0>
						ILI9341_Fill_Rect(localStartX + w , localStartY, localStartX + cInfo->width -1, localStartY + cInfo->height -1, BACKING_COLOUR);
 800137c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800137e:	7e7b      	ldrb	r3, [r7, #25]
 8001380:	4413      	add	r3, r2
 8001382:	4618      	mov	r0, r3
 8001384:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001386:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001388:	6a3a      	ldr	r2, [r7, #32]
 800138a:	7892      	ldrb	r2, [r2, #2]
 800138c:	4413      	add	r3, r2
 800138e:	3b01      	subs	r3, #1
 8001390:	461c      	mov	r4, r3
 8001392:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001394:	6a3a      	ldr	r2, [r7, #32]
 8001396:	78d2      	ldrb	r2, [r2, #3]
 8001398:	4413      	add	r3, r2
 800139a:	3b01      	subs	r3, #1
 800139c:	461a      	mov	r2, r3
 800139e:	2300      	movs	r3, #0
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	4613      	mov	r3, r2
 80013a4:	4622      	mov	r2, r4
 80013a6:	f7ff fb2f 	bl	8000a08 <ILI9341_Fill_Rect>
 80013aa:	e015      	b.n	80013d8 <_ZN15UGR_ScreenField6updateEPc+0x3ec>
					} else {
						ILI9341_Fill_Rect(localStartX + w , localStartY, localStartX + cInfo->width -1, localStartY + h -1, BACKING_COLOUR);
 80013ac:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80013ae:	7e7b      	ldrb	r3, [r7, #25]
 80013b0:	4413      	add	r3, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 80013b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80013b8:	6a3a      	ldr	r2, [r7, #32]
 80013ba:	7892      	ldrb	r2, [r2, #2]
 80013bc:	4413      	add	r3, r2
 80013be:	3b01      	subs	r3, #1
 80013c0:	461c      	mov	r4, r3
 80013c2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80013c4:	7e3b      	ldrb	r3, [r7, #24]
 80013c6:	4413      	add	r3, r2
 80013c8:	3b01      	subs	r3, #1
 80013ca:	461a      	mov	r2, r3
 80013cc:	2300      	movs	r3, #0
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	4613      	mov	r3, r2
 80013d2:	4622      	mov	r2, r4
 80013d4:	f7ff fb18 	bl	8000a08 <ILI9341_Fill_Rect>
					}
				}
				//if there isnt full overlap on the bottom (and a little bit on the corner)l blank it out
				if(cInfo->height > h){
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	78db      	ldrb	r3, [r3, #3]
 80013dc:	7e3a      	ldrb	r2, [r7, #24]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d242      	bcs.n	8001468 <_ZN15UGR_ScreenField6updateEPc+0x47c>
					//TODO dont use slow function for this
					while(HAL_SPI_GetState(this->screen->spiHandle) != HAL_SPI_STATE_READY){
 80013e2:	bf00      	nop
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 fcbb 	bl	8005d68 <HAL_SPI_GetState>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	bf14      	ite	ne
 80013f8:	2301      	movne	r3, #1
 80013fa:	2300      	moveq	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <_ZN15UGR_ScreenField6updateEPc+0x3f8>
						//TODO find better way or checking, also timeout code?
					}
					if(cInfo->width > w){
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	789b      	ldrb	r3, [r3, #2]
 8001406:	7e7a      	ldrb	r2, [r7, #25]
 8001408:	429a      	cmp	r2, r3
 800140a:	d217      	bcs.n	800143c <_ZN15UGR_ScreenField6updateEPc+0x450>
						ILI9341_Fill_Rect(localStartX, localStartY + h, localStartX + cInfo->width -1, localStartY + cInfo->height -1, BACKING_COLOUR);
 800140c:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 800140e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001410:	7e3b      	ldrb	r3, [r7, #24]
 8001412:	4413      	add	r3, r2
 8001414:	4619      	mov	r1, r3
 8001416:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001418:	6a3a      	ldr	r2, [r7, #32]
 800141a:	7892      	ldrb	r2, [r2, #2]
 800141c:	4413      	add	r3, r2
 800141e:	3b01      	subs	r3, #1
 8001420:	461c      	mov	r4, r3
 8001422:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001424:	6a3a      	ldr	r2, [r7, #32]
 8001426:	78d2      	ldrb	r2, [r2, #3]
 8001428:	4413      	add	r3, r2
 800142a:	3b01      	subs	r3, #1
 800142c:	461a      	mov	r2, r3
 800142e:	2300      	movs	r3, #0
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	4613      	mov	r3, r2
 8001434:	4622      	mov	r2, r4
 8001436:	f7ff fae7 	bl	8000a08 <ILI9341_Fill_Rect>
 800143a:	e015      	b.n	8001468 <_ZN15UGR_ScreenField6updateEPc+0x47c>
					} else {
						ILI9341_Fill_Rect(localStartX, localStartY + h, localStartX + w -1, localStartY + cInfo->height -1, BACKING_COLOUR);
 800143c:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 800143e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001440:	7e3b      	ldrb	r3, [r7, #24]
 8001442:	4413      	add	r3, r2
 8001444:	4619      	mov	r1, r3
 8001446:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001448:	7e7b      	ldrb	r3, [r7, #25]
 800144a:	4413      	add	r3, r2
 800144c:	3b01      	subs	r3, #1
 800144e:	461c      	mov	r4, r3
 8001450:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001452:	6a3a      	ldr	r2, [r7, #32]
 8001454:	78d2      	ldrb	r2, [r2, #3]
 8001456:	4413      	add	r3, r2
 8001458:	3b01      	subs	r3, #1
 800145a:	461a      	mov	r2, r3
 800145c:	2300      	movs	r3, #0
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	4613      	mov	r3, r2
 8001462:	4622      	mov	r2, r4
 8001464:	f7ff fad0 	bl	8000a08 <ILI9341_Fill_Rect>
					}
				}
			}

			localStartX += ad;
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	b29a      	uxth	r2, r3
 800146c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800146e:	4413      	add	r3, r2
 8001470:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	for (i = 0; i < strlen(str); i++) {
 8001472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001474:	3301      	adds	r3, #1
 8001476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001478:	6838      	ldr	r0, [r7, #0]
 800147a:	f7fe feb3 	bl	80001e4 <strlen>
 800147e:	4602      	mov	r2, r0
 8001480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001482:	429a      	cmp	r2, r3
 8001484:	f63f adc0 	bhi.w	8001008 <_ZN15UGR_ScreenField6updateEPc+0x1c>
		}

	//check for extra characters in the prior string
	int lastLen = strlen(this->currentString);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4618      	mov	r0, r3
 800148e:	f7fe fea9 	bl	80001e4 <strlen>
 8001492:	4603      	mov	r3, r0
 8001494:	62bb      	str	r3, [r7, #40]	@ 0x28
	while(i < lastLen){
 8001496:	e03c      	b.n	8001512 <_ZN15UGR_ScreenField6updateEPc+0x526>
		offset = this->currentString[i] - font.first;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1a      	ldr	r2, [r3, #32]
 800149c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800149e:	4413      	add	r3, r2
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	899b      	ldrh	r3, [r3, #12]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
		cInfo = &(font.glyph[offset]);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4413      	add	r3, r2
 80014b6:	623b      	str	r3, [r7, #32]
		while(HAL_SPI_GetState(this->screen->spiHandle) != HAL_SPI_STATE_READY);
 80014b8:	bf00      	nop
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014be:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80014c2:	4618      	mov	r0, r3
 80014c4:	f004 fc50 	bl	8005d68 <HAL_SPI_GetState>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	bf14      	ite	ne
 80014ce:	2301      	movne	r3, #1
 80014d0:	2300      	moveq	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <_ZN15UGR_ScreenField6updateEPc+0x4ce>
		ILI9341_Fill_Rect(localStartX, localStartY, localStartX + cInfo->width -1, localStartY + cInfo->height -1, BACKING_COLOUR);
 80014d8:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 80014da:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 80014dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80014de:	6a3a      	ldr	r2, [r7, #32]
 80014e0:	7892      	ldrb	r2, [r2, #2]
 80014e2:	4413      	add	r3, r2
 80014e4:	3b01      	subs	r3, #1
 80014e6:	461c      	mov	r4, r3
 80014e8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80014ea:	6a3a      	ldr	r2, [r7, #32]
 80014ec:	78d2      	ldrb	r2, [r2, #3]
 80014ee:	4413      	add	r3, r2
 80014f0:	3b01      	subs	r3, #1
 80014f2:	461a      	mov	r2, r3
 80014f4:	2300      	movs	r3, #0
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	4613      	mov	r3, r2
 80014fa:	4622      	mov	r2, r4
 80014fc:	f7ff fa84 	bl	8000a08 <ILI9341_Fill_Rect>
		localStartX += cInfo->xAdvance;
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	791b      	ldrb	r3, [r3, #4]
 8001504:	461a      	mov	r2, r3
 8001506:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001508:	4413      	add	r3, r2
 800150a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		i++;
 800150c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800150e:	3301      	adds	r3, #1
 8001510:	63bb      	str	r3, [r7, #56]	@ 0x38
	while(i < lastLen){
 8001512:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001516:	429a      	cmp	r2, r3
 8001518:	dbbe      	blt.n	8001498 <_ZN15UGR_ScreenField6updateEPc+0x4ac>
	}

	strncpy(this->currentString, str, 32);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	2220      	movs	r2, #32
 8001520:	6839      	ldr	r1, [r7, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f005 fc7d 	bl	8006e22 <strncpy>

}
 8001528:	bf00      	nop
 800152a:	3744      	adds	r7, #68	@ 0x44
 800152c:	46bd      	mov	sp, r7
 800152e:	bd90      	pop	{r4, r7, pc}
 8001530:	08007c98 	.word	0x08007c98

08001534 <_ZN15UGR_ScreenField9setColourEt>:

uint16_t UGR_ScreenField::getColour() const {
	return colour;
}

void UGR_ScreenField::setColour(uint16_t colour) {
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
	this->colour = colour;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	831a      	strh	r2, [r3, #24]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_ZNK5S25FL13getMaxAddressEv>:
    void read(uint32_t add, uint8_t * buf, uint32_t len);       //Read from address add into buf for byte length len (no size limit).
    void program(uint32_t add, uint8_t * buf, uint32_t len);    //Program from address add from buf for byte length len (size limit is end of address program page)
    void sector_erase(uint32_t add);
    void bulk_erase();

	uint32_t getMaxAddress() const {
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
		return _maxAddress;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
	}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <HAL_SPI_TxCpltCallback>:
//	col_ready = 2;
	HAL_SPI_Transmit_DMA(&hspi3, buf+ILI9341_WIDTH, ILI9341_WIDTH);
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	col_ready++;
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_SPI_TxCpltCallback+0x20>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b03      	ldr	r3, [pc, #12]	@ (800158c <HAL_SPI_TxCpltCallback+0x20>)
 800157e:	701a      	strb	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	20000102 	.word	0x20000102

08001590 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, rxData);
 8001598:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800159a:	4a1a      	ldr	r2, [pc, #104]	@ (8001604 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800159c:	2100      	movs	r1, #0
 800159e:	481a      	ldr	r0, [pc, #104]	@ (8001608 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80015a0:	f001 fbc9 	bl	8002d36 <HAL_CAN_GetRxMessage>
	//When in filter list mode, can hearders have no info for some reason, other than what item of the list they met, so looking for ID doesnt work

  if(pRxHeader.ExtId == CANADDRESS){
 80015a4:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015ac:	d123      	bne.n	80015f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
    ecuData.waterTemp = rxData[1] << 8 | rxData[0];
 80015ae:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80015b0:	785b      	ldrb	r3, [r3, #1]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b21a      	sxth	r2, r3
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80015c2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    ecuData.cellTemp = rxData[3] << 8 | rxData[2];
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80015c8:	78db      	ldrb	r3, [r3, #3]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80015d0:	789b      	ldrb	r3, [r3, #2]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80015da:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    ecuData.stateOfCharge = rxData[5] << 8 | rxData[4];
 80015de:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80015e0:	795b      	ldrb	r3, [r3, #5]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80015e8:	791b      	ldrb	r3, [r3, #4]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80015f2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000170 	.word	0x20000170
 8001604:	20000154 	.word	0x20000154
 8001608:	20000178 	.word	0x20000178
 800160c:	20000104 	.word	0x20000104

08001610 <_Z8drawGridv>:
/* USER CODE BEGIN 0 */
S25FL flash;

CAN_FilterTypeDef sFilterConfig; //declare CAN filter structure

void drawGrid(){
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af02      	add	r7, sp, #8
	for(int w = 20; w < 240; w+= 50){
 8001616:	2314      	movs	r3, #20
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	e00e      	b.n	800163a <_Z8drawGridv+0x2a>
		ILI9341_drawLine(0, w, 319, w, COLOR_RED);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	b219      	sxth	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	b21b      	sxth	r3, r3
 8001624:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001628:	9200      	str	r2, [sp, #0]
 800162a:	f240 123f 	movw	r2, #319	@ 0x13f
 800162e:	2000      	movs	r0, #0
 8001630:	f7ff fa25 	bl	8000a7e <ILI9341_drawLine>
	for(int w = 20; w < 240; w+= 50){
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3332      	adds	r3, #50	@ 0x32
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2bef      	cmp	r3, #239	@ 0xef
 800163e:	dded      	ble.n	800161c <_Z8drawGridv+0xc>
	}
	for(int h = 20; h < 320; h+= 50){
 8001640:	2314      	movs	r3, #20
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	e00d      	b.n	8001662 <_Z8drawGridv+0x52>
		ILI9341_drawLine(h, 0, h, 239, COLOR_RED);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b218      	sxth	r0, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b21a      	sxth	r2, r3
 800164e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	23ef      	movs	r3, #239	@ 0xef
 8001656:	2100      	movs	r1, #0
 8001658:	f7ff fa11 	bl	8000a7e <ILI9341_drawLine>
	for(int h = 20; h < 320; h+= 50){
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	3332      	adds	r3, #50	@ 0x32
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001668:	dbed      	blt.n	8001646 <_Z8drawGridv+0x36>
	}
}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <_Z14decompress_rlePKhPtm>:

void decompress_rle(const uint8_t* compressed_data, uint16_t* decompressed_data, uint32_t compressed_size) {
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	@ 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
    uint32_t index = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
    uint32_t decompressed_index = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
    while (index < compressed_size) {
 8001688:	e033      	b.n	80016f2 <_Z14decompress_rlePKhPtm+0x7e>
        uint16_t value = (compressed_data[index] << 8) | compressed_data[index + 1];
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	4413      	add	r3, r2
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	b21a      	sxth	r2, r3
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3301      	adds	r3, #1
 800169a:	68f9      	ldr	r1, [r7, #12]
 800169c:	440b      	add	r3, r1
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	4313      	orrs	r3, r2
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	82bb      	strh	r3, [r7, #20]
        uint16_t count = (compressed_data[index + 2] << 8) | compressed_data[index + 3];
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	3302      	adds	r3, #2
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3303      	adds	r3, #3
 80016ba:	68f9      	ldr	r1, [r7, #12]
 80016bc:	440b      	add	r3, r1
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	827b      	strh	r3, [r7, #18]
        for (uint16_t i = 0; i < count; ++i) {
 80016c8:	2300      	movs	r3, #0
 80016ca:	82fb      	strh	r3, [r7, #22]
 80016cc:	e00a      	b.n	80016e4 <_Z14decompress_rlePKhPtm+0x70>
            decompressed_data[decompressed_index++] = value;
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	61ba      	str	r2, [r7, #24]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	4413      	add	r3, r2
 80016da:	8aba      	ldrh	r2, [r7, #20]
 80016dc:	801a      	strh	r2, [r3, #0]
        for (uint16_t i = 0; i < count; ++i) {
 80016de:	8afb      	ldrh	r3, [r7, #22]
 80016e0:	3301      	adds	r3, #1
 80016e2:	82fb      	strh	r3, [r7, #22]
 80016e4:	8afa      	ldrh	r2, [r7, #22]
 80016e6:	8a7b      	ldrh	r3, [r7, #18]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d3f0      	bcc.n	80016ce <_Z14decompress_rlePKhPtm+0x5a>
        }
        index += 4;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	3304      	adds	r3, #4
 80016f0:	61fb      	str	r3, [r7, #28]
    while (index < compressed_size) {
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d3c7      	bcc.n	800168a <_Z14decompress_rlePKhPtm+0x16>
    }
}
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
 80016fe:	3724      	adds	r7, #36	@ 0x24
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <_Z13display_imagemm>:

void display_image(uint32_t xpos, uint32_t ypos) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
    uint16_t* decompressed_data = (uint16_t*)malloc(image_width * image_height * sizeof(uint16_t));
 8001712:	f645 00fc 	movw	r0, #22780	@ 0x58fc
 8001716:	f005 f987 	bl	8006a28 <malloc>
 800171a:	4603      	mov	r3, r0
 800171c:	60fb      	str	r3, [r7, #12]
    decompress_rle(compressed_data, decompressed_data, sizeof(compressed_data));
 800171e:	f641 0224 	movw	r2, #6180	@ 0x1824
 8001722:	68f9      	ldr	r1, [r7, #12]
 8001724:	4817      	ldr	r0, [pc, #92]	@ (8001784 <_Z13display_imagemm+0x7c>)
 8001726:	f7ff ffa5 	bl	8001674 <_Z14decompress_rlePKhPtm>

    ILI9341_SetCursorPosition(xpos, ypos, xpos + image_width - 1, ypos + image_height - 1);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	b298      	uxth	r0, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b299      	uxth	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	b29b      	uxth	r3, r3
 8001736:	33a9      	adds	r3, #169	@ 0xa9
 8001738:	b29a      	uxth	r2, r3
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b29b      	uxth	r3, r3
 800173e:	3342      	adds	r3, #66	@ 0x42
 8001740:	b29b      	uxth	r3, r3
 8001742:	f7fe ff95 	bl	8000670 <ILI9341_SetCursorPosition>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001746:	2201      	movs	r2, #1
 8001748:	2102      	movs	r1, #2
 800174a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174e:	f002 facd 	bl	8003cec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)decompressed_data, image_width * image_height * 2);  // For RGB565, each pixel is 2 bytes
 8001752:	f645 02fc 	movw	r2, #22780	@ 0x58fc
 8001756:	68f9      	ldr	r1, [r7, #12]
 8001758:	480b      	ldr	r0, [pc, #44]	@ (8001788 <_Z13display_imagemm+0x80>)
 800175a:	f004 f9fd 	bl	8005b58 <HAL_SPI_Transmit_DMA>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800175e:	bf00      	nop
 8001760:	4809      	ldr	r0, [pc, #36]	@ (8001788 <_Z13display_imagemm+0x80>)
 8001762:	f004 fb01 	bl	8005d68 <HAL_SPI_GetState>
 8001766:	4603      	mov	r3, r0
 8001768:	2b01      	cmp	r3, #1
 800176a:	bf14      	ite	ne
 800176c:	2301      	movne	r3, #1
 800176e:	2300      	moveq	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f4      	bne.n	8001760 <_Z13display_imagemm+0x58>

    free(decompressed_data);
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f005 f95e 	bl	8006a38 <free>
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	0800d2c8 	.word	0x0800d2c8
 8001788:	200001ec 	.word	0x200001ec

0800178c <_ZN5S25FLaSERKS_>:
class S25FL {
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	791a      	ldrb	r2, [r3, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	711a      	strb	r2, [r3, #4]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	899a      	ldrh	r2, [r3, #12]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	819a      	strh	r2, [r3, #12]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	615a      	str	r2, [r3, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017cc:	b5b0      	push	{r4, r5, r7, lr}
 80017ce:	f6ad 1df8 	subw	sp, sp, #2552	@ 0x9f8
 80017d2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d4:	f001 f80d 	bl	80027f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d8:	f000 f9e2 	bl	8001ba0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017dc:	f000 fc0a 	bl	8001ff4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80017e0:	f000 fbe2 	bl	8001fa8 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 80017e4:	f000 fbac 	bl	8001f40 <_ZL19MX_USART2_UART_Initv>
  MX_SPI3_Init();
 80017e8:	f000 fb68 	bl	8001ebc <_ZL12MX_SPI3_Initv>
  MX_SPI1_Init();
 80017ec:	f000 fb24 	bl	8001e38 <_ZL12MX_SPI1_Initv>
  MX_CAN1_Init();
 80017f0:	f000 fa98 	bl	8001d24 <_ZL12MX_CAN1_Initv>
  MX_I2C1_Init();
 80017f4:	f000 fad2 	bl	8001d9c <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  //Init LCD
  UGR_Screen screen = UGR_Screen(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 80017f8:	f507 70be 	add.w	r0, r7, #380	@ 0x17c
 80017fc:	2302      	movs	r3, #2
 80017fe:	9303      	str	r3, [sp, #12]
 8001800:	4bb5      	ldr	r3, [pc, #724]	@ (8001ad8 <main+0x30c>)
 8001802:	9302      	str	r3, [sp, #8]
 8001804:	2302      	movs	r3, #2
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001812:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001816:	49b1      	ldr	r1, [pc, #708]	@ (8001adc <main+0x310>)
 8001818:	f7ff fb1a 	bl	8000e50 <_ZN10UGR_ScreenC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>

  //Init Flash
  flash = S25FL(&hspi3, FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 800181c:	f507 601a 	add.w	r0, r7, #2464	@ 0x9a0
 8001820:	2308      	movs	r3, #8
 8001822:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001826:	49ae      	ldr	r1, [pc, #696]	@ (8001ae0 <main+0x314>)
 8001828:	f7ff fa14 	bl	8000c54 <_ZN5S25FLC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800182c:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8001830:	4619      	mov	r1, r3
 8001832:	48ac      	ldr	r0, [pc, #688]	@ (8001ae4 <main+0x318>)
 8001834:	f7ff ffaa 	bl	800178c <_ZN5S25FLaSERKS_>
 8001838:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fa45 	bl	8000ccc <_ZN5S25FLD1Ev>
  flash.begin();
 8001842:	48a8      	ldr	r0, [pc, #672]	@ (8001ae4 <main+0x318>)
 8001844:	f7ff fa62 	bl	8000d0c <_ZN5S25FL5beginEv>


  //DEBUG print flash max address
  uint32_t maxadd = flash.getMaxAddress();
 8001848:	48a6      	ldr	r0, [pc, #664]	@ (8001ae4 <main+0x318>)
 800184a:	f7ff fe82 	bl	8001552 <_ZNK5S25FL13getMaxAddressEv>
 800184e:	f8c7 09dc 	str.w	r0, [r7, #2524]	@ 0x9dc
  char str[128];
  sprintf(str, "maxadd: %lu\n\r", maxadd);
 8001852:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001856:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	@ 0x9dc
 800185a:	49a3      	ldr	r1, [pc, #652]	@ (8001ae8 <main+0x31c>)
 800185c:	4618      	mov	r0, r3
 800185e:	f005 fa75 	bl	8006d4c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001862:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fcbc 	bl	80001e4 <strlen>
 800186c:	4603      	mov	r3, r0
 800186e:	b29a      	uxth	r2, r3
 8001870:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	489c      	ldr	r0, [pc, #624]	@ (8001aec <main+0x320>)
 800187a:	f004 fcaf 	bl	80061dc <HAL_UART_Transmit>


  //CAN test code
  //So in 32 bit mode you have to split the 32 bit filter ID into 2 16 bit segments, to be put into IdHigh and IdLow... which are both 32 bit??? REEEE
  	uint32_t canFiltMask 	= 0x1FFFFFF0;
 800187e:	4b9c      	ldr	r3, [pc, #624]	@ (8001af0 <main+0x324>)
 8001880:	f8c7 39d8 	str.w	r3, [r7, #2520]	@ 0x9d8
  	uint32_t canFiltMask_STD = canFiltMask & 0x7FF; //Separate mask into its standard and extended parts
 8001884:	f8d7 39d8 	ldr.w	r3, [r7, #2520]	@ 0x9d8
 8001888:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800188c:	f8c7 39d4 	str.w	r3, [r7, #2516]	@ 0x9d4
  	uint32_t canFiltMask_IDE = canFiltMask >> 11;
 8001890:	f8d7 39d8 	ldr.w	r3, [r7, #2520]	@ 0x9d8
 8001894:	0adb      	lsrs	r3, r3, #11
 8001896:	f8c7 39d0 	str.w	r3, [r7, #2512]	@ 0x9d0
  	uint32_t canFiltID 		= 0x2000;
 800189a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800189e:	f8c7 39cc 	str.w	r3, [r7, #2508]	@ 0x9cc
  	uint32_t canFiltID_STD = canFiltID & 0x7FF; //Separate ID into its standard and extended parts
 80018a2:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 80018a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018aa:	f8c7 39c8 	str.w	r3, [r7, #2504]	@ 0x9c8
	uint32_t canFiltID_IDE = canFiltID >> 11;
 80018ae:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 80018b2:	0adb      	lsrs	r3, r3, #11
 80018b4:	f8c7 39c4 	str.w	r3, [r7, #2500]	@ 0x9c4

	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0; //set fifo assignment
 80018b8:	4b8e      	ldr	r3, [pc, #568]	@ (8001af4 <main+0x328>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterBank = 0;
 80018be:	4b8d      	ldr	r3, [pc, #564]	@ (8001af4 <main+0x328>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterIdHigh = (canFiltID_STD << 5) & (canFiltID_IDE >> 13);
 80018c4:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 80018c8:	015a      	lsls	r2, r3, #5
 80018ca:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 80018ce:	0b5b      	lsrs	r3, r3, #13
 80018d0:	4013      	ands	r3, r2
 80018d2:	4a88      	ldr	r2, [pc, #544]	@ (8001af4 <main+0x328>)
 80018d4:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow =  (canFiltID_IDE << 3) & 0x4;
 80018d6:	4b87      	ldr	r3, [pc, #540]	@ (8001af4 <main+0x328>)
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = (canFiltMask_STD << 5) & (canFiltMask_IDE >> 13);
 80018dc:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 80018e6:	0b5b      	lsrs	r3, r3, #13
 80018e8:	4013      	ands	r3, r2
 80018ea:	4a82      	ldr	r2, [pc, #520]	@ (8001af4 <main+0x328>)
 80018ec:	6093      	str	r3, [r2, #8]
	sFilterConfig.FilterMaskIdLow =  (canFiltMask_IDE << 3) & 0x4;
 80018ee:	4b81      	ldr	r3, [pc, #516]	@ (8001af4 <main+0x328>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //set filter scale
 80018f4:	4b7f      	ldr	r3, [pc, #508]	@ (8001af4 <main+0x328>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80018fa:	4b7e      	ldr	r3, [pc, #504]	@ (8001af4 <main+0x328>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterActivation=ENABLE;
 8001900:	4b7c      	ldr	r3, [pc, #496]	@ (8001af4 <main+0x328>)
 8001902:	2201      	movs	r2, #1
 8001904:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig); //configure CAN filter
 8001906:	497b      	ldr	r1, [pc, #492]	@ (8001af4 <main+0x328>)
 8001908:	487b      	ldr	r0, [pc, #492]	@ (8001af8 <main+0x32c>)
 800190a:	f001 f906 	bl	8002b1a <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan1); //start CAN
 800190e:	487a      	ldr	r0, [pc, #488]	@ (8001af8 <main+0x32c>)
 8001910:	f001 f9cd 	bl	8002cae <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
 8001914:	2102      	movs	r1, #2
 8001916:	4878      	ldr	r0, [pc, #480]	@ (8001af8 <main+0x32c>)
 8001918:	f001 fb1f 	bl	8002f5a <HAL_CAN_ActivateNotification>
	 //  meme.pixel_data[i] = meme.pixel_data[i+1];
	 //  meme.pixel_data[i+1] = c;
  // }


  ILI9341_Fill(BACKING_COLOUR);
 800191c:	2000      	movs	r0, #0
 800191e:	f7fe ffd3 	bl	80008c8 <ILI9341_Fill>
 
  display_image(150,150);
 8001922:	2196      	movs	r1, #150	@ 0x96
 8001924:	2096      	movs	r0, #150	@ 0x96
 8001926:	f7ff feef 	bl	8001708 <_Z13display_imagemm>

  UGR_ScreenField waterTempTitleField = UGR_ScreenField(2, 0, "WATER T", FreeSerifBold18pt7b, &screen);
 800192a:	f107 05d4 	add.w	r5, r7, #212	@ 0xd4
 800192e:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001932:	9304      	str	r3, [sp, #16]
 8001934:	4b71      	ldr	r3, [pc, #452]	@ (8001afc <main+0x330>)
 8001936:	466c      	mov	r4, sp
 8001938:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800193a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800193e:	4b70      	ldr	r3, [pc, #448]	@ (8001b00 <main+0x334>)
 8001940:	2200      	movs	r2, #0
 8001942:	2102      	movs	r1, #2
 8001944:	4628      	mov	r0, r5
 8001946:	f7ff faf3 	bl	8000f30 <_ZN15UGR_ScreenFieldC1EiiPc7GFXfontP10UGR_Screen>
  UGR_ScreenField waterTempField = UGR_ScreenField(10, 40, "", FreeSans35pt7b, &screen);
 800194a:	f107 05ac 	add.w	r5, r7, #172	@ 0xac
 800194e:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001952:	9304      	str	r3, [sp, #16]
 8001954:	4b6b      	ldr	r3, [pc, #428]	@ (8001b04 <main+0x338>)
 8001956:	466c      	mov	r4, sp
 8001958:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800195a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800195e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b08 <main+0x33c>)
 8001960:	2228      	movs	r2, #40	@ 0x28
 8001962:	210a      	movs	r1, #10
 8001964:	4628      	mov	r0, r5
 8001966:	f7ff fae3 	bl	8000f30 <_ZN15UGR_ScreenFieldC1EiiPc7GFXfontP10UGR_Screen>

  UGR_ScreenField cellTempTitleField = UGR_ScreenField(2, 140, "CELL T", FreeSerifBold18pt7b, &screen);
 800196a:	f107 0584 	add.w	r5, r7, #132	@ 0x84
 800196e:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001972:	9304      	str	r3, [sp, #16]
 8001974:	4b61      	ldr	r3, [pc, #388]	@ (8001afc <main+0x330>)
 8001976:	466c      	mov	r4, sp
 8001978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800197a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800197e:	4b63      	ldr	r3, [pc, #396]	@ (8001b0c <main+0x340>)
 8001980:	228c      	movs	r2, #140	@ 0x8c
 8001982:	2102      	movs	r1, #2
 8001984:	4628      	mov	r0, r5
 8001986:	f7ff fad3 	bl	8000f30 <_ZN15UGR_ScreenFieldC1EiiPc7GFXfontP10UGR_Screen>
  UGR_ScreenField cellTempField = UGR_ScreenField(10, 180, "", FreeSans35pt7b, &screen);
 800198a:	f107 055c 	add.w	r5, r7, #92	@ 0x5c
 800198e:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001992:	9304      	str	r3, [sp, #16]
 8001994:	4b5b      	ldr	r3, [pc, #364]	@ (8001b04 <main+0x338>)
 8001996:	466c      	mov	r4, sp
 8001998:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800199a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800199e:	4b5a      	ldr	r3, [pc, #360]	@ (8001b08 <main+0x33c>)
 80019a0:	22b4      	movs	r2, #180	@ 0xb4
 80019a2:	210a      	movs	r1, #10
 80019a4:	4628      	mov	r0, r5
 80019a6:	f7ff fac3 	bl	8000f30 <_ZN15UGR_ScreenFieldC1EiiPc7GFXfontP10UGR_Screen>

  UGR_ScreenField stateOfChargeTitleField = UGR_ScreenField(190, 0, "SoC %", FreeSerifBold18pt7b, &screen);
 80019aa:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 80019ae:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80019b2:	9304      	str	r3, [sp, #16]
 80019b4:	4b51      	ldr	r3, [pc, #324]	@ (8001afc <main+0x330>)
 80019b6:	466c      	mov	r4, sp
 80019b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80019be:	4b54      	ldr	r3, [pc, #336]	@ (8001b10 <main+0x344>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	21be      	movs	r1, #190	@ 0xbe
 80019c4:	4628      	mov	r0, r5
 80019c6:	f7ff fab3 	bl	8000f30 <_ZN15UGR_ScreenFieldC1EiiPc7GFXfontP10UGR_Screen>
  UGR_ScreenField stateOfChargeField = UGR_ScreenField(195, 40, "", FreeSans35pt7b, &screen);
 80019ca:	f107 050c 	add.w	r5, r7, #12
 80019ce:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80019d2:	9304      	str	r3, [sp, #16]
 80019d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001b04 <main+0x338>)
 80019d6:	466c      	mov	r4, sp
 80019d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80019de:	4b4a      	ldr	r3, [pc, #296]	@ (8001b08 <main+0x33c>)
 80019e0:	2228      	movs	r2, #40	@ 0x28
 80019e2:	21c3      	movs	r1, #195	@ 0xc3
 80019e4:	4628      	mov	r0, r5
 80019e6:	f7ff faa3 	bl	8000f30 <_ZN15UGR_ScreenFieldC1EiiPc7GFXfontP10UGR_Screen>
  stateOfChargeField.setColour(COLOR_WHITE);
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fd9e 	bl	8001534 <_ZN15UGR_ScreenField9setColourEt>

  int can_mph = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8c7 39c0 	str.w	r3, [r7, #2496]	@ 0x9c0
  int can_gear = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8c7 39bc 	str.w	r3, [r7, #2492]	@ 0x9bc
  char tmp_str[9];

//  drawGrid();

  //for fit testing of fields while CAN is disconnected
  ecuData.RPM = 12000;
 8001a04:	4b43      	ldr	r3, [pc, #268]	@ (8001b14 <main+0x348>)
 8001a06:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8001a0a:	801a      	strh	r2, [r3, #0]
  ecuData.KPHx10 = 1200;
 8001a0c:	4b41      	ldr	r3, [pc, #260]	@ (8001b14 <main+0x348>)
 8001a0e:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8001a12:	819a      	strh	r2, [r3, #12]
  ecuData.oTemp = 112;
 8001a14:	4b3f      	ldr	r3, [pc, #252]	@ (8001b14 <main+0x348>)
 8001a16:	2270      	movs	r2, #112	@ 0x70
 8001a18:	825a      	strh	r2, [r3, #18]
  ecuData.oKpa = 650;
 8001a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b14 <main+0x348>)
 8001a1c:	f240 228a 	movw	r2, #650	@ 0x28a
 8001a20:	81da      	strh	r2, [r3, #14]
  ecuData.voltsx10 = 135;
 8001a22:	4b3c      	ldr	r3, [pc, #240]	@ (8001b14 <main+0x348>)
 8001a24:	2287      	movs	r2, #135	@ 0x87
 8001a26:	829a      	strh	r2, [r3, #20]
  ecuData.wTemp = 101;
 8001a28:	4b3a      	ldr	r3, [pc, #232]	@ (8001b14 <main+0x348>)
 8001a2a:	2265      	movs	r2, #101	@ 0x65
 8001a2c:	809a      	strh	r2, [r3, #4]
  ecuData.TPS = 100;
 8001a2e:	4b39      	ldr	r3, [pc, #228]	@ (8001b14 <main+0x348>)
 8001a30:	2264      	movs	r2, #100	@ 0x64
 8001a32:	805a      	strh	r2, [r3, #2]
  ecuData.gear = 5;
 8001a34:	4b37      	ldr	r3, [pc, #220]	@ (8001b14 <main+0x348>)
 8001a36:	2205      	movs	r2, #5
 8001a38:	831a      	strh	r2, [r3, #24]

  // New Data
  ecuData.waterTemp = 52;
 8001a3a:	4b36      	ldr	r3, [pc, #216]	@ (8001b14 <main+0x348>)
 8001a3c:	2234      	movs	r2, #52	@ 0x34
 8001a3e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  ecuData.cellTemp = 30;
 8001a42:	4b34      	ldr	r3, [pc, #208]	@ (8001b14 <main+0x348>)
 8001a44:	221e      	movs	r2, #30
 8001a46:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  ecuData.stateOfCharge = 85;
 8001a4a:	4b32      	ldr	r3, [pc, #200]	@ (8001b14 <main+0x348>)
 8001a4c:	2255      	movs	r2, #85	@ 0x55
 8001a4e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  while (1)
  {

    // Please remember to implement this: Shutdown Logic for Overheating
    // Called Function should make screen Red
    if (ecuData.waterTemp > 50 || ecuData.cellTemp > 60) {
 8001a52:	4b30      	ldr	r3, [pc, #192]	@ (8001b14 <main+0x348>)
 8001a54:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001a58:	2b32      	cmp	r3, #50	@ 0x32
 8001a5a:	dc04      	bgt.n	8001a66 <main+0x29a>
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b14 <main+0x348>)
 8001a5e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001a62:	2b3c      	cmp	r3, #60	@ 0x3c
 8001a64:	dd09      	ble.n	8001a7a <main+0x2ae>
       drawGrid();
 8001a66:	f7ff fdd3 	bl	8001610 <_Z8drawGridv>
    	ILI9341_Fill(COLOR_RED);
 8001a6a:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001a6e:	f7fe ff2b 	bl	80008c8 <ILI9341_Fill>
       HAL_Delay(20000);
 8001a72:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001a76:	f000 ff31 	bl	80028dc <HAL_Delay>
    }
    printf("Test");
 8001a7a:	4827      	ldr	r0, [pc, #156]	@ (8001b18 <main+0x34c>)
 8001a7c:	f005 f954 	bl	8006d28 <iprintf>
    // Color Conditionals
    uint16_t waterTempColour = (ecuData.waterTemp < 40) ? COLOR_WHITE : 
 8001a80:	4b24      	ldr	r3, [pc, #144]	@ (8001b14 <main+0x348>)
 8001a82:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001a86:	2b27      	cmp	r3, #39	@ 0x27
 8001a88:	dd0a      	ble.n	8001aa0 <main+0x2d4>
                              (ecuData.waterTemp < 45) ? COLOR_ORANGE : 
 8001a8a:	4b22      	ldr	r3, [pc, #136]	@ (8001b14 <main+0x348>)
 8001a8c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
    uint16_t waterTempColour = (ecuData.waterTemp < 40) ? COLOR_WHITE : 
 8001a90:	2b2c      	cmp	r3, #44	@ 0x2c
 8001a92:	dc02      	bgt.n	8001a9a <main+0x2ce>
 8001a94:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8001a98:	e004      	b.n	8001aa4 <main+0x2d8>
 8001a9a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a9e:	e001      	b.n	8001aa4 <main+0x2d8>
 8001aa0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001aa4:	f8a7 39ba 	strh.w	r3, [r7, #2490]	@ 0x9ba
                                                         COLOR_RED;
    waterTempField.setColour(waterTempColour);
 8001aa8:	f8b7 29ba 	ldrh.w	r2, [r7, #2490]	@ 0x9ba
 8001aac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fd3e 	bl	8001534 <_ZN15UGR_ScreenField9setColourEt>


    uint16_t cellTempColour = (ecuData.cellTemp < 40) ? COLOR_WHITE : 
 8001ab8:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <main+0x348>)
 8001aba:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001abe:	2b27      	cmp	r3, #39	@ 0x27
 8001ac0:	dd2c      	ble.n	8001b1c <main+0x350>
                             (ecuData.cellTemp < 45) ? COLOR_ORANGE : 
 8001ac2:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <main+0x348>)
 8001ac4:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
    uint16_t cellTempColour = (ecuData.cellTemp < 40) ? COLOR_WHITE : 
 8001ac8:	2b2c      	cmp	r3, #44	@ 0x2c
 8001aca:	dc02      	bgt.n	8001ad2 <main+0x306>
 8001acc:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8001ad0:	e026      	b.n	8001b20 <main+0x354>
 8001ad2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001ad6:	e023      	b.n	8001b20 <main+0x354>
 8001ad8:	48000400 	.word	0x48000400
 8001adc:	200001ec 	.word	0x200001ec
 8001ae0:	20000250 	.word	0x20000250
 8001ae4:	200003c4 	.word	0x200003c4
 8001ae8:	08007c9c 	.word	0x08007c9c
 8001aec:	200002fc 	.word	0x200002fc
 8001af0:	1ffffff0 	.word	0x1ffffff0
 8001af4:	200003dc 	.word	0x200003dc
 8001af8:	20000178 	.word	0x20000178
 8001afc:	0800d2b8 	.word	0x0800d2b8
 8001b00:	08007cac 	.word	0x08007cac
 8001b04:	0800befc 	.word	0x0800befc
 8001b08:	08007cb4 	.word	0x08007cb4
 8001b0c:	08007cb8 	.word	0x08007cb8
 8001b10:	08007cc0 	.word	0x08007cc0
 8001b14:	20000104 	.word	0x20000104
 8001b18:	08007cc8 	.word	0x08007cc8
 8001b1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b20:	f8a7 39b8 	strh.w	r3, [r7, #2488]	@ 0x9b8
                                                       COLOR_RED;
    cellTempField.setColour(cellTempColour);
 8001b24:	f8b7 29b8 	ldrh.w	r2, [r7, #2488]	@ 0x9b8
 8001b28:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fd00 	bl	8001534 <_ZN15UGR_ScreenField9setColourEt>


    sprintf(tmp_str, "%d", ecuData.waterTemp);
 8001b34:	4b18      	ldr	r3, [pc, #96]	@ (8001b98 <main+0x3cc>)
 8001b36:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	4917      	ldr	r1, [pc, #92]	@ (8001b9c <main+0x3d0>)
 8001b40:	4618      	mov	r0, r3
 8001b42:	f005 f903 	bl	8006d4c <siprintf>
    waterTempField.update(tmp_str);
 8001b46:	463a      	mov	r2, r7
 8001b48:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fa4c 	bl	8000fec <_ZN15UGR_ScreenField6updateEPc>

    sprintf(tmp_str, "%d", ecuData.cellTemp);
 8001b54:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <main+0x3cc>)
 8001b56:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	490f      	ldr	r1, [pc, #60]	@ (8001b9c <main+0x3d0>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f005 f8f3 	bl	8006d4c <siprintf>
    cellTempField.update(tmp_str);
 8001b66:	463a      	mov	r2, r7
 8001b68:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fa3c 	bl	8000fec <_ZN15UGR_ScreenField6updateEPc>

    sprintf(tmp_str, "%d", ecuData.stateOfCharge);
 8001b74:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <main+0x3cc>)
 8001b76:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	@ 0x4e
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	4907      	ldr	r1, [pc, #28]	@ (8001b9c <main+0x3d0>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f005 f8e3 	bl	8006d4c <siprintf>
    stateOfChargeField.update(tmp_str);
 8001b86:	463a      	mov	r2, r7
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fa2c 	bl	8000fec <_ZN15UGR_ScreenField6updateEPc>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001b94:	e75d      	b.n	8001a52 <main+0x286>
 8001b96:	bf00      	nop
 8001b98:	20000104 	.word	0x20000104
 8001b9c:	08007cd0 	.word	0x08007cd0

08001ba0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0b2      	sub	sp, #200	@ 0xc8
 8001ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001baa:	2244      	movs	r2, #68	@ 0x44
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f005 f92f 	bl	8006e12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	2254      	movs	r2, #84	@ 0x54
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f005 f920 	bl	8006e12 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
 8001be0:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001be2:	f002 f9c1 	bl	8003f68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001be6:	4b4e      	ldr	r3, [pc, #312]	@ (8001d20 <_Z18SystemClock_Configv+0x180>)
 8001be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bec:	4a4c      	ldr	r2, [pc, #304]	@ (8001d20 <_Z18SystemClock_Configv+0x180>)
 8001bee:	f023 0318 	bic.w	r3, r3, #24
 8001bf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001bf6:	2314      	movs	r3, #20
 8001bf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c0e:	2360      	movs	r3, #96	@ 0x60
 8001c10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c14:	2302      	movs	r3, #2
 8001c16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001c26:	2328      	movs	r3, #40	@ 0x28
 8001c28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c2c:	2307      	movs	r3, #7
 8001c2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c32:	2302      	movs	r3, #2
 8001c34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c3e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001c42:	4618      	mov	r0, r3
 8001c44:	f002 fa04 	bl	8004050 <HAL_RCC_OscConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	bf14      	ite	ne
 8001c4e:	2301      	movne	r3, #1
 8001c50:	2300      	moveq	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8001c58:	f000 fa2e 	bl	80020b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	673b      	str	r3, [r7, #112]	@ 0x70
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c60:	2303      	movs	r3, #3
 8001c62:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c72:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001c76:	2104      	movs	r1, #4
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f002 fe09 	bl	8004890 <HAL_RCC_ClockConfig>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bf14      	ite	ne
 8001c84:	2301      	movne	r3, #1
 8001c86:	2300      	moveq	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 8001c8e:	f000 fa13 	bl	80020b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001c92:	2342      	movs	r3, #66	@ 0x42
 8001c94:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f002 fffa 	bl	8004c9c <HAL_RCCEx_PeriphCLKConfig>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	bf14      	ite	ne
 8001cae:	2301      	movne	r3, #1
 8001cb0:	2300      	moveq	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <_Z18SystemClock_Configv+0x11c>
  {
    Error_Handler();
 8001cb8:	f000 f9fe 	bl	80020b8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cbc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001cc0:	f002 f970 	bl	8003fa4 <HAL_PWREx_ControlVoltageScaling>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bf14      	ite	ne
 8001cca:	2301      	movne	r3, #1
 8001ccc:	2300      	moveq	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <_Z18SystemClock_Configv+0x138>
  {
    Error_Handler();
 8001cd4:	f000 f9f0 	bl	80020b8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001cd8:	f003 f9d6 	bl	8005088 <HAL_RCCEx_EnableMSIPLLMode>
  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001cdc:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <_Z18SystemClock_Configv+0x180>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d20 <_Z18SystemClock_Configv+0x180>)
 8001ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <_Z18SystemClock_Configv+0x180>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	683b      	ldr	r3, [r7, #0]
  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8001cf8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001cfc:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 8001d02:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 8001d06:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8001d08:	2322      	movs	r3, #34	@ 0x22
 8001d0a:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8001d0c:	2320      	movs	r3, #32
 8001d0e:	61bb      	str	r3, [r7, #24]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	4618      	mov	r0, r3
 8001d14:	f003 f9c8 	bl	80050a8 <HAL_RCCEx_CRSConfig>
}
 8001d18:	bf00      	nop
 8001d1a:	37c8      	adds	r7, #200	@ 0xc8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40021000 	.word	0x40021000

08001d24 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d28:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <_ZL12MX_CAN1_Initv+0x70>)
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d98 <_ZL12MX_CAN1_Initv+0x74>)
 8001d2c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8001d2e:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <_ZL12MX_CAN1_Initv+0x70>)
 8001d30:	2208      	movs	r2, #8
 8001d32:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d34:	4b17      	ldr	r3, [pc, #92]	@ (8001d94 <_ZL12MX_CAN1_Initv+0x70>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d3a:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <_ZL12MX_CAN1_Initv+0x70>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001d40:	4b14      	ldr	r3, [pc, #80]	@ (8001d94 <_ZL12MX_CAN1_Initv+0x70>)
 8001d42:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8001d46:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d48:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <_ZL12MX_CAN1_Initv+0x70>)
 8001d4a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001d4e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d50:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <_ZL12MX_CAN1_Initv+0x70>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d56:	4b0f      	ldr	r3, [pc, #60]	@ (8001d94 <_ZL12MX_CAN1_Initv+0x70>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <_ZL12MX_CAN1_Initv+0x70>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d62:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <_ZL12MX_CAN1_Initv+0x70>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d68:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <_ZL12MX_CAN1_Initv+0x70>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d6e:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <_ZL12MX_CAN1_Initv+0x70>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d74:	4807      	ldr	r0, [pc, #28]	@ (8001d94 <_ZL12MX_CAN1_Initv+0x70>)
 8001d76:	f000 fdd5 	bl	8002924 <HAL_CAN_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	bf14      	ite	ne
 8001d80:	2301      	movne	r3, #1
 8001d82:	2300      	moveq	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 8001d8a:	f000 f995 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000178 	.word	0x20000178
 8001d98:	40006400 	.word	0x40006400

08001d9c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001da0:	4b22      	ldr	r3, [pc, #136]	@ (8001e2c <_ZL12MX_I2C1_Initv+0x90>)
 8001da2:	4a23      	ldr	r2, [pc, #140]	@ (8001e30 <_ZL12MX_I2C1_Initv+0x94>)
 8001da4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001da6:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <_ZL12MX_I2C1_Initv+0x90>)
 8001da8:	4a22      	ldr	r2, [pc, #136]	@ (8001e34 <_ZL12MX_I2C1_Initv+0x98>)
 8001daa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001dac:	4b1f      	ldr	r3, [pc, #124]	@ (8001e2c <_ZL12MX_I2C1_Initv+0x90>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e2c <_ZL12MX_I2C1_Initv+0x90>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e2c <_ZL12MX_I2C1_Initv+0x90>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001e2c <_ZL12MX_I2C1_Initv+0x90>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <_ZL12MX_I2C1_Initv+0x90>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dca:	4b18      	ldr	r3, [pc, #96]	@ (8001e2c <_ZL12MX_I2C1_Initv+0x90>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dd0:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <_ZL12MX_I2C1_Initv+0x90>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dd6:	4815      	ldr	r0, [pc, #84]	@ (8001e2c <_ZL12MX_I2C1_Initv+0x90>)
 8001dd8:	f001 ffa0 	bl	8003d1c <HAL_I2C_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bf14      	ite	ne
 8001de2:	2301      	movne	r3, #1
 8001de4:	2300      	moveq	r3, #0
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8001dec:	f000 f964 	bl	80020b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001df0:	2100      	movs	r1, #0
 8001df2:	480e      	ldr	r0, [pc, #56]	@ (8001e2c <_ZL12MX_I2C1_Initv+0x90>)
 8001df4:	f002 f821 	bl	8003e3a <HAL_I2CEx_ConfigAnalogFilter>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	bf14      	ite	ne
 8001dfe:	2301      	movne	r3, #1
 8001e00:	2300      	moveq	r3, #0
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8001e08:	f000 f956 	bl	80020b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4807      	ldr	r0, [pc, #28]	@ (8001e2c <_ZL12MX_I2C1_Initv+0x90>)
 8001e10:	f002 f85e 	bl	8003ed0 <HAL_I2CEx_ConfigDigitalFilter>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	bf14      	ite	ne
 8001e1a:	2301      	movne	r3, #1
 8001e1c:	2300      	moveq	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001e24:	f000 f948 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200001a0 	.word	0x200001a0
 8001e30:	40005400 	.word	0x40005400
 8001e34:	10909cec 	.word	0x10909cec

08001e38 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb8 <_ZL12MX_SPI1_Initv+0x80>)
 8001e40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001e44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e50:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001e52:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001e56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e58:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001e64:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001e66:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e72:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e78:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e84:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001e86:	2207      	movs	r2, #7
 8001e88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e90:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001e92:	2208      	movs	r2, #8
 8001e94:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e96:	4807      	ldr	r0, [pc, #28]	@ (8001eb4 <_ZL12MX_SPI1_Initv+0x7c>)
 8001e98:	f003 fa3a 	bl	8005310 <HAL_SPI_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bf14      	ite	ne
 8001ea2:	2301      	movne	r3, #1
 8001ea4:	2300      	moveq	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8001eac:	f000 f904 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	200001ec 	.word	0x200001ec
 8001eb8:	40013000 	.word	0x40013000

08001ebc <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f38 <_ZL12MX_SPI3_Initv+0x7c>)
 8001ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f3c <_ZL12MX_SPI3_Initv+0x80>)
 8001ec4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f38 <_ZL12MX_SPI3_Initv+0x7c>)
 8001ec8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ecc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <_ZL12MX_SPI3_Initv+0x7c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ed4:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <_ZL12MX_SPI3_Initv+0x7c>)
 8001ed6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001eda:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001edc:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <_ZL12MX_SPI3_Initv+0x7c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ee2:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <_ZL12MX_SPI3_Initv+0x7c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001ee8:	4b13      	ldr	r3, [pc, #76]	@ (8001f38 <_ZL12MX_SPI3_Initv+0x7c>)
 8001eea:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001eee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <_ZL12MX_SPI3_Initv+0x7c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <_ZL12MX_SPI3_Initv+0x7c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001efc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <_ZL12MX_SPI3_Initv+0x7c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f02:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <_ZL12MX_SPI3_Initv+0x7c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001f08:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <_ZL12MX_SPI3_Initv+0x7c>)
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <_ZL12MX_SPI3_Initv+0x7c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f14:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <_ZL12MX_SPI3_Initv+0x7c>)
 8001f16:	2208      	movs	r2, #8
 8001f18:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001f1a:	4807      	ldr	r0, [pc, #28]	@ (8001f38 <_ZL12MX_SPI3_Initv+0x7c>)
 8001f1c:	f003 f9f8 	bl	8005310 <HAL_SPI_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bf14      	ite	ne
 8001f26:	2301      	movne	r3, #1
 8001f28:	2300      	moveq	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 8001f30:	f000 f8c2 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000250 	.word	0x20000250
 8001f3c:	40003c00 	.word	0x40003c00

08001f40 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f44:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001f46:	4a17      	ldr	r2, [pc, #92]	@ (8001fa4 <_ZL19MX_USART2_UART_Initv+0x64>)
 8001f48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f4a:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001f4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f52:	4b13      	ldr	r3, [pc, #76]	@ (8001fa0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f58:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f5e:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f64:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001f66:	220c      	movs	r2, #12
 8001f68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f70:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f76:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f7c:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f82:	4807      	ldr	r0, [pc, #28]	@ (8001fa0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001f84:	f004 f8dc 	bl	8006140 <HAL_UART_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bf14      	ite	ne
 8001f8e:	2301      	movne	r3, #1
 8001f90:	2300      	moveq	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8001f98:	f000 f88e 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	200002fc 	.word	0x200002fc
 8001fa4:	40004400 	.word	0x40004400

08001fa8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fae:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <_ZL11MX_DMA_Initv+0x48>)
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff0 <_ZL11MX_DMA_Initv+0x48>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001fba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <_ZL11MX_DMA_Initv+0x48>)
 8001fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2100      	movs	r1, #0
 8001fca:	200d      	movs	r0, #13
 8001fcc:	f001 faf5 	bl	80035ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001fd0:	200d      	movs	r0, #13
 8001fd2:	f001 fb0e 	bl	80035f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2010      	movs	r0, #16
 8001fdc:	f001 faed 	bl	80035ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001fe0:	2010      	movs	r0, #16
 8001fe2:	f001 fb06 	bl	80035f2 <HAL_NVIC_EnableIRQ>

}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800200a:	4b29      	ldr	r3, [pc, #164]	@ (80020b0 <_ZL12MX_GPIO_Initv+0xbc>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200e:	4a28      	ldr	r2, [pc, #160]	@ (80020b0 <_ZL12MX_GPIO_Initv+0xbc>)
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002016:	4b26      	ldr	r3, [pc, #152]	@ (80020b0 <_ZL12MX_GPIO_Initv+0xbc>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	4b23      	ldr	r3, [pc, #140]	@ (80020b0 <_ZL12MX_GPIO_Initv+0xbc>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	4a22      	ldr	r2, [pc, #136]	@ (80020b0 <_ZL12MX_GPIO_Initv+0xbc>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800202e:	4b20      	ldr	r3, [pc, #128]	@ (80020b0 <_ZL12MX_GPIO_Initv+0xbc>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	4b1d      	ldr	r3, [pc, #116]	@ (80020b0 <_ZL12MX_GPIO_Initv+0xbc>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203e:	4a1c      	ldr	r2, [pc, #112]	@ (80020b0 <_ZL12MX_GPIO_Initv+0xbc>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002046:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <_ZL12MX_GPIO_Initv+0xbc>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|FLASH_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002058:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800205c:	f001 fe46 	bl	8003cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	2102      	movs	r1, #2
 8002064:	4813      	ldr	r0, [pc, #76]	@ (80020b4 <_ZL12MX_GPIO_Initv+0xc0>)
 8002066:	f001 fe41 	bl	8003cec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_DC_Pin FLASH_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|FLASH_CS_Pin|LCD_CS_Pin;
 800206a:	f44f 7385 	mov.w	r3, #266	@ 0x10a
 800206e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002070:	2301      	movs	r3, #1
 8002072:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	4619      	mov	r1, r3
 8002082:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002086:	f001 fcc7 	bl	8003a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800208a:	2302      	movs	r3, #2
 800208c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208e:	2301      	movs	r3, #1
 8002090:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800209a:	f107 030c 	add.w	r3, r7, #12
 800209e:	4619      	mov	r1, r3
 80020a0:	4804      	ldr	r0, [pc, #16]	@ (80020b4 <_ZL12MX_GPIO_Initv+0xc0>)
 80020a2:	f001 fcb9 	bl	8003a18 <HAL_GPIO_Init>

}
 80020a6:	bf00      	nop
 80020a8:	3720      	adds	r7, #32
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	48000400 	.word	0x48000400

080020b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <_Z41__static_initialization_and_destruction_0ii>:
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d107      	bne.n	80020e8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020de:	4293      	cmp	r3, r2
 80020e0:	d102      	bne.n	80020e8 <_Z41__static_initialization_and_destruction_0ii+0x20>
S25FL flash;
 80020e2:	4809      	ldr	r0, [pc, #36]	@ (8002108 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80020e4:	f7fe fdde 	bl	8000ca4 <_ZN5S25FLC1Ev>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d107      	bne.n	80020fe <_Z41__static_initialization_and_destruction_0ii+0x36>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d102      	bne.n	80020fe <_Z41__static_initialization_and_destruction_0ii+0x36>
 80020f8:	4803      	ldr	r0, [pc, #12]	@ (8002108 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80020fa:	f7fe fde7 	bl	8000ccc <_ZN5S25FLD1Ev>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200003c4 	.word	0x200003c4

0800210c <_GLOBAL__sub_I_buf>:
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
 8002110:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002114:	2001      	movs	r0, #1
 8002116:	f7ff ffd7 	bl	80020c8 <_Z41__static_initialization_and_destruction_0ii>
 800211a:	bd80      	pop	{r7, pc}

0800211c <_GLOBAL__sub_D_buf>:
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
 8002120:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002124:	2000      	movs	r0, #0
 8002126:	f7ff ffcf 	bl	80020c8 <_Z41__static_initialization_and_destruction_0ii>
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <HAL_MspInit+0x44>)
 8002134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002136:	4a0e      	ldr	r2, [pc, #56]	@ (8002170 <HAL_MspInit+0x44>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6613      	str	r3, [r2, #96]	@ 0x60
 800213e:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <HAL_MspInit+0x44>)
 8002140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <HAL_MspInit+0x44>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	4a08      	ldr	r2, [pc, #32]	@ (8002170 <HAL_MspInit+0x44>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002154:	6593      	str	r3, [r2, #88]	@ 0x58
 8002156:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_MspInit+0x44>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000

08002174 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	@ 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1c      	ldr	r2, [pc, #112]	@ (8002204 <HAL_CAN_MspInit+0x90>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d131      	bne.n	80021fa <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002196:	4b1c      	ldr	r3, [pc, #112]	@ (8002208 <HAL_CAN_MspInit+0x94>)
 8002198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219a:	4a1b      	ldr	r2, [pc, #108]	@ (8002208 <HAL_CAN_MspInit+0x94>)
 800219c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a2:	4b19      	ldr	r3, [pc, #100]	@ (8002208 <HAL_CAN_MspInit+0x94>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	4b16      	ldr	r3, [pc, #88]	@ (8002208 <HAL_CAN_MspInit+0x94>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b2:	4a15      	ldr	r2, [pc, #84]	@ (8002208 <HAL_CAN_MspInit+0x94>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ba:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <HAL_CAN_MspInit+0x94>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80021c6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80021ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80021d8:	2309      	movs	r3, #9
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021e6:	f001 fc17 	bl	8003a18 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2100      	movs	r1, #0
 80021ee:	2014      	movs	r0, #20
 80021f0:	f001 f9e3 	bl	80035ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80021f4:	2014      	movs	r0, #20
 80021f6:	f001 f9fc 	bl	80035f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80021fa:	bf00      	nop
 80021fc:	3728      	adds	r7, #40	@ 0x28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40006400 	.word	0x40006400
 8002208:	40021000 	.word	0x40021000

0800220c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	@ 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a18      	ldr	r2, [pc, #96]	@ (800228c <HAL_I2C_MspInit+0x80>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d129      	bne.n	8002282 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	4b18      	ldr	r3, [pc, #96]	@ (8002290 <HAL_I2C_MspInit+0x84>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002232:	4a17      	ldr	r2, [pc, #92]	@ (8002290 <HAL_I2C_MspInit+0x84>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800223a:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <HAL_I2C_MspInit+0x84>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002246:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800224a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800224c:	2312      	movs	r3, #18
 800224e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002250:	2301      	movs	r3, #1
 8002252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002254:	2303      	movs	r3, #3
 8002256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002258:	2304      	movs	r3, #4
 800225a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	4619      	mov	r1, r3
 8002262:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002266:	f001 fbd7 	bl	8003a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800226a:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <HAL_I2C_MspInit+0x84>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	4a08      	ldr	r2, [pc, #32]	@ (8002290 <HAL_I2C_MspInit+0x84>)
 8002270:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002274:	6593      	str	r3, [r2, #88]	@ 0x58
 8002276:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <HAL_I2C_MspInit+0x84>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002282:	bf00      	nop
 8002284:	3728      	adds	r7, #40	@ 0x28
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40005400 	.word	0x40005400
 8002290:	40021000 	.word	0x40021000

08002294 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08e      	sub	sp, #56	@ 0x38
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a5f      	ldr	r2, [pc, #380]	@ (8002430 <HAL_SPI_MspInit+0x19c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d16e      	bne.n	8002394 <HAL_SPI_MspInit+0x100>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80022b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80022bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80022c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80022c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ca:	623b      	str	r3, [r7, #32]
 80022cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	4b59      	ldr	r3, [pc, #356]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d2:	4a58      	ldr	r2, [pc, #352]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022da:	4b56      	ldr	r3, [pc, #344]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e6:	4b53      	ldr	r3, [pc, #332]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ea:	4a52      	ldr	r2, [pc, #328]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022f2:	4b50      	ldr	r3, [pc, #320]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	69bb      	ldr	r3, [r7, #24]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022fe:	23e0      	movs	r3, #224	@ 0xe0
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230a:	2303      	movs	r3, #3
 800230c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800230e:	2305      	movs	r3, #5
 8002310:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002316:	4619      	mov	r1, r3
 8002318:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800231c:	f001 fb7c 	bl	8003a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002320:	2301      	movs	r3, #1
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002330:	2305      	movs	r3, #5
 8002332:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002338:	4619      	mov	r1, r3
 800233a:	483f      	ldr	r0, [pc, #252]	@ (8002438 <HAL_SPI_MspInit+0x1a4>)
 800233c:	f001 fb6c 	bl	8003a18 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002340:	4b3e      	ldr	r3, [pc, #248]	@ (800243c <HAL_SPI_MspInit+0x1a8>)
 8002342:	4a3f      	ldr	r2, [pc, #252]	@ (8002440 <HAL_SPI_MspInit+0x1ac>)
 8002344:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002346:	4b3d      	ldr	r3, [pc, #244]	@ (800243c <HAL_SPI_MspInit+0x1a8>)
 8002348:	2201      	movs	r2, #1
 800234a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800234c:	4b3b      	ldr	r3, [pc, #236]	@ (800243c <HAL_SPI_MspInit+0x1a8>)
 800234e:	2210      	movs	r2, #16
 8002350:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002352:	4b3a      	ldr	r3, [pc, #232]	@ (800243c <HAL_SPI_MspInit+0x1a8>)
 8002354:	2200      	movs	r2, #0
 8002356:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002358:	4b38      	ldr	r3, [pc, #224]	@ (800243c <HAL_SPI_MspInit+0x1a8>)
 800235a:	2280      	movs	r2, #128	@ 0x80
 800235c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800235e:	4b37      	ldr	r3, [pc, #220]	@ (800243c <HAL_SPI_MspInit+0x1a8>)
 8002360:	2200      	movs	r2, #0
 8002362:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002364:	4b35      	ldr	r3, [pc, #212]	@ (800243c <HAL_SPI_MspInit+0x1a8>)
 8002366:	2200      	movs	r2, #0
 8002368:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800236a:	4b34      	ldr	r3, [pc, #208]	@ (800243c <HAL_SPI_MspInit+0x1a8>)
 800236c:	2200      	movs	r2, #0
 800236e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002370:	4b32      	ldr	r3, [pc, #200]	@ (800243c <HAL_SPI_MspInit+0x1a8>)
 8002372:	2200      	movs	r2, #0
 8002374:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002376:	4831      	ldr	r0, [pc, #196]	@ (800243c <HAL_SPI_MspInit+0x1a8>)
 8002378:	f001 f956 	bl	8003628 <HAL_DMA_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8002382:	f7ff fe99 	bl	80020b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a2c      	ldr	r2, [pc, #176]	@ (800243c <HAL_SPI_MspInit+0x1a8>)
 800238a:	655a      	str	r2, [r3, #84]	@ 0x54
 800238c:	4a2b      	ldr	r2, [pc, #172]	@ (800243c <HAL_SPI_MspInit+0x1a8>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002392:	e049      	b.n	8002428 <HAL_SPI_MspInit+0x194>
  else if(hspi->Instance==SPI3)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a2a      	ldr	r2, [pc, #168]	@ (8002444 <HAL_SPI_MspInit+0x1b0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d144      	bne.n	8002428 <HAL_SPI_MspInit+0x194>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800239e:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a2:	4a24      	ldr	r2, [pc, #144]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80023a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80023aa:	4b22      	ldr	r3, [pc, #136]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ce:	4b19      	ldr	r3, [pc, #100]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d2:	4a18      	ldr	r2, [pc, #96]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023da:	4b16      	ldr	r3, [pc, #88]	@ (8002434 <HAL_SPI_MspInit+0x1a0>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023e6:	2310      	movs	r3, #16
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023f6:	2306      	movs	r3, #6
 80023f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023fe:	4619      	mov	r1, r3
 8002400:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002404:	f001 fb08 	bl	8003a18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002408:	2338      	movs	r3, #56	@ 0x38
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002414:	2303      	movs	r3, #3
 8002416:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002418:	2306      	movs	r3, #6
 800241a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002420:	4619      	mov	r1, r3
 8002422:	4805      	ldr	r0, [pc, #20]	@ (8002438 <HAL_SPI_MspInit+0x1a4>)
 8002424:	f001 faf8 	bl	8003a18 <HAL_GPIO_Init>
}
 8002428:	bf00      	nop
 800242a:	3738      	adds	r7, #56	@ 0x38
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40013000 	.word	0x40013000
 8002434:	40021000 	.word	0x40021000
 8002438:	48000400 	.word	0x48000400
 800243c:	200002b4 	.word	0x200002b4
 8002440:	40020030 	.word	0x40020030
 8002444:	40003c00 	.word	0x40003c00

08002448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	@ 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a35      	ldr	r2, [pc, #212]	@ (800253c <HAL_UART_MspInit+0xf4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d163      	bne.n	8002532 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800246a:	4b35      	ldr	r3, [pc, #212]	@ (8002540 <HAL_UART_MspInit+0xf8>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246e:	4a34      	ldr	r2, [pc, #208]	@ (8002540 <HAL_UART_MspInit+0xf8>)
 8002470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002474:	6593      	str	r3, [r2, #88]	@ 0x58
 8002476:	4b32      	ldr	r3, [pc, #200]	@ (8002540 <HAL_UART_MspInit+0xf8>)
 8002478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002482:	4b2f      	ldr	r3, [pc, #188]	@ (8002540 <HAL_UART_MspInit+0xf8>)
 8002484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002486:	4a2e      	ldr	r2, [pc, #184]	@ (8002540 <HAL_UART_MspInit+0xf8>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800248e:	4b2c      	ldr	r3, [pc, #176]	@ (8002540 <HAL_UART_MspInit+0xf8>)
 8002490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800249a:	2304      	movs	r3, #4
 800249c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a6:	2303      	movs	r3, #3
 80024a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024aa:	2307      	movs	r3, #7
 80024ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024b8:	f001 faae 	bl	8003a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80024bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ca:	2303      	movs	r3, #3
 80024cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80024ce:	2303      	movs	r3, #3
 80024d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80024d2:	f107 0314 	add.w	r3, r7, #20
 80024d6:	4619      	mov	r1, r3
 80024d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024dc:	f001 fa9c 	bl	8003a18 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80024e0:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <HAL_UART_MspInit+0xfc>)
 80024e2:	4a19      	ldr	r2, [pc, #100]	@ (8002548 <HAL_UART_MspInit+0x100>)
 80024e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80024e6:	4b17      	ldr	r3, [pc, #92]	@ (8002544 <HAL_UART_MspInit+0xfc>)
 80024e8:	2202      	movs	r2, #2
 80024ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024ec:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <HAL_UART_MspInit+0xfc>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024f2:	4b14      	ldr	r3, [pc, #80]	@ (8002544 <HAL_UART_MspInit+0xfc>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024f8:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <HAL_UART_MspInit+0xfc>)
 80024fa:	2280      	movs	r2, #128	@ 0x80
 80024fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024fe:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <HAL_UART_MspInit+0xfc>)
 8002500:	2200      	movs	r2, #0
 8002502:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002504:	4b0f      	ldr	r3, [pc, #60]	@ (8002544 <HAL_UART_MspInit+0xfc>)
 8002506:	2200      	movs	r2, #0
 8002508:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800250a:	4b0e      	ldr	r3, [pc, #56]	@ (8002544 <HAL_UART_MspInit+0xfc>)
 800250c:	2220      	movs	r2, #32
 800250e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002510:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <HAL_UART_MspInit+0xfc>)
 8002512:	2200      	movs	r2, #0
 8002514:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002516:	480b      	ldr	r0, [pc, #44]	@ (8002544 <HAL_UART_MspInit+0xfc>)
 8002518:	f001 f886 	bl	8003628 <HAL_DMA_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8002522:	f7ff fdc9 	bl	80020b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a06      	ldr	r2, [pc, #24]	@ (8002544 <HAL_UART_MspInit+0xfc>)
 800252a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800252c:	4a05      	ldr	r2, [pc, #20]	@ (8002544 <HAL_UART_MspInit+0xfc>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002532:	bf00      	nop
 8002534:	3728      	adds	r7, #40	@ 0x28
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40004400 	.word	0x40004400
 8002540:	40021000 	.word	0x40021000
 8002544:	2000037c 	.word	0x2000037c
 8002548:	4002006c 	.word	0x4002006c

0800254c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255e:	bf00      	nop
 8002560:	e7fd      	b.n	800255e <HardFault_Handler+0x4>

08002562 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002566:	bf00      	nop
 8002568:	e7fd      	b.n	8002566 <MemManage_Handler+0x4>

0800256a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800256e:	bf00      	nop
 8002570:	e7fd      	b.n	800256e <BusFault_Handler+0x4>

08002572 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002576:	bf00      	nop
 8002578:	e7fd      	b.n	8002576 <UsageFault_Handler+0x4>

0800257a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a8:	f000 f978 	bl	800289c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80025b4:	4802      	ldr	r0, [pc, #8]	@ (80025c0 <DMA1_Channel3_IRQHandler+0x10>)
 80025b6:	f001 f94f 	bl	8003858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200002b4 	.word	0x200002b4

080025c4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80025c8:	4802      	ldr	r0, [pc, #8]	@ (80025d4 <DMA1_Channel6_IRQHandler+0x10>)
 80025ca:	f001 f945 	bl	8003858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000037c 	.word	0x2000037c

080025d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80025dc:	4802      	ldr	r0, [pc, #8]	@ (80025e8 <CAN1_RX0_IRQHandler+0x10>)
 80025de:	f000 fce2 	bl	8002fa6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000178 	.word	0x20000178

080025ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e00a      	b.n	8002614 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025fe:	f3af 8000 	nop.w
 8002602:	4601      	mov	r1, r0
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	60ba      	str	r2, [r7, #8]
 800260a:	b2ca      	uxtb	r2, r1
 800260c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3301      	adds	r3, #1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	429a      	cmp	r2, r3
 800261a:	dbf0      	blt.n	80025fe <_read+0x12>
	}

return len;
 800261c:	687b      	ldr	r3, [r7, #4]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b086      	sub	sp, #24
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	e009      	b.n	800264c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	60ba      	str	r2, [r7, #8]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3301      	adds	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	dbf1      	blt.n	8002638 <_write+0x12>
	}
	return len;
 8002654:	687b      	ldr	r3, [r7, #4]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <_close>:

int _close(int file)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
	return -1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002686:	605a      	str	r2, [r3, #4]
	return 0;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <_isatty>:

int _isatty(int file)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
	return 1;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
	return 0;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d0:	4a14      	ldr	r2, [pc, #80]	@ (8002724 <_sbrk+0x5c>)
 80026d2:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <_sbrk+0x60>)
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026dc:	4b13      	ldr	r3, [pc, #76]	@ (800272c <_sbrk+0x64>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <_sbrk+0x64>)
 80026e6:	4a12      	ldr	r2, [pc, #72]	@ (8002730 <_sbrk+0x68>)
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ea:	4b10      	ldr	r3, [pc, #64]	@ (800272c <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d207      	bcs.n	8002708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f8:	f004 fbfc 	bl	8006ef4 <__errno>
 80026fc:	4603      	mov	r3, r0
 80026fe:	220c      	movs	r2, #12
 8002700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	e009      	b.n	800271c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002708:	4b08      	ldr	r3, [pc, #32]	@ (800272c <_sbrk+0x64>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270e:	4b07      	ldr	r3, [pc, #28]	@ (800272c <_sbrk+0x64>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	4a05      	ldr	r2, [pc, #20]	@ (800272c <_sbrk+0x64>)
 8002718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271a:	68fb      	ldr	r3, [r7, #12]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20010000 	.word	0x20010000
 8002728:	00000400 	.word	0x00000400
 800272c:	20000404 	.word	0x20000404
 8002730:	20000558 	.word	0x20000558

08002734 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002738:	4b17      	ldr	r3, [pc, #92]	@ (8002798 <SystemInit+0x64>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273e:	4a16      	ldr	r2, [pc, #88]	@ (8002798 <SystemInit+0x64>)
 8002740:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002744:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002748:	4b14      	ldr	r3, [pc, #80]	@ (800279c <SystemInit+0x68>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a13      	ldr	r2, [pc, #76]	@ (800279c <SystemInit+0x68>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002754:	4b11      	ldr	r3, [pc, #68]	@ (800279c <SystemInit+0x68>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800275a:	4b10      	ldr	r3, [pc, #64]	@ (800279c <SystemInit+0x68>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a0f      	ldr	r2, [pc, #60]	@ (800279c <SystemInit+0x68>)
 8002760:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002764:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002768:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800276a:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <SystemInit+0x68>)
 800276c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002770:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002772:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <SystemInit+0x68>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a09      	ldr	r2, [pc, #36]	@ (800279c <SystemInit+0x68>)
 8002778:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800277c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800277e:	4b07      	ldr	r3, [pc, #28]	@ (800279c <SystemInit+0x68>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002784:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <SystemInit+0x64>)
 8002786:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800278a:	609a      	str	r2, [r3, #8]
#endif
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00
 800279c:	40021000 	.word	0x40021000

080027a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027a4:	f7ff ffc6 	bl	8002734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80027a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80027aa:	e003      	b.n	80027b4 <LoopCopyDataInit>

080027ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80027ac:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80027ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80027b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80027b2:	3104      	adds	r1, #4

080027b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027b4:	480a      	ldr	r0, [pc, #40]	@ (80027e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80027b6:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80027b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80027ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80027bc:	d3f6      	bcc.n	80027ac <CopyDataInit>
	ldr	r2, =_sbss
 80027be:	4a0a      	ldr	r2, [pc, #40]	@ (80027e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80027c0:	e002      	b.n	80027c8 <LoopFillZerobss>

080027c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80027c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80027c4:	f842 3b04 	str.w	r3, [r2], #4

080027c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80027c8:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <LoopForever+0x16>)
	cmp	r2, r3
 80027ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80027cc:	d3f9      	bcc.n	80027c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ce:	f004 fb97 	bl	8006f00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027d2:	f7fe fffb 	bl	80017cc <main>

080027d6 <LoopForever>:

LoopForever:
    b LoopForever
 80027d6:	e7fe      	b.n	80027d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027d8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80027dc:	0800eb80 	.word	0x0800eb80
	ldr	r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027e4:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 80027e8:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 80027ec:	20000558 	.word	0x20000558

080027f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027f0:	e7fe      	b.n	80027f0 <ADC1_IRQHandler>

080027f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027fc:	2003      	movs	r0, #3
 80027fe:	f000 fed1 	bl	80035a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002802:	2000      	movs	r0, #0
 8002804:	f000 f80e 	bl	8002824 <HAL_InitTick>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	71fb      	strb	r3, [r7, #7]
 8002812:	e001      	b.n	8002818 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002814:	f7ff fc8a 	bl	800212c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002818:	79fb      	ldrb	r3, [r7, #7]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002830:	4b17      	ldr	r3, [pc, #92]	@ (8002890 <HAL_InitTick+0x6c>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d023      	beq.n	8002880 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002838:	4b16      	ldr	r3, [pc, #88]	@ (8002894 <HAL_InitTick+0x70>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b14      	ldr	r3, [pc, #80]	@ (8002890 <HAL_InitTick+0x6c>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4619      	mov	r1, r3
 8002842:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002846:	fbb3 f3f1 	udiv	r3, r3, r1
 800284a:	fbb2 f3f3 	udiv	r3, r2, r3
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fedd 	bl	800360e <HAL_SYSTICK_Config>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10f      	bne.n	800287a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b0f      	cmp	r3, #15
 800285e:	d809      	bhi.n	8002874 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002860:	2200      	movs	r2, #0
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	f04f 30ff 	mov.w	r0, #4294967295
 8002868:	f000 fea7 	bl	80035ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800286c:	4a0a      	ldr	r2, [pc, #40]	@ (8002898 <HAL_InitTick+0x74>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e007      	b.n	8002884 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
 8002878:	e004      	b.n	8002884 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
 800287e:	e001      	b.n	8002884 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	2000000c 	.word	0x2000000c
 8002894:	20000004 	.word	0x20000004
 8002898:	20000008 	.word	0x20000008

0800289c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028a0:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <HAL_IncTick+0x20>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_IncTick+0x24>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	4a04      	ldr	r2, [pc, #16]	@ (80028c0 <HAL_IncTick+0x24>)
 80028ae:	6013      	str	r3, [r2, #0]
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	2000000c 	.word	0x2000000c
 80028c0:	20000408 	.word	0x20000408

080028c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return uwTick;
 80028c8:	4b03      	ldr	r3, [pc, #12]	@ (80028d8 <HAL_GetTick+0x14>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20000408 	.word	0x20000408

080028dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e4:	f7ff ffee 	bl	80028c4 <HAL_GetTick>
 80028e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f4:	d005      	beq.n	8002902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <HAL_Delay+0x44>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002902:	bf00      	nop
 8002904:	f7ff ffde 	bl	80028c4 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	429a      	cmp	r2, r3
 8002912:	d8f7      	bhi.n	8002904 <HAL_Delay+0x28>
  {
  }
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	2000000c 	.word	0x2000000c

08002924 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e0ed      	b.n	8002b12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff fc16 	bl	8002174 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0202 	bic.w	r2, r2, #2
 8002956:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002958:	f7ff ffb4 	bl	80028c4 <HAL_GetTick>
 800295c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800295e:	e012      	b.n	8002986 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002960:	f7ff ffb0 	bl	80028c4 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b0a      	cmp	r3, #10
 800296c:	d90b      	bls.n	8002986 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2205      	movs	r2, #5
 800297e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0c5      	b.n	8002b12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1e5      	bne.n	8002960 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029a4:	f7ff ff8e 	bl	80028c4 <HAL_GetTick>
 80029a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029aa:	e012      	b.n	80029d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029ac:	f7ff ff8a 	bl	80028c4 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b0a      	cmp	r3, #10
 80029b8:	d90b      	bls.n	80029d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2205      	movs	r2, #5
 80029ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e09f      	b.n	8002b12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0e5      	beq.n	80029ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7e1b      	ldrb	r3, [r3, #24]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d108      	bne.n	80029fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e007      	b.n	8002a0a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	7e5b      	ldrb	r3, [r3, #25]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d108      	bne.n	8002a24 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e007      	b.n	8002a34 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	7e9b      	ldrb	r3, [r3, #26]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d108      	bne.n	8002a4e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0220 	orr.w	r2, r2, #32
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	e007      	b.n	8002a5e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0220 	bic.w	r2, r2, #32
 8002a5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	7edb      	ldrb	r3, [r3, #27]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d108      	bne.n	8002a78 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0210 	bic.w	r2, r2, #16
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	e007      	b.n	8002a88 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0210 	orr.w	r2, r2, #16
 8002a86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	7f1b      	ldrb	r3, [r3, #28]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d108      	bne.n	8002aa2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0208 	orr.w	r2, r2, #8
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e007      	b.n	8002ab2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0208 	bic.w	r2, r2, #8
 8002ab0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	7f5b      	ldrb	r3, [r3, #29]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d108      	bne.n	8002acc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0204 	orr.w	r2, r2, #4
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	e007      	b.n	8002adc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0204 	bic.w	r2, r2, #4
 8002ada:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	ea42 0103 	orr.w	r1, r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	1e5a      	subs	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b087      	sub	sp, #28
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b30:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b32:	7cfb      	ldrb	r3, [r7, #19]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d003      	beq.n	8002b40 <HAL_CAN_ConfigFilter+0x26>
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	f040 80aa 	bne.w	8002c94 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	2201      	movs	r2, #1
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d123      	bne.n	8002bc2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	401a      	ands	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	3248      	adds	r2, #72	@ 0x48
 8002ba2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bb6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bb8:	6979      	ldr	r1, [r7, #20]
 8002bba:	3348      	adds	r3, #72	@ 0x48
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	440b      	add	r3, r1
 8002bc0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d122      	bne.n	8002c10 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002bea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	3248      	adds	r2, #72	@ 0x48
 8002bf0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c06:	6979      	ldr	r1, [r7, #20]
 8002c08:	3348      	adds	r3, #72	@ 0x48
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d109      	bne.n	8002c2c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	401a      	ands	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002c2a:	e007      	b.n	8002c3c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	401a      	ands	r2, r3
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002c56:	e007      	b.n	8002c68 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	431a      	orrs	r2, r3
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d107      	bne.n	8002c80 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002c86:	f023 0201 	bic.w	r2, r3, #1
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e006      	b.n	8002ca2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
  }
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d12e      	bne.n	8002d20 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cda:	f7ff fdf3 	bl	80028c4 <HAL_GetTick>
 8002cde:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ce0:	e012      	b.n	8002d08 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ce2:	f7ff fdef 	bl	80028c4 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b0a      	cmp	r3, #10
 8002cee:	d90b      	bls.n	8002d08 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2205      	movs	r2, #5
 8002d00:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e012      	b.n	8002d2e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1e5      	bne.n	8002ce2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e006      	b.n	8002d2e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
  }
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d36:	b480      	push	{r7}
 8002d38:	b087      	sub	sp, #28
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d4a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d003      	beq.n	8002d5a <HAL_CAN_GetRxMessage+0x24>
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	f040 80f3 	bne.w	8002f40 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10e      	bne.n	8002d7e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d116      	bne.n	8002d9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e0e7      	b.n	8002f4e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0d8      	b.n	8002f4e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	331b      	adds	r3, #27
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	4413      	add	r3, r2
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0204 	and.w	r2, r3, #4
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10c      	bne.n	8002dd4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	331b      	adds	r3, #27
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	4413      	add	r3, r2
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	0d5b      	lsrs	r3, r3, #21
 8002dca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	e00b      	b.n	8002dec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	331b      	adds	r3, #27
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	4413      	add	r3, r2
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	08db      	lsrs	r3, r3, #3
 8002de4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	331b      	adds	r3, #27
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4413      	add	r3, r2
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0202 	and.w	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	331b      	adds	r3, #27
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3304      	adds	r3, #4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 020f 	and.w	r2, r3, #15
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	331b      	adds	r3, #27
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	4413      	add	r3, r2
 8002e26:	3304      	adds	r3, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0a1b      	lsrs	r3, r3, #8
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	331b      	adds	r3, #27
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3304      	adds	r3, #4
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	0c1b      	lsrs	r3, r3, #16
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	0a1a      	lsrs	r2, r3, #8
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	3301      	adds	r3, #1
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	0c1a      	lsrs	r2, r3, #16
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	3302      	adds	r3, #2
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0e1a      	lsrs	r2, r3, #24
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	3303      	adds	r3, #3
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	0a1a      	lsrs	r2, r3, #8
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	3305      	adds	r3, #5
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0c1a      	lsrs	r2, r3, #16
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	3306      	adds	r3, #6
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	0e1a      	lsrs	r2, r3, #24
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	3307      	adds	r3, #7
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d108      	bne.n	8002f2c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0220 	orr.w	r2, r2, #32
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	e007      	b.n	8002f3c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0220 	orr.w	r2, r2, #32
 8002f3a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e006      	b.n	8002f4e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f44:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b085      	sub	sp, #20
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f6a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d002      	beq.n	8002f78 <HAL_CAN_ActivateNotification+0x1e>
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d109      	bne.n	8002f8c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6959      	ldr	r1, [r3, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e006      	b.n	8002f9a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
  }
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b08a      	sub	sp, #40	@ 0x28
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d07c      	beq.n	80030e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d023      	beq.n	800303e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f983 	bl	8003314 <HAL_CAN_TxMailbox0CompleteCallback>
 800300e:	e016      	b.n	800303e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d004      	beq.n	8003024 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
 8003022:	e00c      	b.n	800303e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d004      	beq.n	8003038 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
 8003036:	e002      	b.n	800303e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f989 	bl	8003350 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d024      	beq.n	8003092 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003050:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f963 	bl	8003328 <HAL_CAN_TxMailbox1CompleteCallback>
 8003062:	e016      	b.n	8003092 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306a:	2b00      	cmp	r3, #0
 800306c:	d004      	beq.n	8003078 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003074:	627b      	str	r3, [r7, #36]	@ 0x24
 8003076:	e00c      	b.n	8003092 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003088:	627b      	str	r3, [r7, #36]	@ 0x24
 800308a:	e002      	b.n	8003092 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f969 	bl	8003364 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d024      	beq.n	80030e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80030a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f943 	bl	800333c <HAL_CAN_TxMailbox2CompleteCallback>
 80030b6:	e016      	b.n	80030e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d004      	beq.n	80030cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ca:	e00c      	b.n	80030e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d004      	beq.n	80030e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80030de:	e002      	b.n	80030e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f949 	bl	8003378 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00c      	beq.n	800310a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003100:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2210      	movs	r2, #16
 8003108:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00b      	beq.n	800312c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d006      	beq.n	800312c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2208      	movs	r2, #8
 8003124:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f930 	bl	800338c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7fe fa23 	bl	8001590 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00c      	beq.n	800316e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2210      	movs	r2, #16
 800316c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00b      	beq.n	8003190 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d006      	beq.n	8003190 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2208      	movs	r2, #8
 8003188:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f912 	bl	80033b4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f8f9 	bl	80033a0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00b      	beq.n	80031d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d006      	beq.n	80031d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2210      	movs	r2, #16
 80031c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f8fc 	bl	80033c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d006      	beq.n	80031f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2208      	movs	r2, #8
 80031ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f8f5 	bl	80033dc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d07b      	beq.n	80032f4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	d072      	beq.n	80032ec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	f043 0302 	orr.w	r3, r3, #2
 800323c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003260:	2b00      	cmp	r3, #0
 8003262:	d043      	beq.n	80032ec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800326a:	2b00      	cmp	r3, #0
 800326c:	d03e      	beq.n	80032ec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003274:	2b60      	cmp	r3, #96	@ 0x60
 8003276:	d02b      	beq.n	80032d0 <HAL_CAN_IRQHandler+0x32a>
 8003278:	2b60      	cmp	r3, #96	@ 0x60
 800327a:	d82e      	bhi.n	80032da <HAL_CAN_IRQHandler+0x334>
 800327c:	2b50      	cmp	r3, #80	@ 0x50
 800327e:	d022      	beq.n	80032c6 <HAL_CAN_IRQHandler+0x320>
 8003280:	2b50      	cmp	r3, #80	@ 0x50
 8003282:	d82a      	bhi.n	80032da <HAL_CAN_IRQHandler+0x334>
 8003284:	2b40      	cmp	r3, #64	@ 0x40
 8003286:	d019      	beq.n	80032bc <HAL_CAN_IRQHandler+0x316>
 8003288:	2b40      	cmp	r3, #64	@ 0x40
 800328a:	d826      	bhi.n	80032da <HAL_CAN_IRQHandler+0x334>
 800328c:	2b30      	cmp	r3, #48	@ 0x30
 800328e:	d010      	beq.n	80032b2 <HAL_CAN_IRQHandler+0x30c>
 8003290:	2b30      	cmp	r3, #48	@ 0x30
 8003292:	d822      	bhi.n	80032da <HAL_CAN_IRQHandler+0x334>
 8003294:	2b10      	cmp	r3, #16
 8003296:	d002      	beq.n	800329e <HAL_CAN_IRQHandler+0x2f8>
 8003298:	2b20      	cmp	r3, #32
 800329a:	d005      	beq.n	80032a8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800329c:	e01d      	b.n	80032da <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	f043 0308 	orr.w	r3, r3, #8
 80032a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032a6:	e019      	b.n	80032dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032aa:	f043 0310 	orr.w	r3, r3, #16
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032b0:	e014      	b.n	80032dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80032b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b4:	f043 0320 	orr.w	r3, r3, #32
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032ba:	e00f      	b.n	80032dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032c4:	e00a      	b.n	80032dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032ce:	e005      	b.n	80032dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032d8:	e000      	b.n	80032dc <HAL_CAN_IRQHandler+0x336>
            break;
 80032da:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80032ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2204      	movs	r2, #4
 80032f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80032f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f872 	bl	80033f0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800330c:	bf00      	nop
 800330e:	3728      	adds	r7, #40	@ 0x28
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003414:	4b0c      	ldr	r3, [pc, #48]	@ (8003448 <__NVIC_SetPriorityGrouping+0x44>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003420:	4013      	ands	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800342c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003436:	4a04      	ldr	r2, [pc, #16]	@ (8003448 <__NVIC_SetPriorityGrouping+0x44>)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	60d3      	str	r3, [r2, #12]
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003450:	4b04      	ldr	r3, [pc, #16]	@ (8003464 <__NVIC_GetPriorityGrouping+0x18>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	0a1b      	lsrs	r3, r3, #8
 8003456:	f003 0307 	and.w	r3, r3, #7
}
 800345a:	4618      	mov	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	2b00      	cmp	r3, #0
 8003478:	db0b      	blt.n	8003492 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	f003 021f 	and.w	r2, r3, #31
 8003480:	4907      	ldr	r1, [pc, #28]	@ (80034a0 <__NVIC_EnableIRQ+0x38>)
 8003482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	2001      	movs	r0, #1
 800348a:	fa00 f202 	lsl.w	r2, r0, r2
 800348e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	e000e100 	.word	0xe000e100

080034a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	db0a      	blt.n	80034ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	490c      	ldr	r1, [pc, #48]	@ (80034f0 <__NVIC_SetPriority+0x4c>)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	440b      	add	r3, r1
 80034c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034cc:	e00a      	b.n	80034e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4908      	ldr	r1, [pc, #32]	@ (80034f4 <__NVIC_SetPriority+0x50>)
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	3b04      	subs	r3, #4
 80034dc:	0112      	lsls	r2, r2, #4
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	440b      	add	r3, r1
 80034e2:	761a      	strb	r2, [r3, #24]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000e100 	.word	0xe000e100
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	@ 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f1c3 0307 	rsb	r3, r3, #7
 8003512:	2b04      	cmp	r3, #4
 8003514:	bf28      	it	cs
 8003516:	2304      	movcs	r3, #4
 8003518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3304      	adds	r3, #4
 800351e:	2b06      	cmp	r3, #6
 8003520:	d902      	bls.n	8003528 <NVIC_EncodePriority+0x30>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3b03      	subs	r3, #3
 8003526:	e000      	b.n	800352a <NVIC_EncodePriority+0x32>
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	f04f 32ff 	mov.w	r2, #4294967295
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	401a      	ands	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003540:	f04f 31ff 	mov.w	r1, #4294967295
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	43d9      	mvns	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	4313      	orrs	r3, r2
         );
}
 8003552:	4618      	mov	r0, r3
 8003554:	3724      	adds	r7, #36	@ 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003570:	d301      	bcc.n	8003576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003572:	2301      	movs	r3, #1
 8003574:	e00f      	b.n	8003596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003576:	4a0a      	ldr	r2, [pc, #40]	@ (80035a0 <SysTick_Config+0x40>)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3b01      	subs	r3, #1
 800357c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800357e:	210f      	movs	r1, #15
 8003580:	f04f 30ff 	mov.w	r0, #4294967295
 8003584:	f7ff ff8e 	bl	80034a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003588:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <SysTick_Config+0x40>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800358e:	4b04      	ldr	r3, [pc, #16]	@ (80035a0 <SysTick_Config+0x40>)
 8003590:	2207      	movs	r2, #7
 8003592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	e000e010 	.word	0xe000e010

080035a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ff29 	bl	8003404 <__NVIC_SetPriorityGrouping>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4603      	mov	r3, r0
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035cc:	f7ff ff3e 	bl	800344c <__NVIC_GetPriorityGrouping>
 80035d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	6978      	ldr	r0, [r7, #20]
 80035d8:	f7ff ff8e 	bl	80034f8 <NVIC_EncodePriority>
 80035dc:	4602      	mov	r2, r0
 80035de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff5d 	bl	80034a4 <__NVIC_SetPriority>
}
 80035ea:	bf00      	nop
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	4603      	mov	r3, r0
 80035fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff31 	bl	8003468 <__NVIC_EnableIRQ>
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff ffa2 	bl	8003560 <SysTick_Config>
 800361c:	4603      	mov	r3, r0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e098      	b.n	800376c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	4b4d      	ldr	r3, [pc, #308]	@ (8003778 <HAL_DMA_Init+0x150>)
 8003642:	429a      	cmp	r2, r3
 8003644:	d80f      	bhi.n	8003666 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	4b4b      	ldr	r3, [pc, #300]	@ (800377c <HAL_DMA_Init+0x154>)
 800364e:	4413      	add	r3, r2
 8003650:	4a4b      	ldr	r2, [pc, #300]	@ (8003780 <HAL_DMA_Init+0x158>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	009a      	lsls	r2, r3, #2
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a48      	ldr	r2, [pc, #288]	@ (8003784 <HAL_DMA_Init+0x15c>)
 8003662:	641a      	str	r2, [r3, #64]	@ 0x40
 8003664:	e00e      	b.n	8003684 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	4b46      	ldr	r3, [pc, #280]	@ (8003788 <HAL_DMA_Init+0x160>)
 800366e:	4413      	add	r3, r2
 8003670:	4a43      	ldr	r2, [pc, #268]	@ (8003780 <HAL_DMA_Init+0x158>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	009a      	lsls	r2, r3, #2
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a42      	ldr	r2, [pc, #264]	@ (800378c <HAL_DMA_Init+0x164>)
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800369a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800369e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036de:	d039      	beq.n	8003754 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	4a27      	ldr	r2, [pc, #156]	@ (8003784 <HAL_DMA_Init+0x15c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d11a      	bne.n	8003720 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80036ea:	4b29      	ldr	r3, [pc, #164]	@ (8003790 <HAL_DMA_Init+0x168>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f2:	f003 031c 	and.w	r3, r3, #28
 80036f6:	210f      	movs	r1, #15
 80036f8:	fa01 f303 	lsl.w	r3, r1, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	4924      	ldr	r1, [pc, #144]	@ (8003790 <HAL_DMA_Init+0x168>)
 8003700:	4013      	ands	r3, r2
 8003702:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003704:	4b22      	ldr	r3, [pc, #136]	@ (8003790 <HAL_DMA_Init+0x168>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003710:	f003 031c 	and.w	r3, r3, #28
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	491d      	ldr	r1, [pc, #116]	@ (8003790 <HAL_DMA_Init+0x168>)
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]
 800371e:	e019      	b.n	8003754 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003720:	4b1c      	ldr	r3, [pc, #112]	@ (8003794 <HAL_DMA_Init+0x16c>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003728:	f003 031c 	and.w	r3, r3, #28
 800372c:	210f      	movs	r1, #15
 800372e:	fa01 f303 	lsl.w	r3, r1, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	4917      	ldr	r1, [pc, #92]	@ (8003794 <HAL_DMA_Init+0x16c>)
 8003736:	4013      	ands	r3, r2
 8003738:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800373a:	4b16      	ldr	r3, [pc, #88]	@ (8003794 <HAL_DMA_Init+0x16c>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6859      	ldr	r1, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	f003 031c 	and.w	r3, r3, #28
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	4911      	ldr	r1, [pc, #68]	@ (8003794 <HAL_DMA_Init+0x16c>)
 8003750:	4313      	orrs	r3, r2
 8003752:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40020407 	.word	0x40020407
 800377c:	bffdfff8 	.word	0xbffdfff8
 8003780:	cccccccd 	.word	0xcccccccd
 8003784:	40020000 	.word	0x40020000
 8003788:	bffdfbf8 	.word	0xbffdfbf8
 800378c:	40020400 	.word	0x40020400
 8003790:	400200a8 	.word	0x400200a8
 8003794:	400204a8 	.word	0x400204a8

08003798 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_DMA_Start_IT+0x20>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e04b      	b.n	8003850 <HAL_DMA_Start_IT+0xb8>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d13a      	bne.n	8003842 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f8e0 	bl	80039b6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 020e 	orr.w	r2, r2, #14
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e00f      	b.n	8003830 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0204 	bic.w	r2, r2, #4
 800381e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 020a 	orr.w	r2, r2, #10
 800382e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e005      	b.n	800384e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800384a:	2302      	movs	r3, #2
 800384c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800384e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003874:	f003 031c 	and.w	r3, r3, #28
 8003878:	2204      	movs	r2, #4
 800387a:	409a      	lsls	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d026      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x7a>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d021      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	2b00      	cmp	r3, #0
 800389a:	d107      	bne.n	80038ac <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0204 	bic.w	r2, r2, #4
 80038aa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b0:	f003 021c 	and.w	r2, r3, #28
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	2104      	movs	r1, #4
 80038ba:	fa01 f202 	lsl.w	r2, r1, r2
 80038be:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d071      	beq.n	80039ac <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80038d0:	e06c      	b.n	80039ac <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d6:	f003 031c 	and.w	r3, r3, #28
 80038da:	2202      	movs	r2, #2
 80038dc:	409a      	lsls	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d02e      	beq.n	8003944 <HAL_DMA_IRQHandler+0xec>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d029      	beq.n	8003944 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10b      	bne.n	8003916 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 020a 	bic.w	r2, r2, #10
 800390c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391a:	f003 021c 	and.w	r2, r3, #28
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	2102      	movs	r1, #2
 8003924:	fa01 f202 	lsl.w	r2, r1, r2
 8003928:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if(hdma->XferCpltCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d038      	beq.n	80039ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003942:	e033      	b.n	80039ac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003948:	f003 031c 	and.w	r3, r3, #28
 800394c:	2208      	movs	r2, #8
 800394e:	409a      	lsls	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d02a      	beq.n	80039ae <HAL_DMA_IRQHandler+0x156>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d025      	beq.n	80039ae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 020e 	bic.w	r2, r2, #14
 8003970:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003976:	f003 021c 	and.w	r2, r3, #28
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	2101      	movs	r1, #1
 8003980:	fa01 f202 	lsl.w	r2, r1, r2
 8003984:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d004      	beq.n	80039ae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
}
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b085      	sub	sp, #20
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c8:	f003 021c 	and.w	r2, r3, #28
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	2101      	movs	r1, #1
 80039d2:	fa01 f202 	lsl.w	r2, r1, r2
 80039d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d108      	bne.n	80039fa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039f8:	e007      	b.n	8003a0a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	60da      	str	r2, [r3, #12]
}
 8003a0a:	bf00      	nop
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a26:	e148      	b.n	8003cba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	4013      	ands	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 813a 	beq.w	8003cb4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d00b      	beq.n	8003a60 <HAL_GPIO_Init+0x48>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d007      	beq.n	8003a60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a54:	2b11      	cmp	r3, #17
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b12      	cmp	r3, #18
 8003a5e:	d130      	bne.n	8003ac2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a96:	2201      	movs	r2, #1
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	f003 0201 	and.w	r2, r3, #1
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	2203      	movs	r2, #3
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d003      	beq.n	8003b02 <HAL_GPIO_Init+0xea>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b12      	cmp	r3, #18
 8003b00:	d123      	bne.n	8003b4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	08da      	lsrs	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3208      	adds	r2, #8
 8003b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	220f      	movs	r2, #15
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4013      	ands	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	08da      	lsrs	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3208      	adds	r2, #8
 8003b44:	6939      	ldr	r1, [r7, #16]
 8003b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	2203      	movs	r2, #3
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 0203 	and.w	r2, r3, #3
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8094 	beq.w	8003cb4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8c:	4b52      	ldr	r3, [pc, #328]	@ (8003cd8 <HAL_GPIO_Init+0x2c0>)
 8003b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b90:	4a51      	ldr	r2, [pc, #324]	@ (8003cd8 <HAL_GPIO_Init+0x2c0>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b98:	4b4f      	ldr	r3, [pc, #316]	@ (8003cd8 <HAL_GPIO_Init+0x2c0>)
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ba4:	4a4d      	ldr	r2, [pc, #308]	@ (8003cdc <HAL_GPIO_Init+0x2c4>)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	089b      	lsrs	r3, r3, #2
 8003baa:	3302      	adds	r3, #2
 8003bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	220f      	movs	r2, #15
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003bce:	d00d      	beq.n	8003bec <HAL_GPIO_Init+0x1d4>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a43      	ldr	r2, [pc, #268]	@ (8003ce0 <HAL_GPIO_Init+0x2c8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d007      	beq.n	8003be8 <HAL_GPIO_Init+0x1d0>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a42      	ldr	r2, [pc, #264]	@ (8003ce4 <HAL_GPIO_Init+0x2cc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_GPIO_Init+0x1cc>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e004      	b.n	8003bee <HAL_GPIO_Init+0x1d6>
 8003be4:	2307      	movs	r3, #7
 8003be6:	e002      	b.n	8003bee <HAL_GPIO_Init+0x1d6>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <HAL_GPIO_Init+0x1d6>
 8003bec:	2300      	movs	r3, #0
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	f002 0203 	and.w	r2, r2, #3
 8003bf4:	0092      	lsls	r2, r2, #2
 8003bf6:	4093      	lsls	r3, r2
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bfe:	4937      	ldr	r1, [pc, #220]	@ (8003cdc <HAL_GPIO_Init+0x2c4>)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	3302      	adds	r3, #2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c0c:	4b36      	ldr	r3, [pc, #216]	@ (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c30:	4a2d      	ldr	r2, [pc, #180]	@ (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c36:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c5a:	4a23      	ldr	r2, [pc, #140]	@ (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c60:	4b21      	ldr	r3, [pc, #132]	@ (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c84:	4a18      	ldr	r2, [pc, #96]	@ (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c8a:	4b17      	ldr	r3, [pc, #92]	@ (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cae:	4a0e      	ldr	r2, [pc, #56]	@ (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f47f aeaf 	bne.w	8003a28 <HAL_GPIO_Init+0x10>
  }
}
 8003cca:	bf00      	nop
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40010000 	.word	0x40010000
 8003ce0:	48000400 	.word	0x48000400
 8003ce4:	48000800 	.word	0x48000800
 8003ce8:	40010400 	.word	0x40010400

08003cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	807b      	strh	r3, [r7, #2]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cfc:	787b      	ldrb	r3, [r7, #1]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d02:	887a      	ldrh	r2, [r7, #2]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d08:	e002      	b.n	8003d10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d0a:	887a      	ldrh	r2, [r7, #2]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e081      	b.n	8003e32 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fe fa62 	bl	800220c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2224      	movs	r2, #36	@ 0x24
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d107      	bne.n	8003d96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	e006      	b.n	8003da4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003da2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d104      	bne.n	8003db6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003db4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003dc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	ea42 0103 	orr.w	r1, r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	021a      	lsls	r2, r3, #8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69d9      	ldr	r1, [r3, #28]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1a      	ldr	r2, [r3, #32]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d138      	bne.n	8003ec2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e032      	b.n	8003ec4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2224      	movs	r2, #36	@ 0x24
 8003e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e8c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6819      	ldr	r1, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e000      	b.n	8003ec4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ec2:	2302      	movs	r3, #2
  }
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d139      	bne.n	8003f5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e033      	b.n	8003f5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2224      	movs	r2, #36	@ 0x24
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0201 	bic.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0201 	orr.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	e000      	b.n	8003f5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f5a:	2302      	movs	r3, #2
  }
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f6c:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a04      	ldr	r2, [pc, #16]	@ (8003f84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f76:	6013      	str	r3, [r2, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40007000 	.word	0x40007000

08003f88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f8c:	4b04      	ldr	r3, [pc, #16]	@ (8003fa0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40007000 	.word	0x40007000

08003fa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fb2:	d130      	bne.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fb4:	4b23      	ldr	r3, [pc, #140]	@ (8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fc0:	d038      	beq.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fc2:	4b20      	ldr	r3, [pc, #128]	@ (8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fca:	4a1e      	ldr	r2, [pc, #120]	@ (8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fd0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2232      	movs	r2, #50	@ 0x32
 8003fd8:	fb02 f303 	mul.w	r3, r2, r3
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800404c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	0c9b      	lsrs	r3, r3, #18
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fe8:	e002      	b.n	8003ff0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ff0:	4b14      	ldr	r3, [pc, #80]	@ (8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ffc:	d102      	bne.n	8004004 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f2      	bne.n	8003fea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004004:	4b0f      	ldr	r3, [pc, #60]	@ (8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004010:	d110      	bne.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e00f      	b.n	8004036 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004016:	4b0b      	ldr	r3, [pc, #44]	@ (8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800401e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004022:	d007      	beq.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004024:	4b07      	ldr	r3, [pc, #28]	@ (8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800402c:	4a05      	ldr	r2, [pc, #20]	@ (8004044 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800402e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004032:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40007000 	.word	0x40007000
 8004048:	20000004 	.word	0x20000004
 800404c:	431bde83 	.word	0x431bde83

08004050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f000 bc10 	b.w	8004884 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004064:	4b96      	ldr	r3, [pc, #600]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800406e:	4b94      	ldr	r3, [pc, #592]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80e4 	beq.w	800424e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <HAL_RCC_OscConfig+0x4c>
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2b0c      	cmp	r3, #12
 8004090:	f040 808b 	bne.w	80041aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2b01      	cmp	r3, #1
 8004098:	f040 8087 	bne.w	80041aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800409c:	4b88      	ldr	r3, [pc, #544]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_OscConfig+0x64>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e3e7      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1a      	ldr	r2, [r3, #32]
 80040b8:	4b81      	ldr	r3, [pc, #516]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d004      	beq.n	80040ce <HAL_RCC_OscConfig+0x7e>
 80040c4:	4b7e      	ldr	r3, [pc, #504]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040cc:	e005      	b.n	80040da <HAL_RCC_OscConfig+0x8a>
 80040ce:	4b7c      	ldr	r3, [pc, #496]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80040d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040da:	4293      	cmp	r3, r2
 80040dc:	d223      	bcs.n	8004126 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fd7a 	bl	8004bdc <RCC_SetFlashLatencyFromMSIRange>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e3c8      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040f2:	4b73      	ldr	r3, [pc, #460]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a72      	ldr	r2, [pc, #456]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80040f8:	f043 0308 	orr.w	r3, r3, #8
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	4b70      	ldr	r3, [pc, #448]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	496d      	ldr	r1, [pc, #436]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004110:	4b6b      	ldr	r3, [pc, #428]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	4968      	ldr	r1, [pc, #416]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004120:	4313      	orrs	r3, r2
 8004122:	604b      	str	r3, [r1, #4]
 8004124:	e025      	b.n	8004172 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004126:	4b66      	ldr	r3, [pc, #408]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a65      	ldr	r2, [pc, #404]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 800412c:	f043 0308 	orr.w	r3, r3, #8
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	4b63      	ldr	r3, [pc, #396]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	4960      	ldr	r1, [pc, #384]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004140:	4313      	orrs	r3, r2
 8004142:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004144:	4b5e      	ldr	r3, [pc, #376]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	495b      	ldr	r1, [pc, #364]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fd3a 	bl	8004bdc <RCC_SetFlashLatencyFromMSIRange>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e388      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004172:	f000 fc6f 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8004176:	4602      	mov	r2, r0
 8004178:	4b51      	ldr	r3, [pc, #324]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	4950      	ldr	r1, [pc, #320]	@ (80042c4 <HAL_RCC_OscConfig+0x274>)
 8004184:	5ccb      	ldrb	r3, [r1, r3]
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	fa22 f303 	lsr.w	r3, r2, r3
 800418e:	4a4e      	ldr	r2, [pc, #312]	@ (80042c8 <HAL_RCC_OscConfig+0x278>)
 8004190:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004192:	4b4e      	ldr	r3, [pc, #312]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe fb44 	bl	8002824 <HAL_InitTick>
 800419c:	4603      	mov	r3, r0
 800419e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d052      	beq.n	800424c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	e36c      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d032      	beq.n	8004218 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041b2:	4b43      	ldr	r3, [pc, #268]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a42      	ldr	r2, [pc, #264]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041be:	f7fe fb81 	bl	80028c4 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041c6:	f7fe fb7d 	bl	80028c4 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e355      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041d8:	4b39      	ldr	r3, [pc, #228]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041e4:	4b36      	ldr	r3, [pc, #216]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a35      	ldr	r2, [pc, #212]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80041ea:	f043 0308 	orr.w	r3, r3, #8
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	4b33      	ldr	r3, [pc, #204]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	4930      	ldr	r1, [pc, #192]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004202:	4b2f      	ldr	r3, [pc, #188]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	492b      	ldr	r1, [pc, #172]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004212:	4313      	orrs	r3, r2
 8004214:	604b      	str	r3, [r1, #4]
 8004216:	e01a      	b.n	800424e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004218:	4b29      	ldr	r3, [pc, #164]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a28      	ldr	r2, [pc, #160]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 800421e:	f023 0301 	bic.w	r3, r3, #1
 8004222:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004224:	f7fe fb4e 	bl	80028c4 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800422c:	f7fe fb4a 	bl	80028c4 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e322      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800423e:	4b20      	ldr	r3, [pc, #128]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x1dc>
 800424a:	e000      	b.n	800424e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800424c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d073      	beq.n	8004342 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b08      	cmp	r3, #8
 800425e:	d005      	beq.n	800426c <HAL_RCC_OscConfig+0x21c>
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d10e      	bne.n	8004284 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b03      	cmp	r3, #3
 800426a:	d10b      	bne.n	8004284 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800426c:	4b14      	ldr	r3, [pc, #80]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d063      	beq.n	8004340 <HAL_RCC_OscConfig+0x2f0>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d15f      	bne.n	8004340 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e2ff      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800428c:	d106      	bne.n	800429c <HAL_RCC_OscConfig+0x24c>
 800428e:	4b0c      	ldr	r3, [pc, #48]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a0b      	ldr	r2, [pc, #44]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 8004294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e025      	b.n	80042e8 <HAL_RCC_OscConfig+0x298>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042a4:	d114      	bne.n	80042d0 <HAL_RCC_OscConfig+0x280>
 80042a6:	4b06      	ldr	r3, [pc, #24]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a05      	ldr	r2, [pc, #20]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80042ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	4b03      	ldr	r3, [pc, #12]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a02      	ldr	r2, [pc, #8]	@ (80042c0 <HAL_RCC_OscConfig+0x270>)
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e013      	b.n	80042e8 <HAL_RCC_OscConfig+0x298>
 80042c0:	40021000 	.word	0x40021000
 80042c4:	0800eaec 	.word	0x0800eaec
 80042c8:	20000004 	.word	0x20000004
 80042cc:	20000008 	.word	0x20000008
 80042d0:	4ba0      	ldr	r3, [pc, #640]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a9f      	ldr	r2, [pc, #636]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 80042d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	4b9d      	ldr	r3, [pc, #628]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a9c      	ldr	r2, [pc, #624]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 80042e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d013      	beq.n	8004318 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7fe fae8 	bl	80028c4 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f8:	f7fe fae4 	bl	80028c4 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	@ 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e2bc      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800430a:	4b92      	ldr	r3, [pc, #584]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0x2a8>
 8004316:	e014      	b.n	8004342 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004318:	f7fe fad4 	bl	80028c4 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004320:	f7fe fad0 	bl	80028c4 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	@ 0x64
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e2a8      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004332:	4b88      	ldr	r3, [pc, #544]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x2d0>
 800433e:	e000      	b.n	8004342 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d060      	beq.n	8004410 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b04      	cmp	r3, #4
 8004352:	d005      	beq.n	8004360 <HAL_RCC_OscConfig+0x310>
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b0c      	cmp	r3, #12
 8004358:	d119      	bne.n	800438e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d116      	bne.n	800438e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004360:	4b7c      	ldr	r3, [pc, #496]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_RCC_OscConfig+0x328>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e285      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004378:	4b76      	ldr	r3, [pc, #472]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	061b      	lsls	r3, r3, #24
 8004386:	4973      	ldr	r1, [pc, #460]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800438c:	e040      	b.n	8004410 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d023      	beq.n	80043de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004396:	4b6f      	ldr	r3, [pc, #444]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a6e      	ldr	r2, [pc, #440]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 800439c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a2:	f7fe fa8f 	bl	80028c4 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043aa:	f7fe fa8b 	bl	80028c4 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e263      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043bc:	4b65      	ldr	r3, [pc, #404]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c8:	4b62      	ldr	r3, [pc, #392]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	061b      	lsls	r3, r3, #24
 80043d6:	495f      	ldr	r1, [pc, #380]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	604b      	str	r3, [r1, #4]
 80043dc:	e018      	b.n	8004410 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043de:	4b5d      	ldr	r3, [pc, #372]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a5c      	ldr	r2, [pc, #368]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 80043e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ea:	f7fe fa6b 	bl	80028c4 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f2:	f7fe fa67 	bl	80028c4 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e23f      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004404:	4b53      	ldr	r3, [pc, #332]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f0      	bne.n	80043f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d03c      	beq.n	8004496 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01c      	beq.n	800445e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004424:	4b4b      	ldr	r3, [pc, #300]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 8004426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800442a:	4a4a      	ldr	r2, [pc, #296]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004434:	f7fe fa46 	bl	80028c4 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443c:	f7fe fa42 	bl	80028c4 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e21a      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800444e:	4b41      	ldr	r3, [pc, #260]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 8004450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ef      	beq.n	800443c <HAL_RCC_OscConfig+0x3ec>
 800445c:	e01b      	b.n	8004496 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800445e:	4b3d      	ldr	r3, [pc, #244]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 8004460:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004464:	4a3b      	ldr	r2, [pc, #236]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446e:	f7fe fa29 	bl	80028c4 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004476:	f7fe fa25 	bl	80028c4 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e1fd      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004488:	4b32      	ldr	r3, [pc, #200]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 800448a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1ef      	bne.n	8004476 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 80a6 	beq.w	80045f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044a4:	2300      	movs	r3, #0
 80044a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 80044aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10d      	bne.n	80044d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b4:	4b27      	ldr	r3, [pc, #156]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 80044b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b8:	4a26      	ldr	r2, [pc, #152]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 80044ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044be:	6593      	str	r3, [r2, #88]	@ 0x58
 80044c0:	4b24      	ldr	r3, [pc, #144]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044cc:	2301      	movs	r3, #1
 80044ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d0:	4b21      	ldr	r3, [pc, #132]	@ (8004558 <HAL_RCC_OscConfig+0x508>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d118      	bne.n	800450e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004558 <HAL_RCC_OscConfig+0x508>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004558 <HAL_RCC_OscConfig+0x508>)
 80044e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e8:	f7fe f9ec 	bl	80028c4 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f0:	f7fe f9e8 	bl	80028c4 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e1c0      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004502:	4b15      	ldr	r3, [pc, #84]	@ (8004558 <HAL_RCC_OscConfig+0x508>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d108      	bne.n	8004528 <HAL_RCC_OscConfig+0x4d8>
 8004516:	4b0f      	ldr	r3, [pc, #60]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451c:	4a0d      	ldr	r2, [pc, #52]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004526:	e029      	b.n	800457c <HAL_RCC_OscConfig+0x52c>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b05      	cmp	r3, #5
 800452e:	d115      	bne.n	800455c <HAL_RCC_OscConfig+0x50c>
 8004530:	4b08      	ldr	r3, [pc, #32]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004536:	4a07      	ldr	r2, [pc, #28]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 8004538:	f043 0304 	orr.w	r3, r3, #4
 800453c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004540:	4b04      	ldr	r3, [pc, #16]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004546:	4a03      	ldr	r2, [pc, #12]	@ (8004554 <HAL_RCC_OscConfig+0x504>)
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004550:	e014      	b.n	800457c <HAL_RCC_OscConfig+0x52c>
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000
 8004558:	40007000 	.word	0x40007000
 800455c:	4b9a      	ldr	r3, [pc, #616]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004562:	4a99      	ldr	r2, [pc, #612]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 8004564:	f023 0301 	bic.w	r3, r3, #1
 8004568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800456c:	4b96      	ldr	r3, [pc, #600]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004572:	4a95      	ldr	r2, [pc, #596]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 8004574:	f023 0304 	bic.w	r3, r3, #4
 8004578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d016      	beq.n	80045b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004584:	f7fe f99e 	bl	80028c4 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800458a:	e00a      	b.n	80045a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458c:	f7fe f99a 	bl	80028c4 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e170      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a2:	4b89      	ldr	r3, [pc, #548]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0ed      	beq.n	800458c <HAL_RCC_OscConfig+0x53c>
 80045b0:	e015      	b.n	80045de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b2:	f7fe f987 	bl	80028c4 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fe f983 	bl	80028c4 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e159      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045d0:	4b7d      	ldr	r3, [pc, #500]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1ed      	bne.n	80045ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045de:	7ffb      	ldrb	r3, [r7, #31]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d105      	bne.n	80045f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e4:	4b78      	ldr	r3, [pc, #480]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 80045e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e8:	4a77      	ldr	r2, [pc, #476]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 80045ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d03c      	beq.n	8004676 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01c      	beq.n	800463e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004604:	4b70      	ldr	r3, [pc, #448]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 8004606:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800460a:	4a6f      	ldr	r2, [pc, #444]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fe f956 	bl	80028c4 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800461c:	f7fe f952 	bl	80028c4 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e12a      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800462e:	4b66      	ldr	r3, [pc, #408]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 8004630:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0ef      	beq.n	800461c <HAL_RCC_OscConfig+0x5cc>
 800463c:	e01b      	b.n	8004676 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800463e:	4b62      	ldr	r3, [pc, #392]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 8004640:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004644:	4a60      	ldr	r2, [pc, #384]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464e:	f7fe f939 	bl	80028c4 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004656:	f7fe f935 	bl	80028c4 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e10d      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004668:	4b57      	ldr	r3, [pc, #348]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 800466a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1ef      	bne.n	8004656 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 8101 	beq.w	8004882 <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004684:	2b02      	cmp	r3, #2
 8004686:	f040 80c9 	bne.w	800481c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800468a:	4b4f      	ldr	r3, [pc, #316]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f003 0203 	and.w	r2, r3, #3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469a:	429a      	cmp	r2, r3
 800469c:	d12c      	bne.n	80046f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a8:	3b01      	subs	r3, #1
 80046aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d123      	bne.n	80046f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d11b      	bne.n	80046f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d113      	bne.n	80046f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046da:	085b      	lsrs	r3, r3, #1
 80046dc:	3b01      	subs	r3, #1
 80046de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d109      	bne.n	80046f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	085b      	lsrs	r3, r3, #1
 80046f0:	3b01      	subs	r3, #1
 80046f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d06b      	beq.n	80047d0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2b0c      	cmp	r3, #12
 80046fc:	d062      	beq.n	80047c4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046fe:	4b32      	ldr	r3, [pc, #200]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e0ba      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800470e:	4b2e      	ldr	r3, [pc, #184]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2d      	ldr	r2, [pc, #180]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 8004714:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004718:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800471a:	f7fe f8d3 	bl	80028c4 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004722:	f7fe f8cf 	bl	80028c4 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e0a7      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004734:	4b24      	ldr	r3, [pc, #144]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f0      	bne.n	8004722 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004740:	4b21      	ldr	r3, [pc, #132]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	4b21      	ldr	r3, [pc, #132]	@ (80047cc <HAL_RCC_OscConfig+0x77c>)
 8004746:	4013      	ands	r3, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004750:	3a01      	subs	r2, #1
 8004752:	0112      	lsls	r2, r2, #4
 8004754:	4311      	orrs	r1, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800475a:	0212      	lsls	r2, r2, #8
 800475c:	4311      	orrs	r1, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004762:	0852      	lsrs	r2, r2, #1
 8004764:	3a01      	subs	r2, #1
 8004766:	0552      	lsls	r2, r2, #21
 8004768:	4311      	orrs	r1, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800476e:	0852      	lsrs	r2, r2, #1
 8004770:	3a01      	subs	r2, #1
 8004772:	0652      	lsls	r2, r2, #25
 8004774:	4311      	orrs	r1, r2
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800477a:	06d2      	lsls	r2, r2, #27
 800477c:	430a      	orrs	r2, r1
 800477e:	4912      	ldr	r1, [pc, #72]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 8004780:	4313      	orrs	r3, r2
 8004782:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004784:	4b10      	ldr	r3, [pc, #64]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a0f      	ldr	r2, [pc, #60]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 800478a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800478e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004790:	4b0d      	ldr	r3, [pc, #52]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4a0c      	ldr	r2, [pc, #48]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 8004796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800479a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800479c:	f7fe f892 	bl	80028c4 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a4:	f7fe f88e 	bl	80028c4 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e066      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b6:	4b04      	ldr	r3, [pc, #16]	@ (80047c8 <HAL_RCC_OscConfig+0x778>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047c2:	e05e      	b.n	8004882 <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e05d      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
 80047c8:	40021000 	.word	0x40021000
 80047cc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d0:	4b2e      	ldr	r3, [pc, #184]	@ (800488c <HAL_RCC_OscConfig+0x83c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d152      	bne.n	8004882 <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047dc:	4b2b      	ldr	r3, [pc, #172]	@ (800488c <HAL_RCC_OscConfig+0x83c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a2a      	ldr	r2, [pc, #168]	@ (800488c <HAL_RCC_OscConfig+0x83c>)
 80047e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047e8:	4b28      	ldr	r3, [pc, #160]	@ (800488c <HAL_RCC_OscConfig+0x83c>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4a27      	ldr	r2, [pc, #156]	@ (800488c <HAL_RCC_OscConfig+0x83c>)
 80047ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047f4:	f7fe f866 	bl	80028c4 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fe f862 	bl	80028c4 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e03a      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800480e:	4b1f      	ldr	r3, [pc, #124]	@ (800488c <HAL_RCC_OscConfig+0x83c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0x7ac>
 800481a:	e032      	b.n	8004882 <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b0c      	cmp	r3, #12
 8004820:	d02d      	beq.n	800487e <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004822:	4b1a      	ldr	r3, [pc, #104]	@ (800488c <HAL_RCC_OscConfig+0x83c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a19      	ldr	r2, [pc, #100]	@ (800488c <HAL_RCC_OscConfig+0x83c>)
 8004828:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800482c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800482e:	4b17      	ldr	r3, [pc, #92]	@ (800488c <HAL_RCC_OscConfig+0x83c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d105      	bne.n	8004846 <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800483a:	4b14      	ldr	r3, [pc, #80]	@ (800488c <HAL_RCC_OscConfig+0x83c>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	4a13      	ldr	r2, [pc, #76]	@ (800488c <HAL_RCC_OscConfig+0x83c>)
 8004840:	f023 0303 	bic.w	r3, r3, #3
 8004844:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004846:	4b11      	ldr	r3, [pc, #68]	@ (800488c <HAL_RCC_OscConfig+0x83c>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	4a10      	ldr	r2, [pc, #64]	@ (800488c <HAL_RCC_OscConfig+0x83c>)
 800484c:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8004850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004854:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004856:	f7fe f835 	bl	80028c4 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485e:	f7fe f831 	bl	80028c4 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e009      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004870:	4b06      	ldr	r3, [pc, #24]	@ (800488c <HAL_RCC_OscConfig+0x83c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f0      	bne.n	800485e <HAL_RCC_OscConfig+0x80e>
 800487c:	e001      	b.n	8004882 <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3720      	adds	r7, #32
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40021000 	.word	0x40021000

08004890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0c8      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a4:	4b66      	ldr	r3, [pc, #408]	@ (8004a40 <HAL_RCC_ClockConfig+0x1b0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d910      	bls.n	80048d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b2:	4b63      	ldr	r3, [pc, #396]	@ (8004a40 <HAL_RCC_ClockConfig+0x1b0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 0207 	bic.w	r2, r3, #7
 80048ba:	4961      	ldr	r1, [pc, #388]	@ (8004a40 <HAL_RCC_ClockConfig+0x1b0>)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	4313      	orrs	r3, r2
 80048c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004a40 <HAL_RCC_ClockConfig+0x1b0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0b0      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d04c      	beq.n	800497a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	d107      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e8:	4b56      	ldr	r3, [pc, #344]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d121      	bne.n	8004938 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e09e      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d107      	bne.n	8004910 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004900:	4b50      	ldr	r3, [pc, #320]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d115      	bne.n	8004938 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e092      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d107      	bne.n	8004928 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004918:	4b4a      	ldr	r3, [pc, #296]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d109      	bne.n	8004938 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e086      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004928:	4b46      	ldr	r3, [pc, #280]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e07e      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004938:	4b42      	ldr	r3, [pc, #264]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f023 0203 	bic.w	r2, r3, #3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	493f      	ldr	r1, [pc, #252]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494a:	f7fd ffbb 	bl	80028c4 <HAL_GetTick>
 800494e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004950:	e00a      	b.n	8004968 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004952:	f7fd ffb7 	bl	80028c4 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004960:	4293      	cmp	r3, r2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e066      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004968:	4b36      	ldr	r3, [pc, #216]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 020c 	and.w	r2, r3, #12
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	429a      	cmp	r2, r3
 8004978:	d1eb      	bne.n	8004952 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d008      	beq.n	8004998 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004986:	4b2f      	ldr	r3, [pc, #188]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	492c      	ldr	r1, [pc, #176]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 8004994:	4313      	orrs	r3, r2
 8004996:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004998:	4b29      	ldr	r3, [pc, #164]	@ (8004a40 <HAL_RCC_ClockConfig+0x1b0>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d210      	bcs.n	80049c8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a6:	4b26      	ldr	r3, [pc, #152]	@ (8004a40 <HAL_RCC_ClockConfig+0x1b0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 0207 	bic.w	r2, r3, #7
 80049ae:	4924      	ldr	r1, [pc, #144]	@ (8004a40 <HAL_RCC_ClockConfig+0x1b0>)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b6:	4b22      	ldr	r3, [pc, #136]	@ (8004a40 <HAL_RCC_ClockConfig+0x1b0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d001      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e036      	b.n	8004a36 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4918      	ldr	r1, [pc, #96]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049f2:	4b14      	ldr	r3, [pc, #80]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4910      	ldr	r1, [pc, #64]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a06:	f000 f825 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	490c      	ldr	r1, [pc, #48]	@ (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 8004a18:	5ccb      	ldrb	r3, [r1, r3]
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a22:	4a0a      	ldr	r2, [pc, #40]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a26:	4b0a      	ldr	r3, [pc, #40]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fd fefa 	bl	8002824 <HAL_InitTick>
 8004a30:	4603      	mov	r3, r0
 8004a32:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a34:	7afb      	ldrb	r3, [r7, #11]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40022000 	.word	0x40022000
 8004a44:	40021000 	.word	0x40021000
 8004a48:	0800eaec 	.word	0x0800eaec
 8004a4c:	20000004 	.word	0x20000004
 8004a50:	20000008 	.word	0x20000008

08004a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b089      	sub	sp, #36	@ 0x24
 8004a58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61fb      	str	r3, [r7, #28]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a62:	4b3e      	ldr	r3, [pc, #248]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_GetSysClockFreq+0x34>
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	2b0c      	cmp	r3, #12
 8004a80:	d121      	bne.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d11e      	bne.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a88:	4b34      	ldr	r3, [pc, #208]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d107      	bne.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a94:	4b31      	ldr	r3, [pc, #196]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a9a:	0a1b      	lsrs	r3, r3, #8
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	61fb      	str	r3, [r7, #28]
 8004aa2:	e005      	b.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	091b      	lsrs	r3, r3, #4
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ab0:	4a2b      	ldr	r2, [pc, #172]	@ (8004b60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10d      	bne.n	8004adc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ac4:	e00a      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d102      	bne.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004acc:	4b25      	ldr	r3, [pc, #148]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ace:	61bb      	str	r3, [r7, #24]
 8004ad0:	e004      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d101      	bne.n	8004adc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ad8:	4b23      	ldr	r3, [pc, #140]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ada:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	2b0c      	cmp	r3, #12
 8004ae0:	d134      	bne.n	8004b4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d003      	beq.n	8004afa <HAL_RCC_GetSysClockFreq+0xa6>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d003      	beq.n	8004b00 <HAL_RCC_GetSysClockFreq+0xac>
 8004af8:	e005      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004afa:	4b1a      	ldr	r3, [pc, #104]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x110>)
 8004afc:	617b      	str	r3, [r7, #20]
      break;
 8004afe:	e005      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b00:	4b19      	ldr	r3, [pc, #100]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b02:	617b      	str	r3, [r7, #20]
      break;
 8004b04:	e002      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	617b      	str	r3, [r7, #20]
      break;
 8004b0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b0c:	4b13      	ldr	r3, [pc, #76]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	091b      	lsrs	r3, r3, #4
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	3301      	adds	r3, #1
 8004b18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b1a:	4b10      	ldr	r3, [pc, #64]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	0a1b      	lsrs	r3, r3, #8
 8004b20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	fb03 f202 	mul.w	r2, r3, r2
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b32:	4b0a      	ldr	r3, [pc, #40]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	0e5b      	lsrs	r3, r3, #25
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3724      	adds	r7, #36	@ 0x24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	0800eb04 	.word	0x0800eb04
 8004b64:	00f42400 	.word	0x00f42400
 8004b68:	007a1200 	.word	0x007a1200

08004b6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b70:	4b03      	ldr	r3, [pc, #12]	@ (8004b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b72:	681b      	ldr	r3, [r3, #0]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20000004 	.word	0x20000004

08004b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b88:	f7ff fff0 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	4904      	ldr	r1, [pc, #16]	@ (8004bac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	0800eafc 	.word	0x0800eafc

08004bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bb4:	f7ff ffda 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4b06      	ldr	r3, [pc, #24]	@ (8004bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	0adb      	lsrs	r3, r3, #11
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4904      	ldr	r1, [pc, #16]	@ (8004bd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bc6:	5ccb      	ldrb	r3, [r1, r3]
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	0800eafc 	.word	0x0800eafc

08004bdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004be4:	2300      	movs	r3, #0
 8004be6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004be8:	4b2a      	ldr	r3, [pc, #168]	@ (8004c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004bf4:	f7ff f9c8 	bl	8003f88 <HAL_PWREx_GetVoltageRange>
 8004bf8:	6178      	str	r0, [r7, #20]
 8004bfa:	e014      	b.n	8004c26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bfc:	4b25      	ldr	r3, [pc, #148]	@ (8004c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c00:	4a24      	ldr	r2, [pc, #144]	@ (8004c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c08:	4b22      	ldr	r3, [pc, #136]	@ (8004c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c14:	f7ff f9b8 	bl	8003f88 <HAL_PWREx_GetVoltageRange>
 8004c18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8004c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c24:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c2c:	d10b      	bne.n	8004c46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b80      	cmp	r3, #128	@ 0x80
 8004c32:	d919      	bls.n	8004c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2ba0      	cmp	r3, #160	@ 0xa0
 8004c38:	d902      	bls.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	e013      	b.n	8004c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c40:	2301      	movs	r3, #1
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	e010      	b.n	8004c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b80      	cmp	r3, #128	@ 0x80
 8004c4a:	d902      	bls.n	8004c52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	e00a      	b.n	8004c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b80      	cmp	r3, #128	@ 0x80
 8004c56:	d102      	bne.n	8004c5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c58:	2302      	movs	r3, #2
 8004c5a:	613b      	str	r3, [r7, #16]
 8004c5c:	e004      	b.n	8004c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b70      	cmp	r3, #112	@ 0x70
 8004c62:	d101      	bne.n	8004c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c64:	2301      	movs	r3, #1
 8004c66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c68:	4b0b      	ldr	r3, [pc, #44]	@ (8004c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f023 0207 	bic.w	r2, r3, #7
 8004c70:	4909      	ldr	r1, [pc, #36]	@ (8004c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c78:	4b07      	ldr	r3, [pc, #28]	@ (8004c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d001      	beq.n	8004c8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40021000 	.word	0x40021000
 8004c98:	40022000 	.word	0x40022000

08004c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ca8:	2300      	movs	r3, #0
 8004caa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d031      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cbc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004cc0:	d01a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004cc2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004cc6:	d814      	bhi.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d009      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ccc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cd0:	d10f      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004cd2:	4b5d      	ldr	r3, [pc, #372]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	4a5c      	ldr	r2, [pc, #368]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cdc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cde:	e00c      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fa20 	bl	800512c <RCCEx_PLLSAI1_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cf0:	e003      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	74fb      	strb	r3, [r7, #19]
      break;
 8004cf6:	e000      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cfa:	7cfb      	ldrb	r3, [r7, #19]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10b      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d00:	4b51      	ldr	r3, [pc, #324]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0e:	494e      	ldr	r1, [pc, #312]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d16:	e001      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d18:	7cfb      	ldrb	r3, [r7, #19]
 8004d1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 809e 	beq.w	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d2e:	4b46      	ldr	r3, [pc, #280]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00d      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d44:	4b40      	ldr	r3, [pc, #256]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d48:	4a3f      	ldr	r2, [pc, #252]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d50:	4b3d      	ldr	r3, [pc, #244]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d60:	4b3a      	ldr	r3, [pc, #232]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a39      	ldr	r2, [pc, #228]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d6c:	f7fd fdaa 	bl	80028c4 <HAL_GetTick>
 8004d70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d72:	e009      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d74:	f7fd fda6 	bl	80028c4 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d902      	bls.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	74fb      	strb	r3, [r7, #19]
        break;
 8004d86:	e005      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d88:	4b30      	ldr	r3, [pc, #192]	@ (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0ef      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004d94:	7cfb      	ldrb	r3, [r7, #19]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d15a      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004da4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d01e      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d019      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004db6:	4b24      	ldr	r3, [pc, #144]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dc2:	4b21      	ldr	r3, [pc, #132]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004de2:	4a19      	ldr	r2, [pc, #100]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d016      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fd fd66 	bl	80028c4 <HAL_GetTick>
 8004df8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dfa:	e00b      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfc:	f7fd fd62 	bl	80028c4 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d902      	bls.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	74fb      	strb	r3, [r7, #19]
            break;
 8004e12:	e006      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e14:	4b0c      	ldr	r3, [pc, #48]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0ec      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004e22:	7cfb      	ldrb	r3, [r7, #19]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10b      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e28:	4b07      	ldr	r3, [pc, #28]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e36:	4904      	ldr	r1, [pc, #16]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e3e:	e009      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e40:	7cfb      	ldrb	r3, [r7, #19]
 8004e42:	74bb      	strb	r3, [r7, #18]
 8004e44:	e006      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004e46:	bf00      	nop
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e50:	7cfb      	ldrb	r3, [r7, #19]
 8004e52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e54:	7c7b      	ldrb	r3, [r7, #17]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d105      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e5a:	4b8a      	ldr	r3, [pc, #552]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5e:	4a89      	ldr	r2, [pc, #548]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e72:	4b84      	ldr	r3, [pc, #528]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e78:	f023 0203 	bic.w	r2, r3, #3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	4980      	ldr	r1, [pc, #512]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e94:	4b7b      	ldr	r3, [pc, #492]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e9a:	f023 020c 	bic.w	r2, r3, #12
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea2:	4978      	ldr	r1, [pc, #480]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004eb6:	4b73      	ldr	r3, [pc, #460]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ebc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec4:	496f      	ldr	r1, [pc, #444]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ede:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee6:	4967      	ldr	r1, [pc, #412]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004efa:	4b62      	ldr	r3, [pc, #392]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f00:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f08:	495e      	ldr	r1, [pc, #376]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f1c:	4b59      	ldr	r3, [pc, #356]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f22:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2a:	4956      	ldr	r1, [pc, #344]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f3e:	4b51      	ldr	r3, [pc, #324]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4c:	494d      	ldr	r1, [pc, #308]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d028      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f60:	4b48      	ldr	r3, [pc, #288]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6e:	4945      	ldr	r1, [pc, #276]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f7e:	d106      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f80:	4b40      	ldr	r3, [pc, #256]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4a3f      	ldr	r2, [pc, #252]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f8a:	60d3      	str	r3, [r2, #12]
 8004f8c:	e011      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f96:	d10c      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f8c4 	bl	800512c <RCCEx_PLLSAI1_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004fa8:	7cfb      	ldrb	r3, [r7, #19]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004fae:	7cfb      	ldrb	r3, [r7, #19]
 8004fb0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d028      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fbe:	4b31      	ldr	r3, [pc, #196]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fcc:	492d      	ldr	r1, [pc, #180]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fdc:	d106      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fde:	4b29      	ldr	r3, [pc, #164]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	4a28      	ldr	r2, [pc, #160]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fe4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fe8:	60d3      	str	r3, [r2, #12]
 8004fea:	e011      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ff4:	d10c      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f895 	bl	800512c <RCCEx_PLLSAI1_Config>
 8005002:	4603      	mov	r3, r0
 8005004:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005006:	7cfb      	ldrb	r3, [r7, #19]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800500c:	7cfb      	ldrb	r3, [r7, #19]
 800500e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01c      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800501c:	4b19      	ldr	r3, [pc, #100]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005022:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800502a:	4916      	ldr	r1, [pc, #88]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005036:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800503a:	d10c      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3304      	adds	r3, #4
 8005040:	2102      	movs	r1, #2
 8005042:	4618      	mov	r0, r3
 8005044:	f000 f872 	bl	800512c <RCCEx_PLLSAI1_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800504c:	7cfb      	ldrb	r3, [r7, #19]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005052:	7cfb      	ldrb	r3, [r7, #19]
 8005054:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005062:	4b08      	ldr	r3, [pc, #32]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005068:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005070:	4904      	ldr	r1, [pc, #16]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005078:	7cbb      	ldrb	r3, [r7, #18]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40021000 	.word	0x40021000

08005088 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800508c:	4b05      	ldr	r3, [pc, #20]	@ (80050a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a04      	ldr	r2, [pc, #16]	@ (80050a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005092:	f043 0304 	orr.w	r3, r3, #4
 8005096:	6013      	str	r3, [r2, #0]
}
 8005098:	bf00      	nop
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40021000 	.word	0x40021000

080050a8 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80050b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005124 <HAL_RCCEx_CRSConfig+0x7c>)
 80050b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005124 <HAL_RCCEx_CRSConfig+0x7c>)
 80050b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ba:	6393      	str	r3, [r2, #56]	@ 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 80050bc:	4b19      	ldr	r3, [pc, #100]	@ (8005124 <HAL_RCCEx_CRSConfig+0x7c>)
 80050be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c0:	4a18      	ldr	r2, [pc, #96]	@ (8005124 <HAL_RCCEx_CRSConfig+0x7c>)
 80050c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050c6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	041b      	lsls	r3, r3, #16
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80050f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005128 <HAL_RCCEx_CRSConfig+0x80>)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits for STM32L412xx/L422xx or TRIM[5:0] bits otherwise
     according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80050f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005128 <HAL_RCCEx_CRSConfig+0x80>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	4908      	ldr	r1, [pc, #32]	@ (8005128 <HAL_RCCEx_CRSConfig+0x80>)
 8005106:	4313      	orrs	r3, r2
 8005108:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800510a:	4b07      	ldr	r3, [pc, #28]	@ (8005128 <HAL_RCCEx_CRSConfig+0x80>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a06      	ldr	r2, [pc, #24]	@ (8005128 <HAL_RCCEx_CRSConfig+0x80>)
 8005110:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005114:	6013      	str	r3, [r2, #0]
}
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40021000 	.word	0x40021000
 8005128:	40006000 	.word	0x40006000

0800512c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800513a:	4b74      	ldr	r3, [pc, #464]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d018      	beq.n	8005178 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005146:	4b71      	ldr	r3, [pc, #452]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f003 0203 	and.w	r2, r3, #3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d10d      	bne.n	8005172 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
       ||
 800515a:	2b00      	cmp	r3, #0
 800515c:	d009      	beq.n	8005172 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800515e:	4b6b      	ldr	r3, [pc, #428]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	091b      	lsrs	r3, r3, #4
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
       ||
 800516e:	429a      	cmp	r2, r3
 8005170:	d047      	beq.n	8005202 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	73fb      	strb	r3, [r7, #15]
 8005176:	e044      	b.n	8005202 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b03      	cmp	r3, #3
 800517e:	d018      	beq.n	80051b2 <RCCEx_PLLSAI1_Config+0x86>
 8005180:	2b03      	cmp	r3, #3
 8005182:	d825      	bhi.n	80051d0 <RCCEx_PLLSAI1_Config+0xa4>
 8005184:	2b01      	cmp	r3, #1
 8005186:	d002      	beq.n	800518e <RCCEx_PLLSAI1_Config+0x62>
 8005188:	2b02      	cmp	r3, #2
 800518a:	d009      	beq.n	80051a0 <RCCEx_PLLSAI1_Config+0x74>
 800518c:	e020      	b.n	80051d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800518e:	4b5f      	ldr	r3, [pc, #380]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d11d      	bne.n	80051d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800519e:	e01a      	b.n	80051d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051a0:	4b5a      	ldr	r3, [pc, #360]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d116      	bne.n	80051da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b0:	e013      	b.n	80051da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051b2:	4b56      	ldr	r3, [pc, #344]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10f      	bne.n	80051de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051be:	4b53      	ldr	r3, [pc, #332]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d109      	bne.n	80051de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051ce:	e006      	b.n	80051de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
      break;
 80051d4:	e004      	b.n	80051e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051d6:	bf00      	nop
 80051d8:	e002      	b.n	80051e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051da:	bf00      	nop
 80051dc:	e000      	b.n	80051e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051de:	bf00      	nop
    }

    if(status == HAL_OK)
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10d      	bne.n	8005202 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051e6:	4b49      	ldr	r3, [pc, #292]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6819      	ldr	r1, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	430b      	orrs	r3, r1
 80051fc:	4943      	ldr	r1, [pc, #268]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005202:	7bfb      	ldrb	r3, [r7, #15]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d17c      	bne.n	8005302 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005208:	4b40      	ldr	r3, [pc, #256]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a3f      	ldr	r2, [pc, #252]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 800520e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005214:	f7fd fb56 	bl	80028c4 <HAL_GetTick>
 8005218:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800521a:	e009      	b.n	8005230 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800521c:	f7fd fb52 	bl	80028c4 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d902      	bls.n	8005230 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	73fb      	strb	r3, [r7, #15]
        break;
 800522e:	e005      	b.n	800523c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005230:	4b36      	ldr	r3, [pc, #216]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1ef      	bne.n	800521c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d15f      	bne.n	8005302 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d110      	bne.n	800526a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005248:	4b30      	ldr	r3, [pc, #192]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005250:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6892      	ldr	r2, [r2, #8]
 8005258:	0211      	lsls	r1, r2, #8
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	68d2      	ldr	r2, [r2, #12]
 800525e:	06d2      	lsls	r2, r2, #27
 8005260:	430a      	orrs	r2, r1
 8005262:	492a      	ldr	r1, [pc, #168]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005264:	4313      	orrs	r3, r2
 8005266:	610b      	str	r3, [r1, #16]
 8005268:	e027      	b.n	80052ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d112      	bne.n	8005296 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005270:	4b26      	ldr	r3, [pc, #152]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005278:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6892      	ldr	r2, [r2, #8]
 8005280:	0211      	lsls	r1, r2, #8
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6912      	ldr	r2, [r2, #16]
 8005286:	0852      	lsrs	r2, r2, #1
 8005288:	3a01      	subs	r2, #1
 800528a:	0552      	lsls	r2, r2, #21
 800528c:	430a      	orrs	r2, r1
 800528e:	491f      	ldr	r1, [pc, #124]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005290:	4313      	orrs	r3, r2
 8005292:	610b      	str	r3, [r1, #16]
 8005294:	e011      	b.n	80052ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005296:	4b1d      	ldr	r3, [pc, #116]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800529e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6892      	ldr	r2, [r2, #8]
 80052a6:	0211      	lsls	r1, r2, #8
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6952      	ldr	r2, [r2, #20]
 80052ac:	0852      	lsrs	r2, r2, #1
 80052ae:	3a01      	subs	r2, #1
 80052b0:	0652      	lsls	r2, r2, #25
 80052b2:	430a      	orrs	r2, r1
 80052b4:	4915      	ldr	r1, [pc, #84]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052ba:	4b14      	ldr	r3, [pc, #80]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a13      	ldr	r2, [pc, #76]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c6:	f7fd fafd 	bl	80028c4 <HAL_GetTick>
 80052ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052cc:	e009      	b.n	80052e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052ce:	f7fd faf9 	bl	80028c4 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d902      	bls.n	80052e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	73fb      	strb	r3, [r7, #15]
          break;
 80052e0:	e005      	b.n	80052ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052e2:	4b0a      	ldr	r3, [pc, #40]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0ef      	beq.n	80052ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d106      	bne.n	8005302 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052f4:	4b05      	ldr	r3, [pc, #20]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	4903      	ldr	r1, [pc, #12]	@ (800530c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005302:	7bfb      	ldrb	r3, [r7, #15]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40021000 	.word	0x40021000

08005310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e095      	b.n	800544e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005326:	2b00      	cmp	r3, #0
 8005328:	d108      	bne.n	800533c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005332:	d009      	beq.n	8005348 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	61da      	str	r2, [r3, #28]
 800533a:	e005      	b.n	8005348 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fc ff96 	bl	8002294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800537e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005388:	d902      	bls.n	8005390 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e002      	b.n	8005396 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005390:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005394:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800539e:	d007      	beq.n	80053b0 <HAL_SPI_Init+0xa0>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053a8:	d002      	beq.n	80053b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f2:	ea42 0103 	orr.w	r1, r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	0c1b      	lsrs	r3, r3, #16
 800540c:	f003 0204 	and.w	r2, r3, #4
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800542c:	ea42 0103 	orr.w	r1, r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b088      	sub	sp, #32
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	603b      	str	r3, [r7, #0]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_SPI_Transmit+0x22>
 8005474:	2302      	movs	r3, #2
 8005476:	e158      	b.n	800572a <HAL_SPI_Transmit+0x2d4>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005480:	f7fd fa20 	bl	80028c4 <HAL_GetTick>
 8005484:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b01      	cmp	r3, #1
 8005494:	d002      	beq.n	800549c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005496:	2302      	movs	r3, #2
 8005498:	77fb      	strb	r3, [r7, #31]
    goto error;
 800549a:	e13d      	b.n	8005718 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_SPI_Transmit+0x52>
 80054a2:	88fb      	ldrh	r3, [r7, #6]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054ac:	e134      	b.n	8005718 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2203      	movs	r2, #3
 80054b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	88fa      	ldrh	r2, [r7, #6]
 80054c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	88fa      	ldrh	r2, [r7, #6]
 80054cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054f8:	d10f      	bne.n	800551a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005508:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005518:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005524:	2b40      	cmp	r3, #64	@ 0x40
 8005526:	d007      	beq.n	8005538 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005536:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005540:	d94b      	bls.n	80055da <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_SPI_Transmit+0xfa>
 800554a:	8afb      	ldrh	r3, [r7, #22]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d13e      	bne.n	80055ce <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005554:	881a      	ldrh	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005560:	1c9a      	adds	r2, r3, #2
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005574:	e02b      	b.n	80055ce <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b02      	cmp	r3, #2
 8005582:	d112      	bne.n	80055aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005588:	881a      	ldrh	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005594:	1c9a      	adds	r2, r3, #2
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055a8:	e011      	b.n	80055ce <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055aa:	f7fd f98b 	bl	80028c4 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d803      	bhi.n	80055c2 <HAL_SPI_Transmit+0x16c>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c0:	d102      	bne.n	80055c8 <HAL_SPI_Transmit+0x172>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055cc:	e0a4      	b.n	8005718 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1ce      	bne.n	8005576 <HAL_SPI_Transmit+0x120>
 80055d8:	e07c      	b.n	80056d4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <HAL_SPI_Transmit+0x192>
 80055e2:	8afb      	ldrh	r3, [r7, #22]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d170      	bne.n	80056ca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d912      	bls.n	8005618 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f6:	881a      	ldrh	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005602:	1c9a      	adds	r2, r3, #2
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800560c:	b29b      	uxth	r3, r3
 800560e:	3b02      	subs	r3, #2
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005616:	e058      	b.n	80056ca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	330c      	adds	r3, #12
 8005622:	7812      	ldrb	r2, [r2, #0]
 8005624:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800563e:	e044      	b.n	80056ca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b02      	cmp	r3, #2
 800564c:	d12b      	bne.n	80056a6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	d912      	bls.n	800567e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565c:	881a      	ldrh	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005668:	1c9a      	adds	r2, r3, #2
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b02      	subs	r3, #2
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800567c:	e025      	b.n	80056ca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	330c      	adds	r3, #12
 8005688:	7812      	ldrb	r2, [r2, #0]
 800568a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800569a:	b29b      	uxth	r3, r3
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056a4:	e011      	b.n	80056ca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056a6:	f7fd f90d 	bl	80028c4 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d803      	bhi.n	80056be <HAL_SPI_Transmit+0x268>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056bc:	d102      	bne.n	80056c4 <HAL_SPI_Transmit+0x26e>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d102      	bne.n	80056ca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056c8:	e026      	b.n	8005718 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1b5      	bne.n	8005640 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	6839      	ldr	r1, [r7, #0]
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 fceb 	bl	80060b4 <SPI_EndRxTxTransaction>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10a      	bne.n	8005708 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056f2:	2300      	movs	r3, #0
 80056f4:	613b      	str	r3, [r7, #16]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	77fb      	strb	r3, [r7, #31]
 8005714:	e000      	b.n	8005718 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005716:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005728:	7ffb      	ldrb	r3, [r7, #31]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b08a      	sub	sp, #40	@ 0x28
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	607a      	str	r2, [r7, #4]
 800573e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005740:	2301      	movs	r3, #1
 8005742:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005750:	2b01      	cmp	r3, #1
 8005752:	d101      	bne.n	8005758 <HAL_SPI_TransmitReceive+0x26>
 8005754:	2302      	movs	r3, #2
 8005756:	e1fb      	b.n	8005b50 <HAL_SPI_TransmitReceive+0x41e>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005760:	f7fd f8b0 	bl	80028c4 <HAL_GetTick>
 8005764:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800576c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005774:	887b      	ldrh	r3, [r7, #2]
 8005776:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005778:	887b      	ldrh	r3, [r7, #2]
 800577a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800577c:	7efb      	ldrb	r3, [r7, #27]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d00e      	beq.n	80057a0 <HAL_SPI_TransmitReceive+0x6e>
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005788:	d106      	bne.n	8005798 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d102      	bne.n	8005798 <HAL_SPI_TransmitReceive+0x66>
 8005792:	7efb      	ldrb	r3, [r7, #27]
 8005794:	2b04      	cmp	r3, #4
 8005796:	d003      	beq.n	80057a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005798:	2302      	movs	r3, #2
 800579a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800579e:	e1cd      	b.n	8005b3c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d005      	beq.n	80057b2 <HAL_SPI_TransmitReceive+0x80>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_SPI_TransmitReceive+0x80>
 80057ac:	887b      	ldrh	r3, [r7, #2]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d103      	bne.n	80057ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80057b8:	e1c0      	b.n	8005b3c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	d003      	beq.n	80057ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2205      	movs	r2, #5
 80057ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	887a      	ldrh	r2, [r7, #2]
 80057de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	887a      	ldrh	r2, [r7, #2]
 80057e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	887a      	ldrh	r2, [r7, #2]
 80057f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	887a      	ldrh	r2, [r7, #2]
 80057fa:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005810:	d802      	bhi.n	8005818 <HAL_SPI_TransmitReceive+0xe6>
 8005812:	8a3b      	ldrh	r3, [r7, #16]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d908      	bls.n	800582a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005826:	605a      	str	r2, [r3, #4]
 8005828:	e007      	b.n	800583a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005838:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005844:	2b40      	cmp	r3, #64	@ 0x40
 8005846:	d007      	beq.n	8005858 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005856:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005860:	d97c      	bls.n	800595c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <HAL_SPI_TransmitReceive+0x13e>
 800586a:	8a7b      	ldrh	r3, [r7, #18]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d169      	bne.n	8005944 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005874:	881a      	ldrh	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005880:	1c9a      	adds	r2, r3, #2
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800588a:	b29b      	uxth	r3, r3
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005894:	e056      	b.n	8005944 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d11b      	bne.n	80058dc <HAL_SPI_TransmitReceive+0x1aa>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d016      	beq.n	80058dc <HAL_SPI_TransmitReceive+0x1aa>
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d113      	bne.n	80058dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b8:	881a      	ldrh	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c4:	1c9a      	adds	r2, r3, #2
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d11c      	bne.n	8005924 <HAL_SPI_TransmitReceive+0x1f2>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d016      	beq.n	8005924 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68da      	ldr	r2, [r3, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005900:	b292      	uxth	r2, r2
 8005902:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005908:	1c9a      	adds	r2, r3, #2
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005920:	2301      	movs	r3, #1
 8005922:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005924:	f7fc ffce 	bl	80028c4 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005930:	429a      	cmp	r2, r3
 8005932:	d807      	bhi.n	8005944 <HAL_SPI_TransmitReceive+0x212>
 8005934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593a:	d003      	beq.n	8005944 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8005942:	e0fb      	b.n	8005b3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1a3      	bne.n	8005896 <HAL_SPI_TransmitReceive+0x164>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d19d      	bne.n	8005896 <HAL_SPI_TransmitReceive+0x164>
 800595a:	e0df      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_SPI_TransmitReceive+0x23a>
 8005964:	8a7b      	ldrh	r3, [r7, #18]
 8005966:	2b01      	cmp	r3, #1
 8005968:	f040 80cb 	bne.w	8005b02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b01      	cmp	r3, #1
 8005974:	d912      	bls.n	800599c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597a:	881a      	ldrh	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005986:	1c9a      	adds	r2, r3, #2
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b02      	subs	r3, #2
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800599a:	e0b2      	b.n	8005b02 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	330c      	adds	r3, #12
 80059a6:	7812      	ldrb	r2, [r2, #0]
 80059a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059c2:	e09e      	b.n	8005b02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d134      	bne.n	8005a3c <HAL_SPI_TransmitReceive+0x30a>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d02f      	beq.n	8005a3c <HAL_SPI_TransmitReceive+0x30a>
 80059dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d12c      	bne.n	8005a3c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d912      	bls.n	8005a12 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f0:	881a      	ldrh	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fc:	1c9a      	adds	r2, r3, #2
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3b02      	subs	r3, #2
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a10:	e012      	b.n	8005a38 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	7812      	ldrb	r2, [r2, #0]
 8005a1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d148      	bne.n	8005adc <HAL_SPI_TransmitReceive+0x3aa>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d042      	beq.n	8005adc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d923      	bls.n	8005aaa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6c:	b292      	uxth	r2, r2
 8005a6e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a74:	1c9a      	adds	r2, r3, #2
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	3b02      	subs	r3, #2
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d81f      	bhi.n	8005ad8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005aa6:	605a      	str	r2, [r3, #4]
 8005aa8:	e016      	b.n	8005ad8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f103 020c 	add.w	r2, r3, #12
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab6:	7812      	ldrb	r2, [r2, #0]
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005adc:	f7fc fef2 	bl	80028c4 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d803      	bhi.n	8005af4 <HAL_SPI_TransmitReceive+0x3c2>
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af2:	d102      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x3c8>
 8005af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d103      	bne.n	8005b02 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8005b00:	e01c      	b.n	8005b3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f47f af5b 	bne.w	80059c4 <HAL_SPI_TransmitReceive+0x292>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f47f af54 	bne.w	80059c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 fac7 	bl	80060b4 <SPI_EndRxTxTransaction>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d006      	beq.n	8005b3a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2220      	movs	r2, #32
 8005b36:	661a      	str	r2, [r3, #96]	@ 0x60
 8005b38:	e000      	b.n	8005b3c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005b3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3728      	adds	r7, #40	@ 0x28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	4613      	mov	r3, r2
 8005b64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_SPI_Transmit_DMA+0x20>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e0d8      	b.n	8005d2a <HAL_SPI_Transmit_DMA+0x1d2>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d002      	beq.n	8005b92 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b90:	e0c6      	b.n	8005d20 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <HAL_SPI_Transmit_DMA+0x46>
 8005b98:	88fb      	ldrh	r3, [r7, #6]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d102      	bne.n	8005ba4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ba2:	e0bd      	b.n	8005d20 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	88fa      	ldrh	r2, [r7, #6]
 8005bc2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bee:	d10f      	bne.n	8005c10 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bfe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c14:	4a47      	ldr	r2, [pc, #284]	@ (8005d34 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005c16:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1c:	4a46      	ldr	r2, [pc, #280]	@ (8005d38 <HAL_SPI_Transmit_DMA+0x1e0>)
 8005c1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c24:	4a45      	ldr	r2, [pc, #276]	@ (8005d3c <HAL_SPI_Transmit_DMA+0x1e4>)
 8005c26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c3e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c48:	d82d      	bhi.n	8005ca6 <HAL_SPI_Transmit_DMA+0x14e>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c54:	d127      	bne.n	8005ca6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10f      	bne.n	8005c84 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c72:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c82:	e010      	b.n	8005ca6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c92:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	085b      	lsrs	r3, r3, #1
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cae:	4619      	mov	r1, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	330c      	adds	r3, #12
 8005cb6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cbc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005cbe:	f7fd fd6b 	bl	8003798 <HAL_DMA_Start_IT>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00c      	beq.n	8005ce2 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ccc:	f043 0210 	orr.w	r2, r3, #16
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 8005ce0:	e01e      	b.n	8005d20 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cec:	2b40      	cmp	r3, #64	@ 0x40
 8005cee:	d007      	beq.n	8005d00 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cfe:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0220 	orr.w	r2, r2, #32
 8005d0e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0202 	orr.w	r2, r2, #2
 8005d1e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	08005e2b 	.word	0x08005e2b
 8005d38:	08005d85 	.word	0x08005d85
 8005d3c:	08005e47 	.word	0x08005e47

08005d40 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d76:	b2db      	uxtb	r3, r3
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d90:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d92:	f7fc fd97 	bl	80028c4 <HAL_GetTick>
 8005d96:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	d03b      	beq.n	8005e1e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0220 	bic.w	r2, r2, #32
 8005db4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0202 	bic.w	r2, r2, #2
 8005dc4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	2164      	movs	r1, #100	@ 0x64
 8005dca:	6978      	ldr	r0, [r7, #20]
 8005dcc:	f000 f972 	bl	80060b4 <SPI_EndRxTxTransaction>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dda:	f043 0220 	orr.w	r2, r3, #32
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2200      	movs	r2, #0
 8005e04:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005e16:	6978      	ldr	r0, [r7, #20]
 8005e18:	f7ff ff9c 	bl	8005d54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005e1c:	e002      	b.n	8005e24 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005e1e:	6978      	ldr	r0, [r7, #20]
 8005e20:	f7fb fba4 	bl	800156c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f7ff ff81 	bl	8005d40 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e3e:	bf00      	nop
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0203 	bic.w	r2, r2, #3
 8005e62:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e68:	f043 0210 	orr.w	r2, r3, #16
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff ff6b 	bl	8005d54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	4613      	mov	r3, r2
 8005e96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e98:	f7fc fd14 	bl	80028c4 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea0:	1a9b      	subs	r3, r3, r2
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ea8:	f7fc fd0c 	bl	80028c4 <HAL_GetTick>
 8005eac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005eae:	4b39      	ldr	r3, [pc, #228]	@ (8005f94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	015b      	lsls	r3, r3, #5
 8005eb4:	0d1b      	lsrs	r3, r3, #20
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	fb02 f303 	mul.w	r3, r2, r3
 8005ebc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ebe:	e054      	b.n	8005f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec6:	d050      	beq.n	8005f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ec8:	f7fc fcfc 	bl	80028c4 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d902      	bls.n	8005ede <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d13d      	bne.n	8005f5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005eec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ef6:	d111      	bne.n	8005f1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f00:	d004      	beq.n	8005f0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f0a:	d107      	bne.n	8005f1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f24:	d10f      	bne.n	8005f46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e017      	b.n	8005f8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4013      	ands	r3, r2
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	bf0c      	ite	eq
 8005f7a:	2301      	moveq	r3, #1
 8005f7c:	2300      	movne	r3, #0
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d19b      	bne.n	8005ec0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20000004 	.word	0x20000004

08005f98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b088      	sub	sp, #32
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005fa6:	f7fc fc8d 	bl	80028c4 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fae:	1a9b      	subs	r3, r3, r2
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fb6:	f7fc fc85 	bl	80028c4 <HAL_GetTick>
 8005fba:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005fbc:	4b3c      	ldr	r3, [pc, #240]	@ (80060b0 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	00da      	lsls	r2, r3, #3
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	0d1b      	lsrs	r3, r3, #20
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
 8005fd2:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8005fd4:	e05f      	b.n	8006096 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005fdc:	d106      	bne.n	8005fec <SPI_WaitFifoStateUntilTimeout+0x54>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d103      	bne.n	8005fec <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	330c      	adds	r3, #12
 8005fea:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff2:	d050      	beq.n	8006096 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ff4:	f7fc fc66 	bl	80028c4 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	429a      	cmp	r2, r3
 8006002:	d902      	bls.n	800600a <SPI_WaitFifoStateUntilTimeout+0x72>
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d13d      	bne.n	8006086 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006018:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006022:	d111      	bne.n	8006048 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800602c:	d004      	beq.n	8006038 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006036:	d107      	bne.n	8006048 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006046:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006050:	d10f      	bne.n	8006072 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006070:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e010      	b.n	80060a8 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	3b01      	subs	r3, #1
 8006094:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4013      	ands	r3, r2
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d197      	bne.n	8005fd6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3720      	adds	r7, #32
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000004 	.word	0x20000004

080060b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f7ff ff63 	bl	8005f98 <SPI_WaitFifoStateUntilTimeout>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d007      	beq.n	80060e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060dc:	f043 0220 	orr.w	r2, r3, #32
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e027      	b.n	8006138 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2200      	movs	r2, #0
 80060f0:	2180      	movs	r1, #128	@ 0x80
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f7ff fec8 	bl	8005e88 <SPI_WaitFlagStateUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006102:	f043 0220 	orr.w	r2, r3, #32
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e014      	b.n	8006138 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2200      	movs	r2, #0
 8006116:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f7ff ff3c 	bl	8005f98 <SPI_WaitFifoStateUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d007      	beq.n	8006136 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800612a:	f043 0220 	orr.w	r2, r3, #32
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e000      	b.n	8006138 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e040      	b.n	80061d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fc f970 	bl	8002448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2224      	movs	r2, #36	@ 0x24
 800616c:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0201 	bic.w	r2, r2, #1
 800617c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f8be 	bl	8006300 <UART_SetConfig>
 8006184:	4603      	mov	r3, r0
 8006186:	2b01      	cmp	r3, #1
 8006188:	d101      	bne.n	800618e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e022      	b.n	80061d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fae0 	bl	800675c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0201 	orr.w	r2, r2, #1
 80061ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fb67 	bl	80068a0 <UART_CheckIdleState>
 80061d2:	4603      	mov	r3, r0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08a      	sub	sp, #40	@ 0x28
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	4613      	mov	r3, r2
 80061ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	d17f      	bne.n	80062f4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <HAL_UART_Transmit+0x24>
 80061fa:	88fb      	ldrh	r3, [r7, #6]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e078      	b.n	80062f6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <HAL_UART_Transmit+0x36>
 800620e:	2302      	movs	r3, #2
 8006210:	e071      	b.n	80062f6 <HAL_UART_Transmit+0x11a>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2221      	movs	r2, #33	@ 0x21
 8006224:	675a      	str	r2, [r3, #116]	@ 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006226:	f7fc fb4d 	bl	80028c4 <HAL_GetTick>
 800622a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	88fa      	ldrh	r2, [r7, #6]
 8006230:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	88fa      	ldrh	r2, [r7, #6]
 8006238:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006244:	d108      	bne.n	8006258 <HAL_UART_Transmit+0x7c>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d104      	bne.n	8006258 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800624e:	2300      	movs	r3, #0
 8006250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	e003      	b.n	8006260 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800625c:	2300      	movs	r3, #0
 800625e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    while (huart->TxXferCount > 0U)
 8006268:	e02c      	b.n	80062c4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2200      	movs	r2, #0
 8006272:	2180      	movs	r1, #128	@ 0x80
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fb58 	bl	800692a <UART_WaitOnFlagUntilTimeout>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e038      	b.n	80062f6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10b      	bne.n	80062a2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	881a      	ldrh	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006296:	b292      	uxth	r2, r2
 8006298:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	3302      	adds	r3, #2
 800629e:	61bb      	str	r3, [r7, #24]
 80062a0:	e007      	b.n	80062b2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	781a      	ldrb	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	3301      	adds	r3, #1
 80062b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1cc      	bne.n	800626a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2200      	movs	r2, #0
 80062d8:	2140      	movs	r1, #64	@ 0x40
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fb25 	bl	800692a <UART_WaitOnFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e005      	b.n	80062f6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2220      	movs	r2, #32
 80062ee:	675a      	str	r2, [r3, #116]	@ 0x74

    return HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e000      	b.n	80062f6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80062f4:	2302      	movs	r3, #2
  }
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3720      	adds	r7, #32
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
	...

08006300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006304:	b08a      	sub	sp, #40	@ 0x28
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	431a      	orrs	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	431a      	orrs	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	4313      	orrs	r3, r2
 8006326:	627b      	str	r3, [r7, #36]	@ 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	4bb4      	ldr	r3, [pc, #720]	@ (8006600 <UART_SetConfig+0x300>)
 8006330:	4013      	ands	r3, r2
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	6812      	ldr	r2, [r2, #0]
 8006336:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006338:	430b      	orrs	r3, r1
 800633a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4aa9      	ldr	r2, [pc, #676]	@ (8006604 <UART_SetConfig+0x304>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d004      	beq.n	800636c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006368:	4313      	orrs	r3, r2
 800636a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800637c:	430a      	orrs	r2, r1
 800637e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4aa0      	ldr	r2, [pc, #640]	@ (8006608 <UART_SetConfig+0x308>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d126      	bne.n	80063d8 <UART_SetConfig+0xd8>
 800638a:	4ba0      	ldr	r3, [pc, #640]	@ (800660c <UART_SetConfig+0x30c>)
 800638c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006390:	f003 0303 	and.w	r3, r3, #3
 8006394:	2b03      	cmp	r3, #3
 8006396:	d81b      	bhi.n	80063d0 <UART_SetConfig+0xd0>
 8006398:	a201      	add	r2, pc, #4	@ (adr r2, 80063a0 <UART_SetConfig+0xa0>)
 800639a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639e:	bf00      	nop
 80063a0:	080063b1 	.word	0x080063b1
 80063a4:	080063c1 	.word	0x080063c1
 80063a8:	080063b9 	.word	0x080063b9
 80063ac:	080063c9 	.word	0x080063c9
 80063b0:	2301      	movs	r3, #1
 80063b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063b6:	e080      	b.n	80064ba <UART_SetConfig+0x1ba>
 80063b8:	2302      	movs	r3, #2
 80063ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063be:	e07c      	b.n	80064ba <UART_SetConfig+0x1ba>
 80063c0:	2304      	movs	r3, #4
 80063c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063c6:	e078      	b.n	80064ba <UART_SetConfig+0x1ba>
 80063c8:	2308      	movs	r3, #8
 80063ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ce:	e074      	b.n	80064ba <UART_SetConfig+0x1ba>
 80063d0:	2310      	movs	r3, #16
 80063d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063d6:	e070      	b.n	80064ba <UART_SetConfig+0x1ba>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a8c      	ldr	r2, [pc, #560]	@ (8006610 <UART_SetConfig+0x310>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d138      	bne.n	8006454 <UART_SetConfig+0x154>
 80063e2:	4b8a      	ldr	r3, [pc, #552]	@ (800660c <UART_SetConfig+0x30c>)
 80063e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e8:	f003 030c 	and.w	r3, r3, #12
 80063ec:	2b0c      	cmp	r3, #12
 80063ee:	d82d      	bhi.n	800644c <UART_SetConfig+0x14c>
 80063f0:	a201      	add	r2, pc, #4	@ (adr r2, 80063f8 <UART_SetConfig+0xf8>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	0800642d 	.word	0x0800642d
 80063fc:	0800644d 	.word	0x0800644d
 8006400:	0800644d 	.word	0x0800644d
 8006404:	0800644d 	.word	0x0800644d
 8006408:	0800643d 	.word	0x0800643d
 800640c:	0800644d 	.word	0x0800644d
 8006410:	0800644d 	.word	0x0800644d
 8006414:	0800644d 	.word	0x0800644d
 8006418:	08006435 	.word	0x08006435
 800641c:	0800644d 	.word	0x0800644d
 8006420:	0800644d 	.word	0x0800644d
 8006424:	0800644d 	.word	0x0800644d
 8006428:	08006445 	.word	0x08006445
 800642c:	2300      	movs	r3, #0
 800642e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006432:	e042      	b.n	80064ba <UART_SetConfig+0x1ba>
 8006434:	2302      	movs	r3, #2
 8006436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800643a:	e03e      	b.n	80064ba <UART_SetConfig+0x1ba>
 800643c:	2304      	movs	r3, #4
 800643e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006442:	e03a      	b.n	80064ba <UART_SetConfig+0x1ba>
 8006444:	2308      	movs	r3, #8
 8006446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800644a:	e036      	b.n	80064ba <UART_SetConfig+0x1ba>
 800644c:	2310      	movs	r3, #16
 800644e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006452:	e032      	b.n	80064ba <UART_SetConfig+0x1ba>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a6a      	ldr	r2, [pc, #424]	@ (8006604 <UART_SetConfig+0x304>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d12a      	bne.n	80064b4 <UART_SetConfig+0x1b4>
 800645e:	4b6b      	ldr	r3, [pc, #428]	@ (800660c <UART_SetConfig+0x30c>)
 8006460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006464:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006468:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800646c:	d01a      	beq.n	80064a4 <UART_SetConfig+0x1a4>
 800646e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006472:	d81b      	bhi.n	80064ac <UART_SetConfig+0x1ac>
 8006474:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006478:	d00c      	beq.n	8006494 <UART_SetConfig+0x194>
 800647a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800647e:	d815      	bhi.n	80064ac <UART_SetConfig+0x1ac>
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <UART_SetConfig+0x18c>
 8006484:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006488:	d008      	beq.n	800649c <UART_SetConfig+0x19c>
 800648a:	e00f      	b.n	80064ac <UART_SetConfig+0x1ac>
 800648c:	2300      	movs	r3, #0
 800648e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006492:	e012      	b.n	80064ba <UART_SetConfig+0x1ba>
 8006494:	2302      	movs	r3, #2
 8006496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800649a:	e00e      	b.n	80064ba <UART_SetConfig+0x1ba>
 800649c:	2304      	movs	r3, #4
 800649e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064a2:	e00a      	b.n	80064ba <UART_SetConfig+0x1ba>
 80064a4:	2308      	movs	r3, #8
 80064a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064aa:	e006      	b.n	80064ba <UART_SetConfig+0x1ba>
 80064ac:	2310      	movs	r3, #16
 80064ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064b2:	e002      	b.n	80064ba <UART_SetConfig+0x1ba>
 80064b4:	2310      	movs	r3, #16
 80064b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a51      	ldr	r2, [pc, #324]	@ (8006604 <UART_SetConfig+0x304>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d17a      	bne.n	80065ba <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d824      	bhi.n	8006516 <UART_SetConfig+0x216>
 80064cc:	a201      	add	r2, pc, #4	@ (adr r2, 80064d4 <UART_SetConfig+0x1d4>)
 80064ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d2:	bf00      	nop
 80064d4:	080064f9 	.word	0x080064f9
 80064d8:	08006517 	.word	0x08006517
 80064dc:	08006501 	.word	0x08006501
 80064e0:	08006517 	.word	0x08006517
 80064e4:	08006507 	.word	0x08006507
 80064e8:	08006517 	.word	0x08006517
 80064ec:	08006517 	.word	0x08006517
 80064f0:	08006517 	.word	0x08006517
 80064f4:	0800650f 	.word	0x0800650f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f8:	f7fe fb44 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 80064fc:	61f8      	str	r0, [r7, #28]
        break;
 80064fe:	e010      	b.n	8006522 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006500:	4b44      	ldr	r3, [pc, #272]	@ (8006614 <UART_SetConfig+0x314>)
 8006502:	61fb      	str	r3, [r7, #28]
        break;
 8006504:	e00d      	b.n	8006522 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006506:	f7fe faa5 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 800650a:	61f8      	str	r0, [r7, #28]
        break;
 800650c:	e009      	b.n	8006522 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800650e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006512:	61fb      	str	r3, [r7, #28]
        break;
 8006514:	e005      	b.n	8006522 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006520:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8109 	beq.w	800673c <UART_SetConfig+0x43c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	4613      	mov	r3, r2
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	4413      	add	r3, r2
 8006534:	69fa      	ldr	r2, [r7, #28]
 8006536:	429a      	cmp	r2, r3
 8006538:	d305      	bcc.n	8006546 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	429a      	cmp	r2, r3
 8006544:	d903      	bls.n	800654e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800654c:	e0f6      	b.n	800673c <UART_SetConfig+0x43c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	2200      	movs	r2, #0
 8006552:	461c      	mov	r4, r3
 8006554:	4615      	mov	r5, r2
 8006556:	f04f 0200 	mov.w	r2, #0
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	022b      	lsls	r3, r5, #8
 8006560:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006564:	0222      	lsls	r2, r4, #8
 8006566:	68f9      	ldr	r1, [r7, #12]
 8006568:	6849      	ldr	r1, [r1, #4]
 800656a:	0849      	lsrs	r1, r1, #1
 800656c:	2000      	movs	r0, #0
 800656e:	4688      	mov	r8, r1
 8006570:	4681      	mov	r9, r0
 8006572:	eb12 0a08 	adds.w	sl, r2, r8
 8006576:	eb43 0b09 	adc.w	fp, r3, r9
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	603b      	str	r3, [r7, #0]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006588:	4650      	mov	r0, sl
 800658a:	4659      	mov	r1, fp
 800658c:	f7f9 fe88 	bl	80002a0 <__aeabi_uldivmod>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4613      	mov	r3, r2
 8006596:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800659e:	d308      	bcc.n	80065b2 <UART_SetConfig+0x2b2>
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065a6:	d204      	bcs.n	80065b2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	60da      	str	r2, [r3, #12]
 80065b0:	e0c4      	b.n	800673c <UART_SetConfig+0x43c>
        }
        else
        {
          ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80065b8:	e0c0      	b.n	800673c <UART_SetConfig+0x43c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065c2:	d16b      	bne.n	800669c <UART_SetConfig+0x39c>
  {
    switch (clocksource)
 80065c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	d834      	bhi.n	8006636 <UART_SetConfig+0x336>
 80065cc:	a201      	add	r2, pc, #4	@ (adr r2, 80065d4 <UART_SetConfig+0x2d4>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	080065f9 	.word	0x080065f9
 80065d8:	08006619 	.word	0x08006619
 80065dc:	08006621 	.word	0x08006621
 80065e0:	08006637 	.word	0x08006637
 80065e4:	08006627 	.word	0x08006627
 80065e8:	08006637 	.word	0x08006637
 80065ec:	08006637 	.word	0x08006637
 80065f0:	08006637 	.word	0x08006637
 80065f4:	0800662f 	.word	0x0800662f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065f8:	f7fe fac4 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 80065fc:	61f8      	str	r0, [r7, #28]
        break;
 80065fe:	e020      	b.n	8006642 <UART_SetConfig+0x342>
 8006600:	efff69f3 	.word	0xefff69f3
 8006604:	40008000 	.word	0x40008000
 8006608:	40013800 	.word	0x40013800
 800660c:	40021000 	.word	0x40021000
 8006610:	40004400 	.word	0x40004400
 8006614:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006618:	f7fe faca 	bl	8004bb0 <HAL_RCC_GetPCLK2Freq>
 800661c:	61f8      	str	r0, [r7, #28]
        break;
 800661e:	e010      	b.n	8006642 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006620:	4b4d      	ldr	r3, [pc, #308]	@ (8006758 <UART_SetConfig+0x458>)
 8006622:	61fb      	str	r3, [r7, #28]
        break;
 8006624:	e00d      	b.n	8006642 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006626:	f7fe fa15 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 800662a:	61f8      	str	r0, [r7, #28]
        break;
 800662c:	e009      	b.n	8006642 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800662e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006632:	61fb      	str	r3, [r7, #28]
        break;
 8006634:	e005      	b.n	8006642 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006640:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d079      	beq.n	800673c <UART_SetConfig+0x43c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	005a      	lsls	r2, r3, #1
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	085b      	lsrs	r3, r3, #1
 8006652:	441a      	add	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	fbb2 f3f3 	udiv	r3, r2, r3
 800665c:	b29b      	uxth	r3, r3
 800665e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b0f      	cmp	r3, #15
 8006664:	d916      	bls.n	8006694 <UART_SetConfig+0x394>
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800666c:	d212      	bcs.n	8006694 <UART_SetConfig+0x394>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	b29b      	uxth	r3, r3
 8006672:	f023 030f 	bic.w	r3, r3, #15
 8006676:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	085b      	lsrs	r3, r3, #1
 800667c:	b29b      	uxth	r3, r3
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	b29a      	uxth	r2, r3
 8006684:	8afb      	ldrh	r3, [r7, #22]
 8006686:	4313      	orrs	r3, r2
 8006688:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	8afa      	ldrh	r2, [r7, #22]
 8006690:	60da      	str	r2, [r3, #12]
 8006692:	e053      	b.n	800673c <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800669a:	e04f      	b.n	800673c <UART_SetConfig+0x43c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800669c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d828      	bhi.n	80066f6 <UART_SetConfig+0x3f6>
 80066a4:	a201      	add	r2, pc, #4	@ (adr r2, 80066ac <UART_SetConfig+0x3ac>)
 80066a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066aa:	bf00      	nop
 80066ac:	080066d1 	.word	0x080066d1
 80066b0:	080066d9 	.word	0x080066d9
 80066b4:	080066e1 	.word	0x080066e1
 80066b8:	080066f7 	.word	0x080066f7
 80066bc:	080066e7 	.word	0x080066e7
 80066c0:	080066f7 	.word	0x080066f7
 80066c4:	080066f7 	.word	0x080066f7
 80066c8:	080066f7 	.word	0x080066f7
 80066cc:	080066ef 	.word	0x080066ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066d0:	f7fe fa58 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 80066d4:	61f8      	str	r0, [r7, #28]
        break;
 80066d6:	e014      	b.n	8006702 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066d8:	f7fe fa6a 	bl	8004bb0 <HAL_RCC_GetPCLK2Freq>
 80066dc:	61f8      	str	r0, [r7, #28]
        break;
 80066de:	e010      	b.n	8006702 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006758 <UART_SetConfig+0x458>)
 80066e2:	61fb      	str	r3, [r7, #28]
        break;
 80066e4:	e00d      	b.n	8006702 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066e6:	f7fe f9b5 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 80066ea:	61f8      	str	r0, [r7, #28]
        break;
 80066ec:	e009      	b.n	8006702 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066f2:	61fb      	str	r3, [r7, #28]
        break;
 80066f4:	e005      	b.n	8006702 <UART_SetConfig+0x402>
      default:
        pclk = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006700:	bf00      	nop
    }

    if (pclk != 0U)
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d019      	beq.n	800673c <UART_SetConfig+0x43c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	085a      	lsrs	r2, r3, #1
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	441a      	add	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	fbb2 f3f3 	udiv	r3, r2, r3
 800671a:	b29b      	uxth	r3, r3
 800671c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	2b0f      	cmp	r3, #15
 8006722:	d908      	bls.n	8006736 <UART_SetConfig+0x436>
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800672a:	d204      	bcs.n	8006736 <UART_SetConfig+0x436>
      {
        huart->Instance->BRR = usartdiv;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	60da      	str	r2, [r3, #12]
 8006734:	e002      	b.n	800673c <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 8006748:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800674c:	4618      	mov	r0, r3
 800674e:	3728      	adds	r7, #40	@ 0x28
 8006750:	46bd      	mov	sp, r7
 8006752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006756:	bf00      	nop
 8006758:	00f42400 	.word	0x00f42400

0800675c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f0:	f003 0310 	and.w	r3, r3, #16
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01a      	beq.n	8006872 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006856:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800685a:	d10a      	bne.n	8006872 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	605a      	str	r2, [r3, #4]
  }
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80068ae:	f7fc f809 	bl	80028c4 <HAL_GetTick>
 80068b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	2b08      	cmp	r3, #8
 80068c0:	d10e      	bne.n	80068e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f82a 	bl	800692a <UART_WaitOnFlagUntilTimeout>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e020      	b.n	8006922 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d10e      	bne.n	800690c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f814 	bl	800692a <UART_WaitOnFlagUntilTimeout>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e00a      	b.n	8006922 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2220      	movs	r2, #32
 8006910:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2220      	movs	r2, #32
 8006916:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	603b      	str	r3, [r7, #0]
 8006936:	4613      	mov	r3, r2
 8006938:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800693a:	e05d      	b.n	80069f8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006942:	d059      	beq.n	80069f8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006944:	f7fb ffbe 	bl	80028c4 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	429a      	cmp	r2, r3
 8006952:	d302      	bcc.n	800695a <UART_WaitOnFlagUntilTimeout+0x30>
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d11b      	bne.n	8006992 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8006968:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0201 	bic.w	r2, r2, #1
 8006978:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2220      	movs	r2, #32
 800697e:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2220      	movs	r2, #32
 8006984:	679a      	str	r2, [r3, #120]	@ 0x78

        __HAL_UNLOCK(huart);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

        return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e042      	b.n	8006a18 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b00      	cmp	r3, #0
 800699e:	d02b      	beq.n	80069f8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069ae:	d123      	bne.n	80069f8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80069c8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 0201 	bic.w	r2, r2, #1
 80069d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	675a      	str	r2, [r3, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	67da      	str	r2, [r3, #124]	@ 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

          return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e00f      	b.n	8006a18 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	69da      	ldr	r2, [r3, #28]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	4013      	ands	r3, r2
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	bf0c      	ite	eq
 8006a08:	2301      	moveq	r3, #1
 8006a0a:	2300      	movne	r3, #0
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	461a      	mov	r2, r3
 8006a10:	79fb      	ldrb	r3, [r7, #7]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d092      	beq.n	800693c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <_ZdlPvj>:
 8006a20:	f000 b800 	b.w	8006a24 <_ZdlPv>

08006a24 <_ZdlPv>:
 8006a24:	f000 b808 	b.w	8006a38 <free>

08006a28 <malloc>:
 8006a28:	4b02      	ldr	r3, [pc, #8]	@ (8006a34 <malloc+0xc>)
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	f000 b82d 	b.w	8006a8c <_malloc_r>
 8006a32:	bf00      	nop
 8006a34:	2000001c 	.word	0x2000001c

08006a38 <free>:
 8006a38:	4b02      	ldr	r3, [pc, #8]	@ (8006a44 <free+0xc>)
 8006a3a:	4601      	mov	r1, r0
 8006a3c:	6818      	ldr	r0, [r3, #0]
 8006a3e:	f000 ba95 	b.w	8006f6c <_free_r>
 8006a42:	bf00      	nop
 8006a44:	2000001c 	.word	0x2000001c

08006a48 <sbrk_aligned>:
 8006a48:	b570      	push	{r4, r5, r6, lr}
 8006a4a:	4e0f      	ldr	r6, [pc, #60]	@ (8006a88 <sbrk_aligned+0x40>)
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	6831      	ldr	r1, [r6, #0]
 8006a50:	4605      	mov	r5, r0
 8006a52:	b911      	cbnz	r1, 8006a5a <sbrk_aligned+0x12>
 8006a54:	f000 fa2c 	bl	8006eb0 <_sbrk_r>
 8006a58:	6030      	str	r0, [r6, #0]
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	f000 fa27 	bl	8006eb0 <_sbrk_r>
 8006a62:	1c43      	adds	r3, r0, #1
 8006a64:	d103      	bne.n	8006a6e <sbrk_aligned+0x26>
 8006a66:	f04f 34ff 	mov.w	r4, #4294967295
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	bd70      	pop	{r4, r5, r6, pc}
 8006a6e:	1cc4      	adds	r4, r0, #3
 8006a70:	f024 0403 	bic.w	r4, r4, #3
 8006a74:	42a0      	cmp	r0, r4
 8006a76:	d0f8      	beq.n	8006a6a <sbrk_aligned+0x22>
 8006a78:	1a21      	subs	r1, r4, r0
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f000 fa18 	bl	8006eb0 <_sbrk_r>
 8006a80:	3001      	adds	r0, #1
 8006a82:	d1f2      	bne.n	8006a6a <sbrk_aligned+0x22>
 8006a84:	e7ef      	b.n	8006a66 <sbrk_aligned+0x1e>
 8006a86:	bf00      	nop
 8006a88:	2000040c 	.word	0x2000040c

08006a8c <_malloc_r>:
 8006a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a90:	1ccd      	adds	r5, r1, #3
 8006a92:	f025 0503 	bic.w	r5, r5, #3
 8006a96:	3508      	adds	r5, #8
 8006a98:	2d0c      	cmp	r5, #12
 8006a9a:	bf38      	it	cc
 8006a9c:	250c      	movcc	r5, #12
 8006a9e:	2d00      	cmp	r5, #0
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	db01      	blt.n	8006aa8 <_malloc_r+0x1c>
 8006aa4:	42a9      	cmp	r1, r5
 8006aa6:	d904      	bls.n	8006ab2 <_malloc_r+0x26>
 8006aa8:	230c      	movs	r3, #12
 8006aaa:	6033      	str	r3, [r6, #0]
 8006aac:	2000      	movs	r0, #0
 8006aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ab2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b88 <_malloc_r+0xfc>
 8006ab6:	f000 f869 	bl	8006b8c <__malloc_lock>
 8006aba:	f8d8 3000 	ldr.w	r3, [r8]
 8006abe:	461c      	mov	r4, r3
 8006ac0:	bb44      	cbnz	r4, 8006b14 <_malloc_r+0x88>
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f7ff ffbf 	bl	8006a48 <sbrk_aligned>
 8006aca:	1c43      	adds	r3, r0, #1
 8006acc:	4604      	mov	r4, r0
 8006ace:	d158      	bne.n	8006b82 <_malloc_r+0xf6>
 8006ad0:	f8d8 4000 	ldr.w	r4, [r8]
 8006ad4:	4627      	mov	r7, r4
 8006ad6:	2f00      	cmp	r7, #0
 8006ad8:	d143      	bne.n	8006b62 <_malloc_r+0xd6>
 8006ada:	2c00      	cmp	r4, #0
 8006adc:	d04b      	beq.n	8006b76 <_malloc_r+0xea>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	4639      	mov	r1, r7
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	eb04 0903 	add.w	r9, r4, r3
 8006ae8:	f000 f9e2 	bl	8006eb0 <_sbrk_r>
 8006aec:	4581      	cmp	r9, r0
 8006aee:	d142      	bne.n	8006b76 <_malloc_r+0xea>
 8006af0:	6821      	ldr	r1, [r4, #0]
 8006af2:	1a6d      	subs	r5, r5, r1
 8006af4:	4629      	mov	r1, r5
 8006af6:	4630      	mov	r0, r6
 8006af8:	f7ff ffa6 	bl	8006a48 <sbrk_aligned>
 8006afc:	3001      	adds	r0, #1
 8006afe:	d03a      	beq.n	8006b76 <_malloc_r+0xea>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	442b      	add	r3, r5
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	f8d8 3000 	ldr.w	r3, [r8]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	bb62      	cbnz	r2, 8006b68 <_malloc_r+0xdc>
 8006b0e:	f8c8 7000 	str.w	r7, [r8]
 8006b12:	e00f      	b.n	8006b34 <_malloc_r+0xa8>
 8006b14:	6822      	ldr	r2, [r4, #0]
 8006b16:	1b52      	subs	r2, r2, r5
 8006b18:	d420      	bmi.n	8006b5c <_malloc_r+0xd0>
 8006b1a:	2a0b      	cmp	r2, #11
 8006b1c:	d917      	bls.n	8006b4e <_malloc_r+0xc2>
 8006b1e:	1961      	adds	r1, r4, r5
 8006b20:	42a3      	cmp	r3, r4
 8006b22:	6025      	str	r5, [r4, #0]
 8006b24:	bf18      	it	ne
 8006b26:	6059      	strne	r1, [r3, #4]
 8006b28:	6863      	ldr	r3, [r4, #4]
 8006b2a:	bf08      	it	eq
 8006b2c:	f8c8 1000 	streq.w	r1, [r8]
 8006b30:	5162      	str	r2, [r4, r5]
 8006b32:	604b      	str	r3, [r1, #4]
 8006b34:	4630      	mov	r0, r6
 8006b36:	f000 f82f 	bl	8006b98 <__malloc_unlock>
 8006b3a:	f104 000b 	add.w	r0, r4, #11
 8006b3e:	1d23      	adds	r3, r4, #4
 8006b40:	f020 0007 	bic.w	r0, r0, #7
 8006b44:	1ac2      	subs	r2, r0, r3
 8006b46:	bf1c      	itt	ne
 8006b48:	1a1b      	subne	r3, r3, r0
 8006b4a:	50a3      	strne	r3, [r4, r2]
 8006b4c:	e7af      	b.n	8006aae <_malloc_r+0x22>
 8006b4e:	6862      	ldr	r2, [r4, #4]
 8006b50:	42a3      	cmp	r3, r4
 8006b52:	bf0c      	ite	eq
 8006b54:	f8c8 2000 	streq.w	r2, [r8]
 8006b58:	605a      	strne	r2, [r3, #4]
 8006b5a:	e7eb      	b.n	8006b34 <_malloc_r+0xa8>
 8006b5c:	4623      	mov	r3, r4
 8006b5e:	6864      	ldr	r4, [r4, #4]
 8006b60:	e7ae      	b.n	8006ac0 <_malloc_r+0x34>
 8006b62:	463c      	mov	r4, r7
 8006b64:	687f      	ldr	r7, [r7, #4]
 8006b66:	e7b6      	b.n	8006ad6 <_malloc_r+0x4a>
 8006b68:	461a      	mov	r2, r3
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	42a3      	cmp	r3, r4
 8006b6e:	d1fb      	bne.n	8006b68 <_malloc_r+0xdc>
 8006b70:	2300      	movs	r3, #0
 8006b72:	6053      	str	r3, [r2, #4]
 8006b74:	e7de      	b.n	8006b34 <_malloc_r+0xa8>
 8006b76:	230c      	movs	r3, #12
 8006b78:	6033      	str	r3, [r6, #0]
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f000 f80c 	bl	8006b98 <__malloc_unlock>
 8006b80:	e794      	b.n	8006aac <_malloc_r+0x20>
 8006b82:	6005      	str	r5, [r0, #0]
 8006b84:	e7d6      	b.n	8006b34 <_malloc_r+0xa8>
 8006b86:	bf00      	nop
 8006b88:	20000410 	.word	0x20000410

08006b8c <__malloc_lock>:
 8006b8c:	4801      	ldr	r0, [pc, #4]	@ (8006b94 <__malloc_lock+0x8>)
 8006b8e:	f000 b9dc 	b.w	8006f4a <__retarget_lock_acquire_recursive>
 8006b92:	bf00      	nop
 8006b94:	20000554 	.word	0x20000554

08006b98 <__malloc_unlock>:
 8006b98:	4801      	ldr	r0, [pc, #4]	@ (8006ba0 <__malloc_unlock+0x8>)
 8006b9a:	f000 b9d7 	b.w	8006f4c <__retarget_lock_release_recursive>
 8006b9e:	bf00      	nop
 8006ba0:	20000554 	.word	0x20000554

08006ba4 <std>:
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	b510      	push	{r4, lr}
 8006ba8:	4604      	mov	r4, r0
 8006baa:	e9c0 3300 	strd	r3, r3, [r0]
 8006bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bb2:	6083      	str	r3, [r0, #8]
 8006bb4:	8181      	strh	r1, [r0, #12]
 8006bb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bb8:	81c2      	strh	r2, [r0, #14]
 8006bba:	6183      	str	r3, [r0, #24]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	2208      	movs	r2, #8
 8006bc0:	305c      	adds	r0, #92	@ 0x5c
 8006bc2:	f000 f926 	bl	8006e12 <memset>
 8006bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006bfc <std+0x58>)
 8006bc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bca:	4b0d      	ldr	r3, [pc, #52]	@ (8006c00 <std+0x5c>)
 8006bcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bce:	4b0d      	ldr	r3, [pc, #52]	@ (8006c04 <std+0x60>)
 8006bd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c08 <std+0x64>)
 8006bd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c0c <std+0x68>)
 8006bd8:	6224      	str	r4, [r4, #32]
 8006bda:	429c      	cmp	r4, r3
 8006bdc:	d006      	beq.n	8006bec <std+0x48>
 8006bde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006be2:	4294      	cmp	r4, r2
 8006be4:	d002      	beq.n	8006bec <std+0x48>
 8006be6:	33d0      	adds	r3, #208	@ 0xd0
 8006be8:	429c      	cmp	r4, r3
 8006bea:	d105      	bne.n	8006bf8 <std+0x54>
 8006bec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf4:	f000 b9a8 	b.w	8006f48 <__retarget_lock_init_recursive>
 8006bf8:	bd10      	pop	{r4, pc}
 8006bfa:	bf00      	nop
 8006bfc:	08006d8d 	.word	0x08006d8d
 8006c00:	08006daf 	.word	0x08006daf
 8006c04:	08006de7 	.word	0x08006de7
 8006c08:	08006e0b 	.word	0x08006e0b
 8006c0c:	20000414 	.word	0x20000414

08006c10 <stdio_exit_handler>:
 8006c10:	4a02      	ldr	r2, [pc, #8]	@ (8006c1c <stdio_exit_handler+0xc>)
 8006c12:	4903      	ldr	r1, [pc, #12]	@ (8006c20 <stdio_exit_handler+0x10>)
 8006c14:	4803      	ldr	r0, [pc, #12]	@ (8006c24 <stdio_exit_handler+0x14>)
 8006c16:	f000 b869 	b.w	8006cec <_fwalk_sglue>
 8006c1a:	bf00      	nop
 8006c1c:	20000010 	.word	0x20000010
 8006c20:	08007959 	.word	0x08007959
 8006c24:	20000020 	.word	0x20000020

08006c28 <cleanup_stdio>:
 8006c28:	6841      	ldr	r1, [r0, #4]
 8006c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c5c <cleanup_stdio+0x34>)
 8006c2c:	4299      	cmp	r1, r3
 8006c2e:	b510      	push	{r4, lr}
 8006c30:	4604      	mov	r4, r0
 8006c32:	d001      	beq.n	8006c38 <cleanup_stdio+0x10>
 8006c34:	f000 fe90 	bl	8007958 <_fflush_r>
 8006c38:	68a1      	ldr	r1, [r4, #8]
 8006c3a:	4b09      	ldr	r3, [pc, #36]	@ (8006c60 <cleanup_stdio+0x38>)
 8006c3c:	4299      	cmp	r1, r3
 8006c3e:	d002      	beq.n	8006c46 <cleanup_stdio+0x1e>
 8006c40:	4620      	mov	r0, r4
 8006c42:	f000 fe89 	bl	8007958 <_fflush_r>
 8006c46:	68e1      	ldr	r1, [r4, #12]
 8006c48:	4b06      	ldr	r3, [pc, #24]	@ (8006c64 <cleanup_stdio+0x3c>)
 8006c4a:	4299      	cmp	r1, r3
 8006c4c:	d004      	beq.n	8006c58 <cleanup_stdio+0x30>
 8006c4e:	4620      	mov	r0, r4
 8006c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c54:	f000 be80 	b.w	8007958 <_fflush_r>
 8006c58:	bd10      	pop	{r4, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000414 	.word	0x20000414
 8006c60:	2000047c 	.word	0x2000047c
 8006c64:	200004e4 	.word	0x200004e4

08006c68 <global_stdio_init.part.0>:
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c98 <global_stdio_init.part.0+0x30>)
 8006c6c:	4c0b      	ldr	r4, [pc, #44]	@ (8006c9c <global_stdio_init.part.0+0x34>)
 8006c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ca0 <global_stdio_init.part.0+0x38>)
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	4620      	mov	r0, r4
 8006c74:	2200      	movs	r2, #0
 8006c76:	2104      	movs	r1, #4
 8006c78:	f7ff ff94 	bl	8006ba4 <std>
 8006c7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c80:	2201      	movs	r2, #1
 8006c82:	2109      	movs	r1, #9
 8006c84:	f7ff ff8e 	bl	8006ba4 <std>
 8006c88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c92:	2112      	movs	r1, #18
 8006c94:	f7ff bf86 	b.w	8006ba4 <std>
 8006c98:	2000054c 	.word	0x2000054c
 8006c9c:	20000414 	.word	0x20000414
 8006ca0:	08006c11 	.word	0x08006c11

08006ca4 <__sfp_lock_acquire>:
 8006ca4:	4801      	ldr	r0, [pc, #4]	@ (8006cac <__sfp_lock_acquire+0x8>)
 8006ca6:	f000 b950 	b.w	8006f4a <__retarget_lock_acquire_recursive>
 8006caa:	bf00      	nop
 8006cac:	20000555 	.word	0x20000555

08006cb0 <__sfp_lock_release>:
 8006cb0:	4801      	ldr	r0, [pc, #4]	@ (8006cb8 <__sfp_lock_release+0x8>)
 8006cb2:	f000 b94b 	b.w	8006f4c <__retarget_lock_release_recursive>
 8006cb6:	bf00      	nop
 8006cb8:	20000555 	.word	0x20000555

08006cbc <__sinit>:
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	f7ff fff0 	bl	8006ca4 <__sfp_lock_acquire>
 8006cc4:	6a23      	ldr	r3, [r4, #32]
 8006cc6:	b11b      	cbz	r3, 8006cd0 <__sinit+0x14>
 8006cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ccc:	f7ff bff0 	b.w	8006cb0 <__sfp_lock_release>
 8006cd0:	4b04      	ldr	r3, [pc, #16]	@ (8006ce4 <__sinit+0x28>)
 8006cd2:	6223      	str	r3, [r4, #32]
 8006cd4:	4b04      	ldr	r3, [pc, #16]	@ (8006ce8 <__sinit+0x2c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1f5      	bne.n	8006cc8 <__sinit+0xc>
 8006cdc:	f7ff ffc4 	bl	8006c68 <global_stdio_init.part.0>
 8006ce0:	e7f2      	b.n	8006cc8 <__sinit+0xc>
 8006ce2:	bf00      	nop
 8006ce4:	08006c29 	.word	0x08006c29
 8006ce8:	2000054c 	.word	0x2000054c

08006cec <_fwalk_sglue>:
 8006cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	4688      	mov	r8, r1
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	2600      	movs	r6, #0
 8006cf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cfc:	f1b9 0901 	subs.w	r9, r9, #1
 8006d00:	d505      	bpl.n	8006d0e <_fwalk_sglue+0x22>
 8006d02:	6824      	ldr	r4, [r4, #0]
 8006d04:	2c00      	cmp	r4, #0
 8006d06:	d1f7      	bne.n	8006cf8 <_fwalk_sglue+0xc>
 8006d08:	4630      	mov	r0, r6
 8006d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d0e:	89ab      	ldrh	r3, [r5, #12]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d907      	bls.n	8006d24 <_fwalk_sglue+0x38>
 8006d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	d003      	beq.n	8006d24 <_fwalk_sglue+0x38>
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	4638      	mov	r0, r7
 8006d20:	47c0      	blx	r8
 8006d22:	4306      	orrs	r6, r0
 8006d24:	3568      	adds	r5, #104	@ 0x68
 8006d26:	e7e9      	b.n	8006cfc <_fwalk_sglue+0x10>

08006d28 <iprintf>:
 8006d28:	b40f      	push	{r0, r1, r2, r3}
 8006d2a:	b507      	push	{r0, r1, r2, lr}
 8006d2c:	4906      	ldr	r1, [pc, #24]	@ (8006d48 <iprintf+0x20>)
 8006d2e:	ab04      	add	r3, sp, #16
 8006d30:	6808      	ldr	r0, [r1, #0]
 8006d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d36:	6881      	ldr	r1, [r0, #8]
 8006d38:	9301      	str	r3, [sp, #4]
 8006d3a:	f000 fae3 	bl	8007304 <_vfiprintf_r>
 8006d3e:	b003      	add	sp, #12
 8006d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d44:	b004      	add	sp, #16
 8006d46:	4770      	bx	lr
 8006d48:	2000001c 	.word	0x2000001c

08006d4c <siprintf>:
 8006d4c:	b40e      	push	{r1, r2, r3}
 8006d4e:	b500      	push	{lr}
 8006d50:	b09c      	sub	sp, #112	@ 0x70
 8006d52:	ab1d      	add	r3, sp, #116	@ 0x74
 8006d54:	9002      	str	r0, [sp, #8]
 8006d56:	9006      	str	r0, [sp, #24]
 8006d58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d5c:	4809      	ldr	r0, [pc, #36]	@ (8006d84 <siprintf+0x38>)
 8006d5e:	9107      	str	r1, [sp, #28]
 8006d60:	9104      	str	r1, [sp, #16]
 8006d62:	4909      	ldr	r1, [pc, #36]	@ (8006d88 <siprintf+0x3c>)
 8006d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d68:	9105      	str	r1, [sp, #20]
 8006d6a:	6800      	ldr	r0, [r0, #0]
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	a902      	add	r1, sp, #8
 8006d70:	f000 f9a2 	bl	80070b8 <_svfiprintf_r>
 8006d74:	9b02      	ldr	r3, [sp, #8]
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	b01c      	add	sp, #112	@ 0x70
 8006d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d80:	b003      	add	sp, #12
 8006d82:	4770      	bx	lr
 8006d84:	2000001c 	.word	0x2000001c
 8006d88:	ffff0208 	.word	0xffff0208

08006d8c <__sread>:
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	460c      	mov	r4, r1
 8006d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d94:	f000 f87a 	bl	8006e8c <_read_r>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	bfab      	itete	ge
 8006d9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8006da0:	181b      	addge	r3, r3, r0
 8006da2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006da6:	bfac      	ite	ge
 8006da8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006daa:	81a3      	strhlt	r3, [r4, #12]
 8006dac:	bd10      	pop	{r4, pc}

08006dae <__swrite>:
 8006dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db2:	461f      	mov	r7, r3
 8006db4:	898b      	ldrh	r3, [r1, #12]
 8006db6:	05db      	lsls	r3, r3, #23
 8006db8:	4605      	mov	r5, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	4616      	mov	r6, r2
 8006dbe:	d505      	bpl.n	8006dcc <__swrite+0x1e>
 8006dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f000 f84e 	bl	8006e68 <_lseek_r>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dd6:	81a3      	strh	r3, [r4, #12]
 8006dd8:	4632      	mov	r2, r6
 8006dda:	463b      	mov	r3, r7
 8006ddc:	4628      	mov	r0, r5
 8006dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006de2:	f000 b875 	b.w	8006ed0 <_write_r>

08006de6 <__sseek>:
 8006de6:	b510      	push	{r4, lr}
 8006de8:	460c      	mov	r4, r1
 8006dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dee:	f000 f83b 	bl	8006e68 <_lseek_r>
 8006df2:	1c43      	adds	r3, r0, #1
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	bf15      	itete	ne
 8006df8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006dfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006dfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e02:	81a3      	strheq	r3, [r4, #12]
 8006e04:	bf18      	it	ne
 8006e06:	81a3      	strhne	r3, [r4, #12]
 8006e08:	bd10      	pop	{r4, pc}

08006e0a <__sclose>:
 8006e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0e:	f000 b81b 	b.w	8006e48 <_close_r>

08006e12 <memset>:
 8006e12:	4402      	add	r2, r0
 8006e14:	4603      	mov	r3, r0
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d100      	bne.n	8006e1c <memset+0xa>
 8006e1a:	4770      	bx	lr
 8006e1c:	f803 1b01 	strb.w	r1, [r3], #1
 8006e20:	e7f9      	b.n	8006e16 <memset+0x4>

08006e22 <strncpy>:
 8006e22:	b510      	push	{r4, lr}
 8006e24:	3901      	subs	r1, #1
 8006e26:	4603      	mov	r3, r0
 8006e28:	b132      	cbz	r2, 8006e38 <strncpy+0x16>
 8006e2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006e2e:	f803 4b01 	strb.w	r4, [r3], #1
 8006e32:	3a01      	subs	r2, #1
 8006e34:	2c00      	cmp	r4, #0
 8006e36:	d1f7      	bne.n	8006e28 <strncpy+0x6>
 8006e38:	441a      	add	r2, r3
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d100      	bne.n	8006e42 <strncpy+0x20>
 8006e40:	bd10      	pop	{r4, pc}
 8006e42:	f803 1b01 	strb.w	r1, [r3], #1
 8006e46:	e7f9      	b.n	8006e3c <strncpy+0x1a>

08006e48 <_close_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4d06      	ldr	r5, [pc, #24]	@ (8006e64 <_close_r+0x1c>)
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	4604      	mov	r4, r0
 8006e50:	4608      	mov	r0, r1
 8006e52:	602b      	str	r3, [r5, #0]
 8006e54:	f7fb fc03 	bl	800265e <_close>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d102      	bne.n	8006e62 <_close_r+0x1a>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	b103      	cbz	r3, 8006e62 <_close_r+0x1a>
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	bd38      	pop	{r3, r4, r5, pc}
 8006e64:	20000550 	.word	0x20000550

08006e68 <_lseek_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4d07      	ldr	r5, [pc, #28]	@ (8006e88 <_lseek_r+0x20>)
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	4608      	mov	r0, r1
 8006e70:	4611      	mov	r1, r2
 8006e72:	2200      	movs	r2, #0
 8006e74:	602a      	str	r2, [r5, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	f7fb fc18 	bl	80026ac <_lseek>
 8006e7c:	1c43      	adds	r3, r0, #1
 8006e7e:	d102      	bne.n	8006e86 <_lseek_r+0x1e>
 8006e80:	682b      	ldr	r3, [r5, #0]
 8006e82:	b103      	cbz	r3, 8006e86 <_lseek_r+0x1e>
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	bd38      	pop	{r3, r4, r5, pc}
 8006e88:	20000550 	.word	0x20000550

08006e8c <_read_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	4d07      	ldr	r5, [pc, #28]	@ (8006eac <_read_r+0x20>)
 8006e90:	4604      	mov	r4, r0
 8006e92:	4608      	mov	r0, r1
 8006e94:	4611      	mov	r1, r2
 8006e96:	2200      	movs	r2, #0
 8006e98:	602a      	str	r2, [r5, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f7fb fba6 	bl	80025ec <_read>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	d102      	bne.n	8006eaa <_read_r+0x1e>
 8006ea4:	682b      	ldr	r3, [r5, #0]
 8006ea6:	b103      	cbz	r3, 8006eaa <_read_r+0x1e>
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	bd38      	pop	{r3, r4, r5, pc}
 8006eac:	20000550 	.word	0x20000550

08006eb0 <_sbrk_r>:
 8006eb0:	b538      	push	{r3, r4, r5, lr}
 8006eb2:	4d06      	ldr	r5, [pc, #24]	@ (8006ecc <_sbrk_r+0x1c>)
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	4608      	mov	r0, r1
 8006eba:	602b      	str	r3, [r5, #0]
 8006ebc:	f7fb fc04 	bl	80026c8 <_sbrk>
 8006ec0:	1c43      	adds	r3, r0, #1
 8006ec2:	d102      	bne.n	8006eca <_sbrk_r+0x1a>
 8006ec4:	682b      	ldr	r3, [r5, #0]
 8006ec6:	b103      	cbz	r3, 8006eca <_sbrk_r+0x1a>
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	bd38      	pop	{r3, r4, r5, pc}
 8006ecc:	20000550 	.word	0x20000550

08006ed0 <_write_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4d07      	ldr	r5, [pc, #28]	@ (8006ef0 <_write_r+0x20>)
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	4608      	mov	r0, r1
 8006ed8:	4611      	mov	r1, r2
 8006eda:	2200      	movs	r2, #0
 8006edc:	602a      	str	r2, [r5, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f7fb fba1 	bl	8002626 <_write>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d102      	bne.n	8006eee <_write_r+0x1e>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	b103      	cbz	r3, 8006eee <_write_r+0x1e>
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
 8006ef0:	20000550 	.word	0x20000550

08006ef4 <__errno>:
 8006ef4:	4b01      	ldr	r3, [pc, #4]	@ (8006efc <__errno+0x8>)
 8006ef6:	6818      	ldr	r0, [r3, #0]
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	2000001c 	.word	0x2000001c

08006f00 <__libc_init_array>:
 8006f00:	b570      	push	{r4, r5, r6, lr}
 8006f02:	4d0d      	ldr	r5, [pc, #52]	@ (8006f38 <__libc_init_array+0x38>)
 8006f04:	4c0d      	ldr	r4, [pc, #52]	@ (8006f3c <__libc_init_array+0x3c>)
 8006f06:	1b64      	subs	r4, r4, r5
 8006f08:	10a4      	asrs	r4, r4, #2
 8006f0a:	2600      	movs	r6, #0
 8006f0c:	42a6      	cmp	r6, r4
 8006f0e:	d109      	bne.n	8006f24 <__libc_init_array+0x24>
 8006f10:	4d0b      	ldr	r5, [pc, #44]	@ (8006f40 <__libc_init_array+0x40>)
 8006f12:	4c0c      	ldr	r4, [pc, #48]	@ (8006f44 <__libc_init_array+0x44>)
 8006f14:	f000 feb0 	bl	8007c78 <_init>
 8006f18:	1b64      	subs	r4, r4, r5
 8006f1a:	10a4      	asrs	r4, r4, #2
 8006f1c:	2600      	movs	r6, #0
 8006f1e:	42a6      	cmp	r6, r4
 8006f20:	d105      	bne.n	8006f2e <__libc_init_array+0x2e>
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f28:	4798      	blx	r3
 8006f2a:	3601      	adds	r6, #1
 8006f2c:	e7ee      	b.n	8006f0c <__libc_init_array+0xc>
 8006f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f32:	4798      	blx	r3
 8006f34:	3601      	adds	r6, #1
 8006f36:	e7f2      	b.n	8006f1e <__libc_init_array+0x1e>
 8006f38:	0800eb70 	.word	0x0800eb70
 8006f3c:	0800eb70 	.word	0x0800eb70
 8006f40:	0800eb70 	.word	0x0800eb70
 8006f44:	0800eb78 	.word	0x0800eb78

08006f48 <__retarget_lock_init_recursive>:
 8006f48:	4770      	bx	lr

08006f4a <__retarget_lock_acquire_recursive>:
 8006f4a:	4770      	bx	lr

08006f4c <__retarget_lock_release_recursive>:
 8006f4c:	4770      	bx	lr

08006f4e <memcpy>:
 8006f4e:	440a      	add	r2, r1
 8006f50:	4291      	cmp	r1, r2
 8006f52:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f56:	d100      	bne.n	8006f5a <memcpy+0xc>
 8006f58:	4770      	bx	lr
 8006f5a:	b510      	push	{r4, lr}
 8006f5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f64:	4291      	cmp	r1, r2
 8006f66:	d1f9      	bne.n	8006f5c <memcpy+0xe>
 8006f68:	bd10      	pop	{r4, pc}
	...

08006f6c <_free_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4605      	mov	r5, r0
 8006f70:	2900      	cmp	r1, #0
 8006f72:	d041      	beq.n	8006ff8 <_free_r+0x8c>
 8006f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f78:	1f0c      	subs	r4, r1, #4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	bfb8      	it	lt
 8006f7e:	18e4      	addlt	r4, r4, r3
 8006f80:	f7ff fe04 	bl	8006b8c <__malloc_lock>
 8006f84:	4a1d      	ldr	r2, [pc, #116]	@ (8006ffc <_free_r+0x90>)
 8006f86:	6813      	ldr	r3, [r2, #0]
 8006f88:	b933      	cbnz	r3, 8006f98 <_free_r+0x2c>
 8006f8a:	6063      	str	r3, [r4, #4]
 8006f8c:	6014      	str	r4, [r2, #0]
 8006f8e:	4628      	mov	r0, r5
 8006f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f94:	f7ff be00 	b.w	8006b98 <__malloc_unlock>
 8006f98:	42a3      	cmp	r3, r4
 8006f9a:	d908      	bls.n	8006fae <_free_r+0x42>
 8006f9c:	6820      	ldr	r0, [r4, #0]
 8006f9e:	1821      	adds	r1, r4, r0
 8006fa0:	428b      	cmp	r3, r1
 8006fa2:	bf01      	itttt	eq
 8006fa4:	6819      	ldreq	r1, [r3, #0]
 8006fa6:	685b      	ldreq	r3, [r3, #4]
 8006fa8:	1809      	addeq	r1, r1, r0
 8006faa:	6021      	streq	r1, [r4, #0]
 8006fac:	e7ed      	b.n	8006f8a <_free_r+0x1e>
 8006fae:	461a      	mov	r2, r3
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	b10b      	cbz	r3, 8006fb8 <_free_r+0x4c>
 8006fb4:	42a3      	cmp	r3, r4
 8006fb6:	d9fa      	bls.n	8006fae <_free_r+0x42>
 8006fb8:	6811      	ldr	r1, [r2, #0]
 8006fba:	1850      	adds	r0, r2, r1
 8006fbc:	42a0      	cmp	r0, r4
 8006fbe:	d10b      	bne.n	8006fd8 <_free_r+0x6c>
 8006fc0:	6820      	ldr	r0, [r4, #0]
 8006fc2:	4401      	add	r1, r0
 8006fc4:	1850      	adds	r0, r2, r1
 8006fc6:	4283      	cmp	r3, r0
 8006fc8:	6011      	str	r1, [r2, #0]
 8006fca:	d1e0      	bne.n	8006f8e <_free_r+0x22>
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	6053      	str	r3, [r2, #4]
 8006fd2:	4408      	add	r0, r1
 8006fd4:	6010      	str	r0, [r2, #0]
 8006fd6:	e7da      	b.n	8006f8e <_free_r+0x22>
 8006fd8:	d902      	bls.n	8006fe0 <_free_r+0x74>
 8006fda:	230c      	movs	r3, #12
 8006fdc:	602b      	str	r3, [r5, #0]
 8006fde:	e7d6      	b.n	8006f8e <_free_r+0x22>
 8006fe0:	6820      	ldr	r0, [r4, #0]
 8006fe2:	1821      	adds	r1, r4, r0
 8006fe4:	428b      	cmp	r3, r1
 8006fe6:	bf04      	itt	eq
 8006fe8:	6819      	ldreq	r1, [r3, #0]
 8006fea:	685b      	ldreq	r3, [r3, #4]
 8006fec:	6063      	str	r3, [r4, #4]
 8006fee:	bf04      	itt	eq
 8006ff0:	1809      	addeq	r1, r1, r0
 8006ff2:	6021      	streq	r1, [r4, #0]
 8006ff4:	6054      	str	r4, [r2, #4]
 8006ff6:	e7ca      	b.n	8006f8e <_free_r+0x22>
 8006ff8:	bd38      	pop	{r3, r4, r5, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000410 	.word	0x20000410

08007000 <__ssputs_r>:
 8007000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007004:	688e      	ldr	r6, [r1, #8]
 8007006:	461f      	mov	r7, r3
 8007008:	42be      	cmp	r6, r7
 800700a:	680b      	ldr	r3, [r1, #0]
 800700c:	4682      	mov	sl, r0
 800700e:	460c      	mov	r4, r1
 8007010:	4690      	mov	r8, r2
 8007012:	d82d      	bhi.n	8007070 <__ssputs_r+0x70>
 8007014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007018:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800701c:	d026      	beq.n	800706c <__ssputs_r+0x6c>
 800701e:	6965      	ldr	r5, [r4, #20]
 8007020:	6909      	ldr	r1, [r1, #16]
 8007022:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007026:	eba3 0901 	sub.w	r9, r3, r1
 800702a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800702e:	1c7b      	adds	r3, r7, #1
 8007030:	444b      	add	r3, r9
 8007032:	106d      	asrs	r5, r5, #1
 8007034:	429d      	cmp	r5, r3
 8007036:	bf38      	it	cc
 8007038:	461d      	movcc	r5, r3
 800703a:	0553      	lsls	r3, r2, #21
 800703c:	d527      	bpl.n	800708e <__ssputs_r+0x8e>
 800703e:	4629      	mov	r1, r5
 8007040:	f7ff fd24 	bl	8006a8c <_malloc_r>
 8007044:	4606      	mov	r6, r0
 8007046:	b360      	cbz	r0, 80070a2 <__ssputs_r+0xa2>
 8007048:	6921      	ldr	r1, [r4, #16]
 800704a:	464a      	mov	r2, r9
 800704c:	f7ff ff7f 	bl	8006f4e <memcpy>
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800705a:	81a3      	strh	r3, [r4, #12]
 800705c:	6126      	str	r6, [r4, #16]
 800705e:	6165      	str	r5, [r4, #20]
 8007060:	444e      	add	r6, r9
 8007062:	eba5 0509 	sub.w	r5, r5, r9
 8007066:	6026      	str	r6, [r4, #0]
 8007068:	60a5      	str	r5, [r4, #8]
 800706a:	463e      	mov	r6, r7
 800706c:	42be      	cmp	r6, r7
 800706e:	d900      	bls.n	8007072 <__ssputs_r+0x72>
 8007070:	463e      	mov	r6, r7
 8007072:	6820      	ldr	r0, [r4, #0]
 8007074:	4632      	mov	r2, r6
 8007076:	4641      	mov	r1, r8
 8007078:	f000 fd2a 	bl	8007ad0 <memmove>
 800707c:	68a3      	ldr	r3, [r4, #8]
 800707e:	1b9b      	subs	r3, r3, r6
 8007080:	60a3      	str	r3, [r4, #8]
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	4433      	add	r3, r6
 8007086:	6023      	str	r3, [r4, #0]
 8007088:	2000      	movs	r0, #0
 800708a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708e:	462a      	mov	r2, r5
 8007090:	f000 fd38 	bl	8007b04 <_realloc_r>
 8007094:	4606      	mov	r6, r0
 8007096:	2800      	cmp	r0, #0
 8007098:	d1e0      	bne.n	800705c <__ssputs_r+0x5c>
 800709a:	6921      	ldr	r1, [r4, #16]
 800709c:	4650      	mov	r0, sl
 800709e:	f7ff ff65 	bl	8006f6c <_free_r>
 80070a2:	230c      	movs	r3, #12
 80070a4:	f8ca 3000 	str.w	r3, [sl]
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070ae:	81a3      	strh	r3, [r4, #12]
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295
 80070b4:	e7e9      	b.n	800708a <__ssputs_r+0x8a>
	...

080070b8 <_svfiprintf_r>:
 80070b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070bc:	4698      	mov	r8, r3
 80070be:	898b      	ldrh	r3, [r1, #12]
 80070c0:	061b      	lsls	r3, r3, #24
 80070c2:	b09d      	sub	sp, #116	@ 0x74
 80070c4:	4607      	mov	r7, r0
 80070c6:	460d      	mov	r5, r1
 80070c8:	4614      	mov	r4, r2
 80070ca:	d510      	bpl.n	80070ee <_svfiprintf_r+0x36>
 80070cc:	690b      	ldr	r3, [r1, #16]
 80070ce:	b973      	cbnz	r3, 80070ee <_svfiprintf_r+0x36>
 80070d0:	2140      	movs	r1, #64	@ 0x40
 80070d2:	f7ff fcdb 	bl	8006a8c <_malloc_r>
 80070d6:	6028      	str	r0, [r5, #0]
 80070d8:	6128      	str	r0, [r5, #16]
 80070da:	b930      	cbnz	r0, 80070ea <_svfiprintf_r+0x32>
 80070dc:	230c      	movs	r3, #12
 80070de:	603b      	str	r3, [r7, #0]
 80070e0:	f04f 30ff 	mov.w	r0, #4294967295
 80070e4:	b01d      	add	sp, #116	@ 0x74
 80070e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ea:	2340      	movs	r3, #64	@ 0x40
 80070ec:	616b      	str	r3, [r5, #20]
 80070ee:	2300      	movs	r3, #0
 80070f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80070f2:	2320      	movs	r3, #32
 80070f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80070f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80070fc:	2330      	movs	r3, #48	@ 0x30
 80070fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800729c <_svfiprintf_r+0x1e4>
 8007102:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007106:	f04f 0901 	mov.w	r9, #1
 800710a:	4623      	mov	r3, r4
 800710c:	469a      	mov	sl, r3
 800710e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007112:	b10a      	cbz	r2, 8007118 <_svfiprintf_r+0x60>
 8007114:	2a25      	cmp	r2, #37	@ 0x25
 8007116:	d1f9      	bne.n	800710c <_svfiprintf_r+0x54>
 8007118:	ebba 0b04 	subs.w	fp, sl, r4
 800711c:	d00b      	beq.n	8007136 <_svfiprintf_r+0x7e>
 800711e:	465b      	mov	r3, fp
 8007120:	4622      	mov	r2, r4
 8007122:	4629      	mov	r1, r5
 8007124:	4638      	mov	r0, r7
 8007126:	f7ff ff6b 	bl	8007000 <__ssputs_r>
 800712a:	3001      	adds	r0, #1
 800712c:	f000 80a7 	beq.w	800727e <_svfiprintf_r+0x1c6>
 8007130:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007132:	445a      	add	r2, fp
 8007134:	9209      	str	r2, [sp, #36]	@ 0x24
 8007136:	f89a 3000 	ldrb.w	r3, [sl]
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 809f 	beq.w	800727e <_svfiprintf_r+0x1c6>
 8007140:	2300      	movs	r3, #0
 8007142:	f04f 32ff 	mov.w	r2, #4294967295
 8007146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800714a:	f10a 0a01 	add.w	sl, sl, #1
 800714e:	9304      	str	r3, [sp, #16]
 8007150:	9307      	str	r3, [sp, #28]
 8007152:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007156:	931a      	str	r3, [sp, #104]	@ 0x68
 8007158:	4654      	mov	r4, sl
 800715a:	2205      	movs	r2, #5
 800715c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007160:	484e      	ldr	r0, [pc, #312]	@ (800729c <_svfiprintf_r+0x1e4>)
 8007162:	f7f9 f84d 	bl	8000200 <memchr>
 8007166:	9a04      	ldr	r2, [sp, #16]
 8007168:	b9d8      	cbnz	r0, 80071a2 <_svfiprintf_r+0xea>
 800716a:	06d0      	lsls	r0, r2, #27
 800716c:	bf44      	itt	mi
 800716e:	2320      	movmi	r3, #32
 8007170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007174:	0711      	lsls	r1, r2, #28
 8007176:	bf44      	itt	mi
 8007178:	232b      	movmi	r3, #43	@ 0x2b
 800717a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800717e:	f89a 3000 	ldrb.w	r3, [sl]
 8007182:	2b2a      	cmp	r3, #42	@ 0x2a
 8007184:	d015      	beq.n	80071b2 <_svfiprintf_r+0xfa>
 8007186:	9a07      	ldr	r2, [sp, #28]
 8007188:	4654      	mov	r4, sl
 800718a:	2000      	movs	r0, #0
 800718c:	f04f 0c0a 	mov.w	ip, #10
 8007190:	4621      	mov	r1, r4
 8007192:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007196:	3b30      	subs	r3, #48	@ 0x30
 8007198:	2b09      	cmp	r3, #9
 800719a:	d94b      	bls.n	8007234 <_svfiprintf_r+0x17c>
 800719c:	b1b0      	cbz	r0, 80071cc <_svfiprintf_r+0x114>
 800719e:	9207      	str	r2, [sp, #28]
 80071a0:	e014      	b.n	80071cc <_svfiprintf_r+0x114>
 80071a2:	eba0 0308 	sub.w	r3, r0, r8
 80071a6:	fa09 f303 	lsl.w	r3, r9, r3
 80071aa:	4313      	orrs	r3, r2
 80071ac:	9304      	str	r3, [sp, #16]
 80071ae:	46a2      	mov	sl, r4
 80071b0:	e7d2      	b.n	8007158 <_svfiprintf_r+0xa0>
 80071b2:	9b03      	ldr	r3, [sp, #12]
 80071b4:	1d19      	adds	r1, r3, #4
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	9103      	str	r1, [sp, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	bfbb      	ittet	lt
 80071be:	425b      	neglt	r3, r3
 80071c0:	f042 0202 	orrlt.w	r2, r2, #2
 80071c4:	9307      	strge	r3, [sp, #28]
 80071c6:	9307      	strlt	r3, [sp, #28]
 80071c8:	bfb8      	it	lt
 80071ca:	9204      	strlt	r2, [sp, #16]
 80071cc:	7823      	ldrb	r3, [r4, #0]
 80071ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80071d0:	d10a      	bne.n	80071e8 <_svfiprintf_r+0x130>
 80071d2:	7863      	ldrb	r3, [r4, #1]
 80071d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80071d6:	d132      	bne.n	800723e <_svfiprintf_r+0x186>
 80071d8:	9b03      	ldr	r3, [sp, #12]
 80071da:	1d1a      	adds	r2, r3, #4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	9203      	str	r2, [sp, #12]
 80071e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80071e4:	3402      	adds	r4, #2
 80071e6:	9305      	str	r3, [sp, #20]
 80071e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80072ac <_svfiprintf_r+0x1f4>
 80071ec:	7821      	ldrb	r1, [r4, #0]
 80071ee:	2203      	movs	r2, #3
 80071f0:	4650      	mov	r0, sl
 80071f2:	f7f9 f805 	bl	8000200 <memchr>
 80071f6:	b138      	cbz	r0, 8007208 <_svfiprintf_r+0x150>
 80071f8:	9b04      	ldr	r3, [sp, #16]
 80071fa:	eba0 000a 	sub.w	r0, r0, sl
 80071fe:	2240      	movs	r2, #64	@ 0x40
 8007200:	4082      	lsls	r2, r0
 8007202:	4313      	orrs	r3, r2
 8007204:	3401      	adds	r4, #1
 8007206:	9304      	str	r3, [sp, #16]
 8007208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800720c:	4824      	ldr	r0, [pc, #144]	@ (80072a0 <_svfiprintf_r+0x1e8>)
 800720e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007212:	2206      	movs	r2, #6
 8007214:	f7f8 fff4 	bl	8000200 <memchr>
 8007218:	2800      	cmp	r0, #0
 800721a:	d036      	beq.n	800728a <_svfiprintf_r+0x1d2>
 800721c:	4b21      	ldr	r3, [pc, #132]	@ (80072a4 <_svfiprintf_r+0x1ec>)
 800721e:	bb1b      	cbnz	r3, 8007268 <_svfiprintf_r+0x1b0>
 8007220:	9b03      	ldr	r3, [sp, #12]
 8007222:	3307      	adds	r3, #7
 8007224:	f023 0307 	bic.w	r3, r3, #7
 8007228:	3308      	adds	r3, #8
 800722a:	9303      	str	r3, [sp, #12]
 800722c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722e:	4433      	add	r3, r6
 8007230:	9309      	str	r3, [sp, #36]	@ 0x24
 8007232:	e76a      	b.n	800710a <_svfiprintf_r+0x52>
 8007234:	fb0c 3202 	mla	r2, ip, r2, r3
 8007238:	460c      	mov	r4, r1
 800723a:	2001      	movs	r0, #1
 800723c:	e7a8      	b.n	8007190 <_svfiprintf_r+0xd8>
 800723e:	2300      	movs	r3, #0
 8007240:	3401      	adds	r4, #1
 8007242:	9305      	str	r3, [sp, #20]
 8007244:	4619      	mov	r1, r3
 8007246:	f04f 0c0a 	mov.w	ip, #10
 800724a:	4620      	mov	r0, r4
 800724c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007250:	3a30      	subs	r2, #48	@ 0x30
 8007252:	2a09      	cmp	r2, #9
 8007254:	d903      	bls.n	800725e <_svfiprintf_r+0x1a6>
 8007256:	2b00      	cmp	r3, #0
 8007258:	d0c6      	beq.n	80071e8 <_svfiprintf_r+0x130>
 800725a:	9105      	str	r1, [sp, #20]
 800725c:	e7c4      	b.n	80071e8 <_svfiprintf_r+0x130>
 800725e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007262:	4604      	mov	r4, r0
 8007264:	2301      	movs	r3, #1
 8007266:	e7f0      	b.n	800724a <_svfiprintf_r+0x192>
 8007268:	ab03      	add	r3, sp, #12
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	462a      	mov	r2, r5
 800726e:	4b0e      	ldr	r3, [pc, #56]	@ (80072a8 <_svfiprintf_r+0x1f0>)
 8007270:	a904      	add	r1, sp, #16
 8007272:	4638      	mov	r0, r7
 8007274:	f3af 8000 	nop.w
 8007278:	1c42      	adds	r2, r0, #1
 800727a:	4606      	mov	r6, r0
 800727c:	d1d6      	bne.n	800722c <_svfiprintf_r+0x174>
 800727e:	89ab      	ldrh	r3, [r5, #12]
 8007280:	065b      	lsls	r3, r3, #25
 8007282:	f53f af2d 	bmi.w	80070e0 <_svfiprintf_r+0x28>
 8007286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007288:	e72c      	b.n	80070e4 <_svfiprintf_r+0x2c>
 800728a:	ab03      	add	r3, sp, #12
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	462a      	mov	r2, r5
 8007290:	4b05      	ldr	r3, [pc, #20]	@ (80072a8 <_svfiprintf_r+0x1f0>)
 8007292:	a904      	add	r1, sp, #16
 8007294:	4638      	mov	r0, r7
 8007296:	f000 f9bb 	bl	8007610 <_printf_i>
 800729a:	e7ed      	b.n	8007278 <_svfiprintf_r+0x1c0>
 800729c:	0800eb34 	.word	0x0800eb34
 80072a0:	0800eb3e 	.word	0x0800eb3e
 80072a4:	00000000 	.word	0x00000000
 80072a8:	08007001 	.word	0x08007001
 80072ac:	0800eb3a 	.word	0x0800eb3a

080072b0 <__sfputc_r>:
 80072b0:	6893      	ldr	r3, [r2, #8]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	b410      	push	{r4}
 80072b8:	6093      	str	r3, [r2, #8]
 80072ba:	da08      	bge.n	80072ce <__sfputc_r+0x1e>
 80072bc:	6994      	ldr	r4, [r2, #24]
 80072be:	42a3      	cmp	r3, r4
 80072c0:	db01      	blt.n	80072c6 <__sfputc_r+0x16>
 80072c2:	290a      	cmp	r1, #10
 80072c4:	d103      	bne.n	80072ce <__sfputc_r+0x1e>
 80072c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072ca:	f000 bb6d 	b.w	80079a8 <__swbuf_r>
 80072ce:	6813      	ldr	r3, [r2, #0]
 80072d0:	1c58      	adds	r0, r3, #1
 80072d2:	6010      	str	r0, [r2, #0]
 80072d4:	7019      	strb	r1, [r3, #0]
 80072d6:	4608      	mov	r0, r1
 80072d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072dc:	4770      	bx	lr

080072de <__sfputs_r>:
 80072de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e0:	4606      	mov	r6, r0
 80072e2:	460f      	mov	r7, r1
 80072e4:	4614      	mov	r4, r2
 80072e6:	18d5      	adds	r5, r2, r3
 80072e8:	42ac      	cmp	r4, r5
 80072ea:	d101      	bne.n	80072f0 <__sfputs_r+0x12>
 80072ec:	2000      	movs	r0, #0
 80072ee:	e007      	b.n	8007300 <__sfputs_r+0x22>
 80072f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f4:	463a      	mov	r2, r7
 80072f6:	4630      	mov	r0, r6
 80072f8:	f7ff ffda 	bl	80072b0 <__sfputc_r>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	d1f3      	bne.n	80072e8 <__sfputs_r+0xa>
 8007300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007304 <_vfiprintf_r>:
 8007304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007308:	460d      	mov	r5, r1
 800730a:	b09d      	sub	sp, #116	@ 0x74
 800730c:	4614      	mov	r4, r2
 800730e:	4698      	mov	r8, r3
 8007310:	4606      	mov	r6, r0
 8007312:	b118      	cbz	r0, 800731c <_vfiprintf_r+0x18>
 8007314:	6a03      	ldr	r3, [r0, #32]
 8007316:	b90b      	cbnz	r3, 800731c <_vfiprintf_r+0x18>
 8007318:	f7ff fcd0 	bl	8006cbc <__sinit>
 800731c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800731e:	07d9      	lsls	r1, r3, #31
 8007320:	d405      	bmi.n	800732e <_vfiprintf_r+0x2a>
 8007322:	89ab      	ldrh	r3, [r5, #12]
 8007324:	059a      	lsls	r2, r3, #22
 8007326:	d402      	bmi.n	800732e <_vfiprintf_r+0x2a>
 8007328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800732a:	f7ff fe0e 	bl	8006f4a <__retarget_lock_acquire_recursive>
 800732e:	89ab      	ldrh	r3, [r5, #12]
 8007330:	071b      	lsls	r3, r3, #28
 8007332:	d501      	bpl.n	8007338 <_vfiprintf_r+0x34>
 8007334:	692b      	ldr	r3, [r5, #16]
 8007336:	b99b      	cbnz	r3, 8007360 <_vfiprintf_r+0x5c>
 8007338:	4629      	mov	r1, r5
 800733a:	4630      	mov	r0, r6
 800733c:	f000 fb72 	bl	8007a24 <__swsetup_r>
 8007340:	b170      	cbz	r0, 8007360 <_vfiprintf_r+0x5c>
 8007342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007344:	07dc      	lsls	r4, r3, #31
 8007346:	d504      	bpl.n	8007352 <_vfiprintf_r+0x4e>
 8007348:	f04f 30ff 	mov.w	r0, #4294967295
 800734c:	b01d      	add	sp, #116	@ 0x74
 800734e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007352:	89ab      	ldrh	r3, [r5, #12]
 8007354:	0598      	lsls	r0, r3, #22
 8007356:	d4f7      	bmi.n	8007348 <_vfiprintf_r+0x44>
 8007358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800735a:	f7ff fdf7 	bl	8006f4c <__retarget_lock_release_recursive>
 800735e:	e7f3      	b.n	8007348 <_vfiprintf_r+0x44>
 8007360:	2300      	movs	r3, #0
 8007362:	9309      	str	r3, [sp, #36]	@ 0x24
 8007364:	2320      	movs	r3, #32
 8007366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800736a:	f8cd 800c 	str.w	r8, [sp, #12]
 800736e:	2330      	movs	r3, #48	@ 0x30
 8007370:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007520 <_vfiprintf_r+0x21c>
 8007374:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007378:	f04f 0901 	mov.w	r9, #1
 800737c:	4623      	mov	r3, r4
 800737e:	469a      	mov	sl, r3
 8007380:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007384:	b10a      	cbz	r2, 800738a <_vfiprintf_r+0x86>
 8007386:	2a25      	cmp	r2, #37	@ 0x25
 8007388:	d1f9      	bne.n	800737e <_vfiprintf_r+0x7a>
 800738a:	ebba 0b04 	subs.w	fp, sl, r4
 800738e:	d00b      	beq.n	80073a8 <_vfiprintf_r+0xa4>
 8007390:	465b      	mov	r3, fp
 8007392:	4622      	mov	r2, r4
 8007394:	4629      	mov	r1, r5
 8007396:	4630      	mov	r0, r6
 8007398:	f7ff ffa1 	bl	80072de <__sfputs_r>
 800739c:	3001      	adds	r0, #1
 800739e:	f000 80a7 	beq.w	80074f0 <_vfiprintf_r+0x1ec>
 80073a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073a4:	445a      	add	r2, fp
 80073a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80073a8:	f89a 3000 	ldrb.w	r3, [sl]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 809f 	beq.w	80074f0 <_vfiprintf_r+0x1ec>
 80073b2:	2300      	movs	r3, #0
 80073b4:	f04f 32ff 	mov.w	r2, #4294967295
 80073b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073bc:	f10a 0a01 	add.w	sl, sl, #1
 80073c0:	9304      	str	r3, [sp, #16]
 80073c2:	9307      	str	r3, [sp, #28]
 80073c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80073ca:	4654      	mov	r4, sl
 80073cc:	2205      	movs	r2, #5
 80073ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d2:	4853      	ldr	r0, [pc, #332]	@ (8007520 <_vfiprintf_r+0x21c>)
 80073d4:	f7f8 ff14 	bl	8000200 <memchr>
 80073d8:	9a04      	ldr	r2, [sp, #16]
 80073da:	b9d8      	cbnz	r0, 8007414 <_vfiprintf_r+0x110>
 80073dc:	06d1      	lsls	r1, r2, #27
 80073de:	bf44      	itt	mi
 80073e0:	2320      	movmi	r3, #32
 80073e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073e6:	0713      	lsls	r3, r2, #28
 80073e8:	bf44      	itt	mi
 80073ea:	232b      	movmi	r3, #43	@ 0x2b
 80073ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073f0:	f89a 3000 	ldrb.w	r3, [sl]
 80073f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80073f6:	d015      	beq.n	8007424 <_vfiprintf_r+0x120>
 80073f8:	9a07      	ldr	r2, [sp, #28]
 80073fa:	4654      	mov	r4, sl
 80073fc:	2000      	movs	r0, #0
 80073fe:	f04f 0c0a 	mov.w	ip, #10
 8007402:	4621      	mov	r1, r4
 8007404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007408:	3b30      	subs	r3, #48	@ 0x30
 800740a:	2b09      	cmp	r3, #9
 800740c:	d94b      	bls.n	80074a6 <_vfiprintf_r+0x1a2>
 800740e:	b1b0      	cbz	r0, 800743e <_vfiprintf_r+0x13a>
 8007410:	9207      	str	r2, [sp, #28]
 8007412:	e014      	b.n	800743e <_vfiprintf_r+0x13a>
 8007414:	eba0 0308 	sub.w	r3, r0, r8
 8007418:	fa09 f303 	lsl.w	r3, r9, r3
 800741c:	4313      	orrs	r3, r2
 800741e:	9304      	str	r3, [sp, #16]
 8007420:	46a2      	mov	sl, r4
 8007422:	e7d2      	b.n	80073ca <_vfiprintf_r+0xc6>
 8007424:	9b03      	ldr	r3, [sp, #12]
 8007426:	1d19      	adds	r1, r3, #4
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	9103      	str	r1, [sp, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	bfbb      	ittet	lt
 8007430:	425b      	neglt	r3, r3
 8007432:	f042 0202 	orrlt.w	r2, r2, #2
 8007436:	9307      	strge	r3, [sp, #28]
 8007438:	9307      	strlt	r3, [sp, #28]
 800743a:	bfb8      	it	lt
 800743c:	9204      	strlt	r2, [sp, #16]
 800743e:	7823      	ldrb	r3, [r4, #0]
 8007440:	2b2e      	cmp	r3, #46	@ 0x2e
 8007442:	d10a      	bne.n	800745a <_vfiprintf_r+0x156>
 8007444:	7863      	ldrb	r3, [r4, #1]
 8007446:	2b2a      	cmp	r3, #42	@ 0x2a
 8007448:	d132      	bne.n	80074b0 <_vfiprintf_r+0x1ac>
 800744a:	9b03      	ldr	r3, [sp, #12]
 800744c:	1d1a      	adds	r2, r3, #4
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	9203      	str	r2, [sp, #12]
 8007452:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007456:	3402      	adds	r4, #2
 8007458:	9305      	str	r3, [sp, #20]
 800745a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007530 <_vfiprintf_r+0x22c>
 800745e:	7821      	ldrb	r1, [r4, #0]
 8007460:	2203      	movs	r2, #3
 8007462:	4650      	mov	r0, sl
 8007464:	f7f8 fecc 	bl	8000200 <memchr>
 8007468:	b138      	cbz	r0, 800747a <_vfiprintf_r+0x176>
 800746a:	9b04      	ldr	r3, [sp, #16]
 800746c:	eba0 000a 	sub.w	r0, r0, sl
 8007470:	2240      	movs	r2, #64	@ 0x40
 8007472:	4082      	lsls	r2, r0
 8007474:	4313      	orrs	r3, r2
 8007476:	3401      	adds	r4, #1
 8007478:	9304      	str	r3, [sp, #16]
 800747a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800747e:	4829      	ldr	r0, [pc, #164]	@ (8007524 <_vfiprintf_r+0x220>)
 8007480:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007484:	2206      	movs	r2, #6
 8007486:	f7f8 febb 	bl	8000200 <memchr>
 800748a:	2800      	cmp	r0, #0
 800748c:	d03f      	beq.n	800750e <_vfiprintf_r+0x20a>
 800748e:	4b26      	ldr	r3, [pc, #152]	@ (8007528 <_vfiprintf_r+0x224>)
 8007490:	bb1b      	cbnz	r3, 80074da <_vfiprintf_r+0x1d6>
 8007492:	9b03      	ldr	r3, [sp, #12]
 8007494:	3307      	adds	r3, #7
 8007496:	f023 0307 	bic.w	r3, r3, #7
 800749a:	3308      	adds	r3, #8
 800749c:	9303      	str	r3, [sp, #12]
 800749e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074a0:	443b      	add	r3, r7
 80074a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a4:	e76a      	b.n	800737c <_vfiprintf_r+0x78>
 80074a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80074aa:	460c      	mov	r4, r1
 80074ac:	2001      	movs	r0, #1
 80074ae:	e7a8      	b.n	8007402 <_vfiprintf_r+0xfe>
 80074b0:	2300      	movs	r3, #0
 80074b2:	3401      	adds	r4, #1
 80074b4:	9305      	str	r3, [sp, #20]
 80074b6:	4619      	mov	r1, r3
 80074b8:	f04f 0c0a 	mov.w	ip, #10
 80074bc:	4620      	mov	r0, r4
 80074be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074c2:	3a30      	subs	r2, #48	@ 0x30
 80074c4:	2a09      	cmp	r2, #9
 80074c6:	d903      	bls.n	80074d0 <_vfiprintf_r+0x1cc>
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0c6      	beq.n	800745a <_vfiprintf_r+0x156>
 80074cc:	9105      	str	r1, [sp, #20]
 80074ce:	e7c4      	b.n	800745a <_vfiprintf_r+0x156>
 80074d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80074d4:	4604      	mov	r4, r0
 80074d6:	2301      	movs	r3, #1
 80074d8:	e7f0      	b.n	80074bc <_vfiprintf_r+0x1b8>
 80074da:	ab03      	add	r3, sp, #12
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	462a      	mov	r2, r5
 80074e0:	4b12      	ldr	r3, [pc, #72]	@ (800752c <_vfiprintf_r+0x228>)
 80074e2:	a904      	add	r1, sp, #16
 80074e4:	4630      	mov	r0, r6
 80074e6:	f3af 8000 	nop.w
 80074ea:	4607      	mov	r7, r0
 80074ec:	1c78      	adds	r0, r7, #1
 80074ee:	d1d6      	bne.n	800749e <_vfiprintf_r+0x19a>
 80074f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074f2:	07d9      	lsls	r1, r3, #31
 80074f4:	d405      	bmi.n	8007502 <_vfiprintf_r+0x1fe>
 80074f6:	89ab      	ldrh	r3, [r5, #12]
 80074f8:	059a      	lsls	r2, r3, #22
 80074fa:	d402      	bmi.n	8007502 <_vfiprintf_r+0x1fe>
 80074fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074fe:	f7ff fd25 	bl	8006f4c <__retarget_lock_release_recursive>
 8007502:	89ab      	ldrh	r3, [r5, #12]
 8007504:	065b      	lsls	r3, r3, #25
 8007506:	f53f af1f 	bmi.w	8007348 <_vfiprintf_r+0x44>
 800750a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800750c:	e71e      	b.n	800734c <_vfiprintf_r+0x48>
 800750e:	ab03      	add	r3, sp, #12
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	462a      	mov	r2, r5
 8007514:	4b05      	ldr	r3, [pc, #20]	@ (800752c <_vfiprintf_r+0x228>)
 8007516:	a904      	add	r1, sp, #16
 8007518:	4630      	mov	r0, r6
 800751a:	f000 f879 	bl	8007610 <_printf_i>
 800751e:	e7e4      	b.n	80074ea <_vfiprintf_r+0x1e6>
 8007520:	0800eb34 	.word	0x0800eb34
 8007524:	0800eb3e 	.word	0x0800eb3e
 8007528:	00000000 	.word	0x00000000
 800752c:	080072df 	.word	0x080072df
 8007530:	0800eb3a 	.word	0x0800eb3a

08007534 <_printf_common>:
 8007534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007538:	4616      	mov	r6, r2
 800753a:	4698      	mov	r8, r3
 800753c:	688a      	ldr	r2, [r1, #8]
 800753e:	690b      	ldr	r3, [r1, #16]
 8007540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007544:	4293      	cmp	r3, r2
 8007546:	bfb8      	it	lt
 8007548:	4613      	movlt	r3, r2
 800754a:	6033      	str	r3, [r6, #0]
 800754c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007550:	4607      	mov	r7, r0
 8007552:	460c      	mov	r4, r1
 8007554:	b10a      	cbz	r2, 800755a <_printf_common+0x26>
 8007556:	3301      	adds	r3, #1
 8007558:	6033      	str	r3, [r6, #0]
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	0699      	lsls	r1, r3, #26
 800755e:	bf42      	ittt	mi
 8007560:	6833      	ldrmi	r3, [r6, #0]
 8007562:	3302      	addmi	r3, #2
 8007564:	6033      	strmi	r3, [r6, #0]
 8007566:	6825      	ldr	r5, [r4, #0]
 8007568:	f015 0506 	ands.w	r5, r5, #6
 800756c:	d106      	bne.n	800757c <_printf_common+0x48>
 800756e:	f104 0a19 	add.w	sl, r4, #25
 8007572:	68e3      	ldr	r3, [r4, #12]
 8007574:	6832      	ldr	r2, [r6, #0]
 8007576:	1a9b      	subs	r3, r3, r2
 8007578:	42ab      	cmp	r3, r5
 800757a:	dc26      	bgt.n	80075ca <_printf_common+0x96>
 800757c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007580:	6822      	ldr	r2, [r4, #0]
 8007582:	3b00      	subs	r3, #0
 8007584:	bf18      	it	ne
 8007586:	2301      	movne	r3, #1
 8007588:	0692      	lsls	r2, r2, #26
 800758a:	d42b      	bmi.n	80075e4 <_printf_common+0xb0>
 800758c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007590:	4641      	mov	r1, r8
 8007592:	4638      	mov	r0, r7
 8007594:	47c8      	blx	r9
 8007596:	3001      	adds	r0, #1
 8007598:	d01e      	beq.n	80075d8 <_printf_common+0xa4>
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	6922      	ldr	r2, [r4, #16]
 800759e:	f003 0306 	and.w	r3, r3, #6
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	bf02      	ittt	eq
 80075a6:	68e5      	ldreq	r5, [r4, #12]
 80075a8:	6833      	ldreq	r3, [r6, #0]
 80075aa:	1aed      	subeq	r5, r5, r3
 80075ac:	68a3      	ldr	r3, [r4, #8]
 80075ae:	bf0c      	ite	eq
 80075b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075b4:	2500      	movne	r5, #0
 80075b6:	4293      	cmp	r3, r2
 80075b8:	bfc4      	itt	gt
 80075ba:	1a9b      	subgt	r3, r3, r2
 80075bc:	18ed      	addgt	r5, r5, r3
 80075be:	2600      	movs	r6, #0
 80075c0:	341a      	adds	r4, #26
 80075c2:	42b5      	cmp	r5, r6
 80075c4:	d11a      	bne.n	80075fc <_printf_common+0xc8>
 80075c6:	2000      	movs	r0, #0
 80075c8:	e008      	b.n	80075dc <_printf_common+0xa8>
 80075ca:	2301      	movs	r3, #1
 80075cc:	4652      	mov	r2, sl
 80075ce:	4641      	mov	r1, r8
 80075d0:	4638      	mov	r0, r7
 80075d2:	47c8      	blx	r9
 80075d4:	3001      	adds	r0, #1
 80075d6:	d103      	bne.n	80075e0 <_printf_common+0xac>
 80075d8:	f04f 30ff 	mov.w	r0, #4294967295
 80075dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e0:	3501      	adds	r5, #1
 80075e2:	e7c6      	b.n	8007572 <_printf_common+0x3e>
 80075e4:	18e1      	adds	r1, r4, r3
 80075e6:	1c5a      	adds	r2, r3, #1
 80075e8:	2030      	movs	r0, #48	@ 0x30
 80075ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075ee:	4422      	add	r2, r4
 80075f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075f8:	3302      	adds	r3, #2
 80075fa:	e7c7      	b.n	800758c <_printf_common+0x58>
 80075fc:	2301      	movs	r3, #1
 80075fe:	4622      	mov	r2, r4
 8007600:	4641      	mov	r1, r8
 8007602:	4638      	mov	r0, r7
 8007604:	47c8      	blx	r9
 8007606:	3001      	adds	r0, #1
 8007608:	d0e6      	beq.n	80075d8 <_printf_common+0xa4>
 800760a:	3601      	adds	r6, #1
 800760c:	e7d9      	b.n	80075c2 <_printf_common+0x8e>
	...

08007610 <_printf_i>:
 8007610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007614:	7e0f      	ldrb	r7, [r1, #24]
 8007616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007618:	2f78      	cmp	r7, #120	@ 0x78
 800761a:	4691      	mov	r9, r2
 800761c:	4680      	mov	r8, r0
 800761e:	460c      	mov	r4, r1
 8007620:	469a      	mov	sl, r3
 8007622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007626:	d807      	bhi.n	8007638 <_printf_i+0x28>
 8007628:	2f62      	cmp	r7, #98	@ 0x62
 800762a:	d80a      	bhi.n	8007642 <_printf_i+0x32>
 800762c:	2f00      	cmp	r7, #0
 800762e:	f000 80d2 	beq.w	80077d6 <_printf_i+0x1c6>
 8007632:	2f58      	cmp	r7, #88	@ 0x58
 8007634:	f000 80b9 	beq.w	80077aa <_printf_i+0x19a>
 8007638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800763c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007640:	e03a      	b.n	80076b8 <_printf_i+0xa8>
 8007642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007646:	2b15      	cmp	r3, #21
 8007648:	d8f6      	bhi.n	8007638 <_printf_i+0x28>
 800764a:	a101      	add	r1, pc, #4	@ (adr r1, 8007650 <_printf_i+0x40>)
 800764c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007650:	080076a9 	.word	0x080076a9
 8007654:	080076bd 	.word	0x080076bd
 8007658:	08007639 	.word	0x08007639
 800765c:	08007639 	.word	0x08007639
 8007660:	08007639 	.word	0x08007639
 8007664:	08007639 	.word	0x08007639
 8007668:	080076bd 	.word	0x080076bd
 800766c:	08007639 	.word	0x08007639
 8007670:	08007639 	.word	0x08007639
 8007674:	08007639 	.word	0x08007639
 8007678:	08007639 	.word	0x08007639
 800767c:	080077bd 	.word	0x080077bd
 8007680:	080076e7 	.word	0x080076e7
 8007684:	08007777 	.word	0x08007777
 8007688:	08007639 	.word	0x08007639
 800768c:	08007639 	.word	0x08007639
 8007690:	080077df 	.word	0x080077df
 8007694:	08007639 	.word	0x08007639
 8007698:	080076e7 	.word	0x080076e7
 800769c:	08007639 	.word	0x08007639
 80076a0:	08007639 	.word	0x08007639
 80076a4:	0800777f 	.word	0x0800777f
 80076a8:	6833      	ldr	r3, [r6, #0]
 80076aa:	1d1a      	adds	r2, r3, #4
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6032      	str	r2, [r6, #0]
 80076b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076b8:	2301      	movs	r3, #1
 80076ba:	e09d      	b.n	80077f8 <_printf_i+0x1e8>
 80076bc:	6833      	ldr	r3, [r6, #0]
 80076be:	6820      	ldr	r0, [r4, #0]
 80076c0:	1d19      	adds	r1, r3, #4
 80076c2:	6031      	str	r1, [r6, #0]
 80076c4:	0606      	lsls	r6, r0, #24
 80076c6:	d501      	bpl.n	80076cc <_printf_i+0xbc>
 80076c8:	681d      	ldr	r5, [r3, #0]
 80076ca:	e003      	b.n	80076d4 <_printf_i+0xc4>
 80076cc:	0645      	lsls	r5, r0, #25
 80076ce:	d5fb      	bpl.n	80076c8 <_printf_i+0xb8>
 80076d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076d4:	2d00      	cmp	r5, #0
 80076d6:	da03      	bge.n	80076e0 <_printf_i+0xd0>
 80076d8:	232d      	movs	r3, #45	@ 0x2d
 80076da:	426d      	negs	r5, r5
 80076dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076e0:	4859      	ldr	r0, [pc, #356]	@ (8007848 <_printf_i+0x238>)
 80076e2:	230a      	movs	r3, #10
 80076e4:	e011      	b.n	800770a <_printf_i+0xfa>
 80076e6:	6821      	ldr	r1, [r4, #0]
 80076e8:	6833      	ldr	r3, [r6, #0]
 80076ea:	0608      	lsls	r0, r1, #24
 80076ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80076f0:	d402      	bmi.n	80076f8 <_printf_i+0xe8>
 80076f2:	0649      	lsls	r1, r1, #25
 80076f4:	bf48      	it	mi
 80076f6:	b2ad      	uxthmi	r5, r5
 80076f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80076fa:	4853      	ldr	r0, [pc, #332]	@ (8007848 <_printf_i+0x238>)
 80076fc:	6033      	str	r3, [r6, #0]
 80076fe:	bf14      	ite	ne
 8007700:	230a      	movne	r3, #10
 8007702:	2308      	moveq	r3, #8
 8007704:	2100      	movs	r1, #0
 8007706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800770a:	6866      	ldr	r6, [r4, #4]
 800770c:	60a6      	str	r6, [r4, #8]
 800770e:	2e00      	cmp	r6, #0
 8007710:	bfa2      	ittt	ge
 8007712:	6821      	ldrge	r1, [r4, #0]
 8007714:	f021 0104 	bicge.w	r1, r1, #4
 8007718:	6021      	strge	r1, [r4, #0]
 800771a:	b90d      	cbnz	r5, 8007720 <_printf_i+0x110>
 800771c:	2e00      	cmp	r6, #0
 800771e:	d04b      	beq.n	80077b8 <_printf_i+0x1a8>
 8007720:	4616      	mov	r6, r2
 8007722:	fbb5 f1f3 	udiv	r1, r5, r3
 8007726:	fb03 5711 	mls	r7, r3, r1, r5
 800772a:	5dc7      	ldrb	r7, [r0, r7]
 800772c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007730:	462f      	mov	r7, r5
 8007732:	42bb      	cmp	r3, r7
 8007734:	460d      	mov	r5, r1
 8007736:	d9f4      	bls.n	8007722 <_printf_i+0x112>
 8007738:	2b08      	cmp	r3, #8
 800773a:	d10b      	bne.n	8007754 <_printf_i+0x144>
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	07df      	lsls	r7, r3, #31
 8007740:	d508      	bpl.n	8007754 <_printf_i+0x144>
 8007742:	6923      	ldr	r3, [r4, #16]
 8007744:	6861      	ldr	r1, [r4, #4]
 8007746:	4299      	cmp	r1, r3
 8007748:	bfde      	ittt	le
 800774a:	2330      	movle	r3, #48	@ 0x30
 800774c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007750:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007754:	1b92      	subs	r2, r2, r6
 8007756:	6122      	str	r2, [r4, #16]
 8007758:	f8cd a000 	str.w	sl, [sp]
 800775c:	464b      	mov	r3, r9
 800775e:	aa03      	add	r2, sp, #12
 8007760:	4621      	mov	r1, r4
 8007762:	4640      	mov	r0, r8
 8007764:	f7ff fee6 	bl	8007534 <_printf_common>
 8007768:	3001      	adds	r0, #1
 800776a:	d14a      	bne.n	8007802 <_printf_i+0x1f2>
 800776c:	f04f 30ff 	mov.w	r0, #4294967295
 8007770:	b004      	add	sp, #16
 8007772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	f043 0320 	orr.w	r3, r3, #32
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	4833      	ldr	r0, [pc, #204]	@ (800784c <_printf_i+0x23c>)
 8007780:	2778      	movs	r7, #120	@ 0x78
 8007782:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	6831      	ldr	r1, [r6, #0]
 800778a:	061f      	lsls	r7, r3, #24
 800778c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007790:	d402      	bmi.n	8007798 <_printf_i+0x188>
 8007792:	065f      	lsls	r7, r3, #25
 8007794:	bf48      	it	mi
 8007796:	b2ad      	uxthmi	r5, r5
 8007798:	6031      	str	r1, [r6, #0]
 800779a:	07d9      	lsls	r1, r3, #31
 800779c:	bf44      	itt	mi
 800779e:	f043 0320 	orrmi.w	r3, r3, #32
 80077a2:	6023      	strmi	r3, [r4, #0]
 80077a4:	b11d      	cbz	r5, 80077ae <_printf_i+0x19e>
 80077a6:	2310      	movs	r3, #16
 80077a8:	e7ac      	b.n	8007704 <_printf_i+0xf4>
 80077aa:	4827      	ldr	r0, [pc, #156]	@ (8007848 <_printf_i+0x238>)
 80077ac:	e7e9      	b.n	8007782 <_printf_i+0x172>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	f023 0320 	bic.w	r3, r3, #32
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	e7f6      	b.n	80077a6 <_printf_i+0x196>
 80077b8:	4616      	mov	r6, r2
 80077ba:	e7bd      	b.n	8007738 <_printf_i+0x128>
 80077bc:	6833      	ldr	r3, [r6, #0]
 80077be:	6825      	ldr	r5, [r4, #0]
 80077c0:	6961      	ldr	r1, [r4, #20]
 80077c2:	1d18      	adds	r0, r3, #4
 80077c4:	6030      	str	r0, [r6, #0]
 80077c6:	062e      	lsls	r6, r5, #24
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	d501      	bpl.n	80077d0 <_printf_i+0x1c0>
 80077cc:	6019      	str	r1, [r3, #0]
 80077ce:	e002      	b.n	80077d6 <_printf_i+0x1c6>
 80077d0:	0668      	lsls	r0, r5, #25
 80077d2:	d5fb      	bpl.n	80077cc <_printf_i+0x1bc>
 80077d4:	8019      	strh	r1, [r3, #0]
 80077d6:	2300      	movs	r3, #0
 80077d8:	6123      	str	r3, [r4, #16]
 80077da:	4616      	mov	r6, r2
 80077dc:	e7bc      	b.n	8007758 <_printf_i+0x148>
 80077de:	6833      	ldr	r3, [r6, #0]
 80077e0:	1d1a      	adds	r2, r3, #4
 80077e2:	6032      	str	r2, [r6, #0]
 80077e4:	681e      	ldr	r6, [r3, #0]
 80077e6:	6862      	ldr	r2, [r4, #4]
 80077e8:	2100      	movs	r1, #0
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7f8 fd08 	bl	8000200 <memchr>
 80077f0:	b108      	cbz	r0, 80077f6 <_printf_i+0x1e6>
 80077f2:	1b80      	subs	r0, r0, r6
 80077f4:	6060      	str	r0, [r4, #4]
 80077f6:	6863      	ldr	r3, [r4, #4]
 80077f8:	6123      	str	r3, [r4, #16]
 80077fa:	2300      	movs	r3, #0
 80077fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007800:	e7aa      	b.n	8007758 <_printf_i+0x148>
 8007802:	6923      	ldr	r3, [r4, #16]
 8007804:	4632      	mov	r2, r6
 8007806:	4649      	mov	r1, r9
 8007808:	4640      	mov	r0, r8
 800780a:	47d0      	blx	sl
 800780c:	3001      	adds	r0, #1
 800780e:	d0ad      	beq.n	800776c <_printf_i+0x15c>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	079b      	lsls	r3, r3, #30
 8007814:	d413      	bmi.n	800783e <_printf_i+0x22e>
 8007816:	68e0      	ldr	r0, [r4, #12]
 8007818:	9b03      	ldr	r3, [sp, #12]
 800781a:	4298      	cmp	r0, r3
 800781c:	bfb8      	it	lt
 800781e:	4618      	movlt	r0, r3
 8007820:	e7a6      	b.n	8007770 <_printf_i+0x160>
 8007822:	2301      	movs	r3, #1
 8007824:	4632      	mov	r2, r6
 8007826:	4649      	mov	r1, r9
 8007828:	4640      	mov	r0, r8
 800782a:	47d0      	blx	sl
 800782c:	3001      	adds	r0, #1
 800782e:	d09d      	beq.n	800776c <_printf_i+0x15c>
 8007830:	3501      	adds	r5, #1
 8007832:	68e3      	ldr	r3, [r4, #12]
 8007834:	9903      	ldr	r1, [sp, #12]
 8007836:	1a5b      	subs	r3, r3, r1
 8007838:	42ab      	cmp	r3, r5
 800783a:	dcf2      	bgt.n	8007822 <_printf_i+0x212>
 800783c:	e7eb      	b.n	8007816 <_printf_i+0x206>
 800783e:	2500      	movs	r5, #0
 8007840:	f104 0619 	add.w	r6, r4, #25
 8007844:	e7f5      	b.n	8007832 <_printf_i+0x222>
 8007846:	bf00      	nop
 8007848:	0800eb45 	.word	0x0800eb45
 800784c:	0800eb56 	.word	0x0800eb56

08007850 <__sflush_r>:
 8007850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007858:	0716      	lsls	r6, r2, #28
 800785a:	4605      	mov	r5, r0
 800785c:	460c      	mov	r4, r1
 800785e:	d454      	bmi.n	800790a <__sflush_r+0xba>
 8007860:	684b      	ldr	r3, [r1, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	dc02      	bgt.n	800786c <__sflush_r+0x1c>
 8007866:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007868:	2b00      	cmp	r3, #0
 800786a:	dd48      	ble.n	80078fe <__sflush_r+0xae>
 800786c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800786e:	2e00      	cmp	r6, #0
 8007870:	d045      	beq.n	80078fe <__sflush_r+0xae>
 8007872:	2300      	movs	r3, #0
 8007874:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007878:	682f      	ldr	r7, [r5, #0]
 800787a:	6a21      	ldr	r1, [r4, #32]
 800787c:	602b      	str	r3, [r5, #0]
 800787e:	d030      	beq.n	80078e2 <__sflush_r+0x92>
 8007880:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	0759      	lsls	r1, r3, #29
 8007886:	d505      	bpl.n	8007894 <__sflush_r+0x44>
 8007888:	6863      	ldr	r3, [r4, #4]
 800788a:	1ad2      	subs	r2, r2, r3
 800788c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800788e:	b10b      	cbz	r3, 8007894 <__sflush_r+0x44>
 8007890:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007892:	1ad2      	subs	r2, r2, r3
 8007894:	2300      	movs	r3, #0
 8007896:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007898:	6a21      	ldr	r1, [r4, #32]
 800789a:	4628      	mov	r0, r5
 800789c:	47b0      	blx	r6
 800789e:	1c43      	adds	r3, r0, #1
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	d106      	bne.n	80078b2 <__sflush_r+0x62>
 80078a4:	6829      	ldr	r1, [r5, #0]
 80078a6:	291d      	cmp	r1, #29
 80078a8:	d82b      	bhi.n	8007902 <__sflush_r+0xb2>
 80078aa:	4a2a      	ldr	r2, [pc, #168]	@ (8007954 <__sflush_r+0x104>)
 80078ac:	410a      	asrs	r2, r1
 80078ae:	07d6      	lsls	r6, r2, #31
 80078b0:	d427      	bmi.n	8007902 <__sflush_r+0xb2>
 80078b2:	2200      	movs	r2, #0
 80078b4:	6062      	str	r2, [r4, #4]
 80078b6:	04d9      	lsls	r1, r3, #19
 80078b8:	6922      	ldr	r2, [r4, #16]
 80078ba:	6022      	str	r2, [r4, #0]
 80078bc:	d504      	bpl.n	80078c8 <__sflush_r+0x78>
 80078be:	1c42      	adds	r2, r0, #1
 80078c0:	d101      	bne.n	80078c6 <__sflush_r+0x76>
 80078c2:	682b      	ldr	r3, [r5, #0]
 80078c4:	b903      	cbnz	r3, 80078c8 <__sflush_r+0x78>
 80078c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80078c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078ca:	602f      	str	r7, [r5, #0]
 80078cc:	b1b9      	cbz	r1, 80078fe <__sflush_r+0xae>
 80078ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078d2:	4299      	cmp	r1, r3
 80078d4:	d002      	beq.n	80078dc <__sflush_r+0x8c>
 80078d6:	4628      	mov	r0, r5
 80078d8:	f7ff fb48 	bl	8006f6c <_free_r>
 80078dc:	2300      	movs	r3, #0
 80078de:	6363      	str	r3, [r4, #52]	@ 0x34
 80078e0:	e00d      	b.n	80078fe <__sflush_r+0xae>
 80078e2:	2301      	movs	r3, #1
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b0      	blx	r6
 80078e8:	4602      	mov	r2, r0
 80078ea:	1c50      	adds	r0, r2, #1
 80078ec:	d1c9      	bne.n	8007882 <__sflush_r+0x32>
 80078ee:	682b      	ldr	r3, [r5, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d0c6      	beq.n	8007882 <__sflush_r+0x32>
 80078f4:	2b1d      	cmp	r3, #29
 80078f6:	d001      	beq.n	80078fc <__sflush_r+0xac>
 80078f8:	2b16      	cmp	r3, #22
 80078fa:	d11e      	bne.n	800793a <__sflush_r+0xea>
 80078fc:	602f      	str	r7, [r5, #0]
 80078fe:	2000      	movs	r0, #0
 8007900:	e022      	b.n	8007948 <__sflush_r+0xf8>
 8007902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007906:	b21b      	sxth	r3, r3
 8007908:	e01b      	b.n	8007942 <__sflush_r+0xf2>
 800790a:	690f      	ldr	r7, [r1, #16]
 800790c:	2f00      	cmp	r7, #0
 800790e:	d0f6      	beq.n	80078fe <__sflush_r+0xae>
 8007910:	0793      	lsls	r3, r2, #30
 8007912:	680e      	ldr	r6, [r1, #0]
 8007914:	bf08      	it	eq
 8007916:	694b      	ldreq	r3, [r1, #20]
 8007918:	600f      	str	r7, [r1, #0]
 800791a:	bf18      	it	ne
 800791c:	2300      	movne	r3, #0
 800791e:	eba6 0807 	sub.w	r8, r6, r7
 8007922:	608b      	str	r3, [r1, #8]
 8007924:	f1b8 0f00 	cmp.w	r8, #0
 8007928:	dde9      	ble.n	80078fe <__sflush_r+0xae>
 800792a:	6a21      	ldr	r1, [r4, #32]
 800792c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800792e:	4643      	mov	r3, r8
 8007930:	463a      	mov	r2, r7
 8007932:	4628      	mov	r0, r5
 8007934:	47b0      	blx	r6
 8007936:	2800      	cmp	r0, #0
 8007938:	dc08      	bgt.n	800794c <__sflush_r+0xfc>
 800793a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800793e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007942:	81a3      	strh	r3, [r4, #12]
 8007944:	f04f 30ff 	mov.w	r0, #4294967295
 8007948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800794c:	4407      	add	r7, r0
 800794e:	eba8 0800 	sub.w	r8, r8, r0
 8007952:	e7e7      	b.n	8007924 <__sflush_r+0xd4>
 8007954:	dfbffffe 	.word	0xdfbffffe

08007958 <_fflush_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	690b      	ldr	r3, [r1, #16]
 800795c:	4605      	mov	r5, r0
 800795e:	460c      	mov	r4, r1
 8007960:	b913      	cbnz	r3, 8007968 <_fflush_r+0x10>
 8007962:	2500      	movs	r5, #0
 8007964:	4628      	mov	r0, r5
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	b118      	cbz	r0, 8007972 <_fflush_r+0x1a>
 800796a:	6a03      	ldr	r3, [r0, #32]
 800796c:	b90b      	cbnz	r3, 8007972 <_fflush_r+0x1a>
 800796e:	f7ff f9a5 	bl	8006cbc <__sinit>
 8007972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0f3      	beq.n	8007962 <_fflush_r+0xa>
 800797a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800797c:	07d0      	lsls	r0, r2, #31
 800797e:	d404      	bmi.n	800798a <_fflush_r+0x32>
 8007980:	0599      	lsls	r1, r3, #22
 8007982:	d402      	bmi.n	800798a <_fflush_r+0x32>
 8007984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007986:	f7ff fae0 	bl	8006f4a <__retarget_lock_acquire_recursive>
 800798a:	4628      	mov	r0, r5
 800798c:	4621      	mov	r1, r4
 800798e:	f7ff ff5f 	bl	8007850 <__sflush_r>
 8007992:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007994:	07da      	lsls	r2, r3, #31
 8007996:	4605      	mov	r5, r0
 8007998:	d4e4      	bmi.n	8007964 <_fflush_r+0xc>
 800799a:	89a3      	ldrh	r3, [r4, #12]
 800799c:	059b      	lsls	r3, r3, #22
 800799e:	d4e1      	bmi.n	8007964 <_fflush_r+0xc>
 80079a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079a2:	f7ff fad3 	bl	8006f4c <__retarget_lock_release_recursive>
 80079a6:	e7dd      	b.n	8007964 <_fflush_r+0xc>

080079a8 <__swbuf_r>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	460e      	mov	r6, r1
 80079ac:	4614      	mov	r4, r2
 80079ae:	4605      	mov	r5, r0
 80079b0:	b118      	cbz	r0, 80079ba <__swbuf_r+0x12>
 80079b2:	6a03      	ldr	r3, [r0, #32]
 80079b4:	b90b      	cbnz	r3, 80079ba <__swbuf_r+0x12>
 80079b6:	f7ff f981 	bl	8006cbc <__sinit>
 80079ba:	69a3      	ldr	r3, [r4, #24]
 80079bc:	60a3      	str	r3, [r4, #8]
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	071a      	lsls	r2, r3, #28
 80079c2:	d501      	bpl.n	80079c8 <__swbuf_r+0x20>
 80079c4:	6923      	ldr	r3, [r4, #16]
 80079c6:	b943      	cbnz	r3, 80079da <__swbuf_r+0x32>
 80079c8:	4621      	mov	r1, r4
 80079ca:	4628      	mov	r0, r5
 80079cc:	f000 f82a 	bl	8007a24 <__swsetup_r>
 80079d0:	b118      	cbz	r0, 80079da <__swbuf_r+0x32>
 80079d2:	f04f 37ff 	mov.w	r7, #4294967295
 80079d6:	4638      	mov	r0, r7
 80079d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	6922      	ldr	r2, [r4, #16]
 80079de:	1a98      	subs	r0, r3, r2
 80079e0:	6963      	ldr	r3, [r4, #20]
 80079e2:	b2f6      	uxtb	r6, r6
 80079e4:	4283      	cmp	r3, r0
 80079e6:	4637      	mov	r7, r6
 80079e8:	dc05      	bgt.n	80079f6 <__swbuf_r+0x4e>
 80079ea:	4621      	mov	r1, r4
 80079ec:	4628      	mov	r0, r5
 80079ee:	f7ff ffb3 	bl	8007958 <_fflush_r>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d1ed      	bne.n	80079d2 <__swbuf_r+0x2a>
 80079f6:	68a3      	ldr	r3, [r4, #8]
 80079f8:	3b01      	subs	r3, #1
 80079fa:	60a3      	str	r3, [r4, #8]
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	1c5a      	adds	r2, r3, #1
 8007a00:	6022      	str	r2, [r4, #0]
 8007a02:	701e      	strb	r6, [r3, #0]
 8007a04:	6962      	ldr	r2, [r4, #20]
 8007a06:	1c43      	adds	r3, r0, #1
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d004      	beq.n	8007a16 <__swbuf_r+0x6e>
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	07db      	lsls	r3, r3, #31
 8007a10:	d5e1      	bpl.n	80079d6 <__swbuf_r+0x2e>
 8007a12:	2e0a      	cmp	r6, #10
 8007a14:	d1df      	bne.n	80079d6 <__swbuf_r+0x2e>
 8007a16:	4621      	mov	r1, r4
 8007a18:	4628      	mov	r0, r5
 8007a1a:	f7ff ff9d 	bl	8007958 <_fflush_r>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d0d9      	beq.n	80079d6 <__swbuf_r+0x2e>
 8007a22:	e7d6      	b.n	80079d2 <__swbuf_r+0x2a>

08007a24 <__swsetup_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4b29      	ldr	r3, [pc, #164]	@ (8007acc <__swsetup_r+0xa8>)
 8007a28:	4605      	mov	r5, r0
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	b118      	cbz	r0, 8007a38 <__swsetup_r+0x14>
 8007a30:	6a03      	ldr	r3, [r0, #32]
 8007a32:	b90b      	cbnz	r3, 8007a38 <__swsetup_r+0x14>
 8007a34:	f7ff f942 	bl	8006cbc <__sinit>
 8007a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a3c:	0719      	lsls	r1, r3, #28
 8007a3e:	d422      	bmi.n	8007a86 <__swsetup_r+0x62>
 8007a40:	06da      	lsls	r2, r3, #27
 8007a42:	d407      	bmi.n	8007a54 <__swsetup_r+0x30>
 8007a44:	2209      	movs	r2, #9
 8007a46:	602a      	str	r2, [r5, #0]
 8007a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a4c:	81a3      	strh	r3, [r4, #12]
 8007a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a52:	e033      	b.n	8007abc <__swsetup_r+0x98>
 8007a54:	0758      	lsls	r0, r3, #29
 8007a56:	d512      	bpl.n	8007a7e <__swsetup_r+0x5a>
 8007a58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a5a:	b141      	cbz	r1, 8007a6e <__swsetup_r+0x4a>
 8007a5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a60:	4299      	cmp	r1, r3
 8007a62:	d002      	beq.n	8007a6a <__swsetup_r+0x46>
 8007a64:	4628      	mov	r0, r5
 8007a66:	f7ff fa81 	bl	8006f6c <_free_r>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a74:	81a3      	strh	r3, [r4, #12]
 8007a76:	2300      	movs	r3, #0
 8007a78:	6063      	str	r3, [r4, #4]
 8007a7a:	6923      	ldr	r3, [r4, #16]
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	f043 0308 	orr.w	r3, r3, #8
 8007a84:	81a3      	strh	r3, [r4, #12]
 8007a86:	6923      	ldr	r3, [r4, #16]
 8007a88:	b94b      	cbnz	r3, 8007a9e <__swsetup_r+0x7a>
 8007a8a:	89a3      	ldrh	r3, [r4, #12]
 8007a8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a94:	d003      	beq.n	8007a9e <__swsetup_r+0x7a>
 8007a96:	4621      	mov	r1, r4
 8007a98:	4628      	mov	r0, r5
 8007a9a:	f000 f887 	bl	8007bac <__smakebuf_r>
 8007a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa2:	f013 0201 	ands.w	r2, r3, #1
 8007aa6:	d00a      	beq.n	8007abe <__swsetup_r+0x9a>
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	60a2      	str	r2, [r4, #8]
 8007aac:	6962      	ldr	r2, [r4, #20]
 8007aae:	4252      	negs	r2, r2
 8007ab0:	61a2      	str	r2, [r4, #24]
 8007ab2:	6922      	ldr	r2, [r4, #16]
 8007ab4:	b942      	cbnz	r2, 8007ac8 <__swsetup_r+0xa4>
 8007ab6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007aba:	d1c5      	bne.n	8007a48 <__swsetup_r+0x24>
 8007abc:	bd38      	pop	{r3, r4, r5, pc}
 8007abe:	0799      	lsls	r1, r3, #30
 8007ac0:	bf58      	it	pl
 8007ac2:	6962      	ldrpl	r2, [r4, #20]
 8007ac4:	60a2      	str	r2, [r4, #8]
 8007ac6:	e7f4      	b.n	8007ab2 <__swsetup_r+0x8e>
 8007ac8:	2000      	movs	r0, #0
 8007aca:	e7f7      	b.n	8007abc <__swsetup_r+0x98>
 8007acc:	2000001c 	.word	0x2000001c

08007ad0 <memmove>:
 8007ad0:	4288      	cmp	r0, r1
 8007ad2:	b510      	push	{r4, lr}
 8007ad4:	eb01 0402 	add.w	r4, r1, r2
 8007ad8:	d902      	bls.n	8007ae0 <memmove+0x10>
 8007ada:	4284      	cmp	r4, r0
 8007adc:	4623      	mov	r3, r4
 8007ade:	d807      	bhi.n	8007af0 <memmove+0x20>
 8007ae0:	1e43      	subs	r3, r0, #1
 8007ae2:	42a1      	cmp	r1, r4
 8007ae4:	d008      	beq.n	8007af8 <memmove+0x28>
 8007ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007aee:	e7f8      	b.n	8007ae2 <memmove+0x12>
 8007af0:	4402      	add	r2, r0
 8007af2:	4601      	mov	r1, r0
 8007af4:	428a      	cmp	r2, r1
 8007af6:	d100      	bne.n	8007afa <memmove+0x2a>
 8007af8:	bd10      	pop	{r4, pc}
 8007afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b02:	e7f7      	b.n	8007af4 <memmove+0x24>

08007b04 <_realloc_r>:
 8007b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b08:	4680      	mov	r8, r0
 8007b0a:	4615      	mov	r5, r2
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	b921      	cbnz	r1, 8007b1a <_realloc_r+0x16>
 8007b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b14:	4611      	mov	r1, r2
 8007b16:	f7fe bfb9 	b.w	8006a8c <_malloc_r>
 8007b1a:	b92a      	cbnz	r2, 8007b28 <_realloc_r+0x24>
 8007b1c:	f7ff fa26 	bl	8006f6c <_free_r>
 8007b20:	2400      	movs	r4, #0
 8007b22:	4620      	mov	r0, r4
 8007b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b28:	f000 f89e 	bl	8007c68 <_malloc_usable_size_r>
 8007b2c:	4285      	cmp	r5, r0
 8007b2e:	4606      	mov	r6, r0
 8007b30:	d802      	bhi.n	8007b38 <_realloc_r+0x34>
 8007b32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b36:	d8f4      	bhi.n	8007b22 <_realloc_r+0x1e>
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	f7fe ffa6 	bl	8006a8c <_malloc_r>
 8007b40:	4607      	mov	r7, r0
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d0ec      	beq.n	8007b20 <_realloc_r+0x1c>
 8007b46:	42b5      	cmp	r5, r6
 8007b48:	462a      	mov	r2, r5
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	bf28      	it	cs
 8007b4e:	4632      	movcs	r2, r6
 8007b50:	f7ff f9fd 	bl	8006f4e <memcpy>
 8007b54:	4621      	mov	r1, r4
 8007b56:	4640      	mov	r0, r8
 8007b58:	f7ff fa08 	bl	8006f6c <_free_r>
 8007b5c:	463c      	mov	r4, r7
 8007b5e:	e7e0      	b.n	8007b22 <_realloc_r+0x1e>

08007b60 <__swhatbuf_r>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	460c      	mov	r4, r1
 8007b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b68:	2900      	cmp	r1, #0
 8007b6a:	b096      	sub	sp, #88	@ 0x58
 8007b6c:	4615      	mov	r5, r2
 8007b6e:	461e      	mov	r6, r3
 8007b70:	da0d      	bge.n	8007b8e <__swhatbuf_r+0x2e>
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b78:	f04f 0100 	mov.w	r1, #0
 8007b7c:	bf14      	ite	ne
 8007b7e:	2340      	movne	r3, #64	@ 0x40
 8007b80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b84:	2000      	movs	r0, #0
 8007b86:	6031      	str	r1, [r6, #0]
 8007b88:	602b      	str	r3, [r5, #0]
 8007b8a:	b016      	add	sp, #88	@ 0x58
 8007b8c:	bd70      	pop	{r4, r5, r6, pc}
 8007b8e:	466a      	mov	r2, sp
 8007b90:	f000 f848 	bl	8007c24 <_fstat_r>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	dbec      	blt.n	8007b72 <__swhatbuf_r+0x12>
 8007b98:	9901      	ldr	r1, [sp, #4]
 8007b9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ba2:	4259      	negs	r1, r3
 8007ba4:	4159      	adcs	r1, r3
 8007ba6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007baa:	e7eb      	b.n	8007b84 <__swhatbuf_r+0x24>

08007bac <__smakebuf_r>:
 8007bac:	898b      	ldrh	r3, [r1, #12]
 8007bae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bb0:	079d      	lsls	r5, r3, #30
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	d507      	bpl.n	8007bc8 <__smakebuf_r+0x1c>
 8007bb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	6123      	str	r3, [r4, #16]
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	6163      	str	r3, [r4, #20]
 8007bc4:	b003      	add	sp, #12
 8007bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bc8:	ab01      	add	r3, sp, #4
 8007bca:	466a      	mov	r2, sp
 8007bcc:	f7ff ffc8 	bl	8007b60 <__swhatbuf_r>
 8007bd0:	9f00      	ldr	r7, [sp, #0]
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7fe ff58 	bl	8006a8c <_malloc_r>
 8007bdc:	b948      	cbnz	r0, 8007bf2 <__smakebuf_r+0x46>
 8007bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007be2:	059a      	lsls	r2, r3, #22
 8007be4:	d4ee      	bmi.n	8007bc4 <__smakebuf_r+0x18>
 8007be6:	f023 0303 	bic.w	r3, r3, #3
 8007bea:	f043 0302 	orr.w	r3, r3, #2
 8007bee:	81a3      	strh	r3, [r4, #12]
 8007bf0:	e7e2      	b.n	8007bb8 <__smakebuf_r+0xc>
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	6020      	str	r0, [r4, #0]
 8007bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bfa:	81a3      	strh	r3, [r4, #12]
 8007bfc:	9b01      	ldr	r3, [sp, #4]
 8007bfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c02:	b15b      	cbz	r3, 8007c1c <__smakebuf_r+0x70>
 8007c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c08:	4630      	mov	r0, r6
 8007c0a:	f000 f81d 	bl	8007c48 <_isatty_r>
 8007c0e:	b128      	cbz	r0, 8007c1c <__smakebuf_r+0x70>
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	f023 0303 	bic.w	r3, r3, #3
 8007c16:	f043 0301 	orr.w	r3, r3, #1
 8007c1a:	81a3      	strh	r3, [r4, #12]
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	431d      	orrs	r5, r3
 8007c20:	81a5      	strh	r5, [r4, #12]
 8007c22:	e7cf      	b.n	8007bc4 <__smakebuf_r+0x18>

08007c24 <_fstat_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4d07      	ldr	r5, [pc, #28]	@ (8007c44 <_fstat_r+0x20>)
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	4611      	mov	r1, r2
 8007c30:	602b      	str	r3, [r5, #0]
 8007c32:	f7fa fd20 	bl	8002676 <_fstat>
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	d102      	bne.n	8007c40 <_fstat_r+0x1c>
 8007c3a:	682b      	ldr	r3, [r5, #0]
 8007c3c:	b103      	cbz	r3, 8007c40 <_fstat_r+0x1c>
 8007c3e:	6023      	str	r3, [r4, #0]
 8007c40:	bd38      	pop	{r3, r4, r5, pc}
 8007c42:	bf00      	nop
 8007c44:	20000550 	.word	0x20000550

08007c48 <_isatty_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	4d06      	ldr	r5, [pc, #24]	@ (8007c64 <_isatty_r+0x1c>)
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4604      	mov	r4, r0
 8007c50:	4608      	mov	r0, r1
 8007c52:	602b      	str	r3, [r5, #0]
 8007c54:	f7fa fd1f 	bl	8002696 <_isatty>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d102      	bne.n	8007c62 <_isatty_r+0x1a>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	b103      	cbz	r3, 8007c62 <_isatty_r+0x1a>
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	20000550 	.word	0x20000550

08007c68 <_malloc_usable_size_r>:
 8007c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c6c:	1f18      	subs	r0, r3, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	bfbc      	itt	lt
 8007c72:	580b      	ldrlt	r3, [r1, r0]
 8007c74:	18c0      	addlt	r0, r0, r3
 8007c76:	4770      	bx	lr

08007c78 <_init>:
 8007c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7a:	bf00      	nop
 8007c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7e:	bc08      	pop	{r3}
 8007c80:	469e      	mov	lr, r3
 8007c82:	4770      	bx	lr

08007c84 <_fini>:
 8007c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c86:	bf00      	nop
 8007c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8a:	bc08      	pop	{r3}
 8007c8c:	469e      	mov	lr, r3
 8007c8e:	4770      	bx	lr
